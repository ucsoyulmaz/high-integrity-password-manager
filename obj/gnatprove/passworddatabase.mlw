(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_password_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_password_length [#"passworddatabase.ads" 8 0 0][@name:Max_Password_Length] [@model_trace:2457] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_url_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_url_length [#"passworddatabase.ads" 9 0 0][@model_trace:2467] [@name:Max_URL_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcount_typeB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcount_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcount_typeB__ref =
  { mutable tcount_typeB__content : tcount_typeB }
 
 function tcount_typeB__ref_tcount_typeB__content__projection 
   (a : tcount_typeB__ref) : tcount_typeB =
  a.tcount_typeB__content
 
 meta "model_projection" function tcount_typeB__ref_tcount_typeB__content__projection
 
 meta "inline:no" function tcount_typeB__ref_tcount_typeB__content__projection
 
 val tcount_typeB__havoc 
   (x : tcount_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB__rep
 use        Ada__containers__Tcount_typeB as Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__Tcount_typeB.tcount_typeB) : int =
  (Ada__containers__Tcount_typeB.tcount_typeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__Tcount_typeB.tcount_typeB, 
 predicate in_range = Ada__containers__Tcount_typeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count_type =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count_type__ref =
  { mutable count_type__content : count_type }
 
 function count_type__ref_count_type__content__projection 
   (a : count_type__ref) : count_type =
  a.count_type__content
 
 meta "model_projection" function count_type__ref_count_type__content__projection
 
 meta "inline:no" function count_type__ref_count_type__content__projection
 
 val count_type__havoc 
   (x : count_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type__rep
 use        Ada__containers__count_type as Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__count_type.count_type) : int =
  (Ada__containers__count_type.count_type'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__count_type.count_type, 
 predicate in_range = Ada__containers__count_type.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_entries" defined at passworddatabase.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_entries
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_entries [#"passworddatabase.ads" 10 0 0][@model_trace:2477] [@name:Max_Entries] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@name:Max_MyString_Length] [@model_trace:52911] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__mystring__T13s.t13s) : int =
  (Passworddatabase__passwords__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__mystring__T13s.t13s, 
 predicate in_range = Passworddatabase__passwords__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__passwords__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__passwords__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__passwords__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystringstr as Passworddatabase__passwords__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__passwords__mystring__length [@model_trace:.52820] [@name:Length] : Passworddatabase__passwords__mystring__T13s.t13s; rec__passworddatabase__passwords__mystring__str [@model_trace:.52835] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__passwords__mystring__length__projection [@model_trace:.52820] [@name:Length] 
   (a : __split_fields) : Passworddatabase__passwords__mystring__T13s.t13s =
  a.rec__passworddatabase__passwords__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__passwords__mystring__str__projection [@model_trace:.52835] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__passwords__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__passwords__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__length_ 
   (a : __rep) : Passworddatabase__passwords__mystring__T13s.t13s
  requires {  (passworddatabase__passwords__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__length) }
 
 predicate passworddatabase__passwords__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__passwords__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep a.__split_fields.rec__passworddatabase__passwords__mystring__length) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep b.__split_fields.rec__passworddatabase__passwords__mystring__length)) /\ (Passworddatabase__passwords__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__passwords__mystring__str b.__split_fields.rec__passworddatabase__passwords__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_projected] [@name:M] [@model_trace:52519] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_projected] [@model_trace:52670] [@name:M] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function length 
   (m : Passworddatabase__passwords__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Passworddatabase__passwords__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function to_string 
   (m : Passworddatabase__passwords__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Passworddatabase__passwords__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_projected] [@model_trace:52553] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function from_string 
   (s : Standard__string.string) : Passworddatabase__passwords__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Passworddatabase__passwords__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_trace:52572] [@model_projected] [@name:M1] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_projected] [@name:M2] [@model_trace:52581] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function less 
   (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_projected] [@name:M1] [@model_trace:52636] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_projected] [@model_trace:52645] [@name:M2] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at mystring.ads:21 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__equal__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_projected] [@name:M] [@model_trace:52756] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@model_trace:52765] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function get 
   (m : Passworddatabase__passwords__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Passworddatabase__passwords__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function equal 
   (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_projected] [@name:M] [@model_trace:52712] 
   : Passworddatabase__passwords__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:52721] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__passwords__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@model_trace:52730] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val function substring 
   (m : Passworddatabase__passwords__mystring.mystring) (from : int) (to__ : int) : Passworddatabase__passwords__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Passworddatabase__passwords__mystring.mystring) (m : Passworddatabase__passwords__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T290s" defined at mystring.adb:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__to_string__T290s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t290s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t290s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t290s__ref =
  { mutable t290s__content : t290s }
 
 function t290s__ref_t290s__content__projection 
   (a : t290s__ref) : t290s =
  a.t290s__content
 
 meta "model_projection" function t290s__ref_t290s__content__projection
 
 meta "inline:no" function t290s__ref_t290s__content__projection
 
 val t290s__havoc 
   (x : t290s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T291s" defined at mystring.adb:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__to_string__T291s
 use export Passworddatabase__passwords__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t291s =
  tmystringstrB
 
 type t291s__ref =
  { mutable t291s__content : t291s }
 
 function t291s__ref_t291s__content__projection 
   (a : t291s__ref) : t291s =
  a.t291s__content
 
 meta "model_projection" function t291s__ref_t291s__content__projection
 
 meta "inline:no" function t291s__ref_t291s__content__projection
 
 val t291s__havoc 
   (x : t291s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS293sP1" defined at mystring.adb:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__TS293sP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS293sP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS293sP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS293sP1__ref =
  { mutable tS293sP1__content : tS293sP1 }
 
 function tS293sP1__ref_tS293sP1__content__projection 
   (a : tS293sP1__ref) : tS293sP1 =
  a.tS293sP1__content
 
 meta "model_projection" function tS293sP1__ref_tS293sP1__content__projection
 
 meta "inline:no" function tS293sP1__ref_tS293sP1__content__projection
 
 val tS293sP1__havoc 
   (x : tS293sP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S293s" defined at mystring.adb:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__S293s
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s293s =
  string
 
 type s293s__ref =
  { mutable s293s__content : s293s }
 
 function s293s__ref_s293s__content__projection 
   (a : s293s__ref) : s293s =
  a.s293s__content
 
 meta "model_projection" function s293s__ref_s293s__content__projection
 
 meta "inline:no" function s293s__ref_s293s__content__projection
 
 val s293s__havoc 
   (x : s293s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T294s" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__T294s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t294s =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t294s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t294s__ref =
  { mutable t294s__content : t294s }
 
 function t294s__ref_t294s__content__projection 
   (a : t294s__ref) : t294s =
  a.t294s__content
 
 meta "model_projection" function t294s__ref_t294s__content__projection
 
 meta "inline:no" function t294s__ref_t294s__content__projection
 
 val t294s__havoc 
   (x : t294s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T294s" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__T294s__rep
 use        Passworddatabase__passwords__from_string__T294s as Passworddatabase__passwords__from_string__T294s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__from_string__T294s.t294s) : int =
  (Passworddatabase__passwords__from_string__T294s.t294s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__from_string__T294s.t294s, 
 predicate in_range = Passworddatabase__passwords__from_string__T294s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T295s" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__T295s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T296s" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__from_string__L_1__T296s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t296s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t296s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t296s__ref =
  { mutable t296s__content : t296s }
 
 function t296s__ref_t296s__content__projection 
   (a : t296s__ref) : t296s =
  a.t296s__content
 
 meta "model_projection" function t296s__ref_t296s__content__projection
 
 meta "inline:no" function t296s__ref_t296s__content__projection
 
 val t296s__havoc 
   (x : t296s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T307s" defined at mystring.adb:60 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__equal__L_3__L306s__T307s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t307s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t307s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t307s__ref =
  { mutable t307s__content : t307s }
 
 function t307s__ref_t307s__content__projection 
   (a : t307s__ref) : t307s =
  a.t307s__content
 
 meta "model_projection" function t307s__ref_t307s__content__projection
 
 meta "inline:no" function t307s__ref_t307s__content__projection
 
 val t307s__havoc 
   (x : t307s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T305s" defined at mystring.adb:60 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__equal__L_3__L304s__T305s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t305s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t305s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t305s__ref =
  { mutable t305s__content : t305s }
 
 function t305s__ref_t305s__content__projection 
   (a : t305s__ref) : t305s =
  a.t305s__content
 
 meta "model_projection" function t305s__ref_t305s__content__projection
 
 meta "inline:no" function t305s__ref_t305s__content__projection
 
 val t305s__havoc 
   (x : t305s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T310s" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__substring__T310s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t310s =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t310s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t310s__ref =
  { mutable t310s__content : t310s }
 
 function t310s__ref_t310s__content__projection 
   (a : t310s__ref) : t310s =
  a.t310s__content
 
 meta "model_projection" function t310s__ref_t310s__content__projection
 
 meta "inline:no" function t310s__ref_t310s__content__projection
 
 val t310s__havoc 
   (x : t310s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T310s" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__substring__T310s__rep
 use        Passworddatabase__passwords__substring__T310s as Passworddatabase__passwords__substring__T310s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__substring__T310s.t310s) : int =
  (Passworddatabase__passwords__substring__T310s.t310s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__substring__T310s.t310s, 
 predicate in_range = Passworddatabase__passwords__substring__T310s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T311s" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__substring__T311s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T312s" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__substring__L_4__T312s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t312s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t312s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t312s__ref =
  { mutable t312s__content : t312s }
 
 function t312s__ref_t312s__content__projection 
   (a : t312s__ref) : t312s =
  a.t312s__content
 
 meta "model_projection" function t312s__ref_t312s__content__projection
 
 meta "inline:no" function t312s__ref_t312s__content__projection
 
 val t312s__havoc 
   (x : t312s__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@name:Max_MyString_Length] [@model_trace:53793] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t28s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t28s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t28s__ref =
  { mutable t28s__content : t28s }
 
 function t28s__ref_t28s__content__projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref_t28s__content__projection
 
 meta "inline:no" function t28s__ref_t28s__content__projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__mystring__T28s.t28s) : int =
  (Passworddatabase__urls__mystring__T28s.t28s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__mystring__T28s.t28s, 
 predicate in_range = Passworddatabase__urls__mystring__T28s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__2__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__urls__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__urls__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__urls__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__2__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystringstr as Passworddatabase__urls__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__urls__mystring__length [@name:Length] [@model_trace:.53702] : Passworddatabase__urls__mystring__T28s.t28s; rec__passworddatabase__urls__mystring__str [@name:Str] [@model_trace:.53717] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__urls__mystring__length__projection [@name:Length] [@model_trace:.53702] 
   (a : __split_fields) : Passworddatabase__urls__mystring__T28s.t28s =
  a.rec__passworddatabase__urls__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__urls__mystring__str__projection [@name:Str] [@model_trace:.53717] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__urls__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__urls__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__length_ 
   (a : __rep) : Passworddatabase__urls__mystring__T28s.t28s
  requires {  (passworddatabase__urls__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__length) }
 
 predicate passworddatabase__urls__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__urls__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__urls__mystring__T28s__rep.to_rep a.__split_fields.rec__passworddatabase__urls__mystring__length) = (Passworddatabase__urls__mystring__T28s__rep.to_rep b.__split_fields.rec__passworddatabase__urls__mystring__length)) /\ (Passworddatabase__urls__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__urls__mystring__str b.__split_fields.rec__passworddatabase__urls__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__2__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__2__projection
 
 meta "inline:no" function mystring__ref_mystring__content__2__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_trace:53401] [@model_projected] [@name:M] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_trace:53552] [@model_projected] [@name:M] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function length 
   (m : Passworddatabase__urls__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_163 : int) (m : Passworddatabase__urls__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function to_string 
   (m : Passworddatabase__urls__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_164 : Standard__string.string) (m : Passworddatabase__urls__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_trace:53435] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function from_string 
   (s : Standard__string.string) : Passworddatabase__urls__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_165 : Passworddatabase__urls__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:53454] [@name:M1] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_trace:53463] [@model_projected] [@name:M2] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function less 
   (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_166 : bool) (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_trace:53518] [@model_projected] [@name:M1] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_trace:53527] [@model_projected] [@name:M2] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T25s" defined at mystring.ads:21 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__equal__L24s__T25s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t25s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t25s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t25s__ref =
  { mutable t25s__content : t25s }
 
 function t25s__ref_t25s__content__projection 
   (a : t25s__ref) : t25s =
  a.t25s__content
 
 meta "model_projection" function t25s__ref_t25s__content__projection
 
 meta "inline:no" function t25s__ref_t25s__content__projection
 
 val t25s__havoc 
   (x : t25s__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_trace:53638] [@model_projected] [@name:M] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@name:Index] [@model_trace:53647] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function get 
   (m : Passworddatabase__urls__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_167 : int) (m : Passworddatabase__urls__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function equal 
   (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_168 : bool) (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_projected] [@name:M] [@model_trace:53594] 
   : Passworddatabase__urls__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:53603] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__urls__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@model_trace:53612] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val function substring 
   (m : Passworddatabase__urls__mystring.mystring) (from : int) (to__ : int) : Passworddatabase__urls__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_169 : Passworddatabase__urls__mystring.mystring) (m : Passworddatabase__urls__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__2__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__2__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__2__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__2__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__2__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__2__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T314s" defined at mystring.adb:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__to_string__T314s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t314s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t314s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t314s__ref =
  { mutable t314s__content : t314s }
 
 function t314s__ref_t314s__content__projection 
   (a : t314s__ref) : t314s =
  a.t314s__content
 
 meta "model_projection" function t314s__ref_t314s__content__projection
 
 meta "inline:no" function t314s__ref_t314s__content__projection
 
 val t314s__havoc 
   (x : t314s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T315s" defined at mystring.adb:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__to_string__T315s
 use export Passworddatabase__urls__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t315s =
  tmystringstrB
 
 type t315s__ref =
  { mutable t315s__content : t315s }
 
 function t315s__ref_t315s__content__projection 
   (a : t315s__ref) : t315s =
  a.t315s__content
 
 meta "model_projection" function t315s__ref_t315s__content__projection
 
 meta "inline:no" function t315s__ref_t315s__content__projection
 
 val t315s__havoc 
   (x : t315s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS317sP1" defined at mystring.adb:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__TS317sP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS317sP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS317sP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS317sP1__ref =
  { mutable tS317sP1__content : tS317sP1 }
 
 function tS317sP1__ref_tS317sP1__content__projection 
   (a : tS317sP1__ref) : tS317sP1 =
  a.tS317sP1__content
 
 meta "model_projection" function tS317sP1__ref_tS317sP1__content__projection
 
 meta "inline:no" function tS317sP1__ref_tS317sP1__content__projection
 
 val tS317sP1__havoc 
   (x : tS317sP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S317s" defined at mystring.adb:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__S317s
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s317s =
  string
 
 type s317s__ref =
  { mutable s317s__content : s317s }
 
 function s317s__ref_s317s__content__projection 
   (a : s317s__ref) : s317s =
  a.s317s__content
 
 meta "model_projection" function s317s__ref_s317s__content__projection
 
 meta "inline:no" function s317s__ref_s317s__content__projection
 
 val s317s__havoc 
   (x : s317s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T318s" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__T318s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t318s =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t318s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t318s__ref =
  { mutable t318s__content : t318s }
 
 function t318s__ref_t318s__content__projection 
   (a : t318s__ref) : t318s =
  a.t318s__content
 
 meta "model_projection" function t318s__ref_t318s__content__projection
 
 meta "inline:no" function t318s__ref_t318s__content__projection
 
 val t318s__havoc 
   (x : t318s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T318s" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__T318s__rep
 use        Passworddatabase__urls__from_string__T318s as Passworddatabase__urls__from_string__T318s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__from_string__T318s.t318s) : int =
  (Passworddatabase__urls__from_string__T318s.t318s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__from_string__T318s.t318s, 
 predicate in_range = Passworddatabase__urls__from_string__T318s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T319s" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__T319s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T320s" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__from_string__L_1__T320s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t320s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t320s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t320s__ref =
  { mutable t320s__content : t320s }
 
 function t320s__ref_t320s__content__projection 
   (a : t320s__ref) : t320s =
  a.t320s__content
 
 meta "model_projection" function t320s__ref_t320s__content__projection
 
 meta "inline:no" function t320s__ref_t320s__content__projection
 
 val t320s__havoc 
   (x : t320s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T331s" defined at mystring.adb:60 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__equal__L_3__L330s__T331s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t331s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t331s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t331s__ref =
  { mutable t331s__content : t331s }
 
 function t331s__ref_t331s__content__projection 
   (a : t331s__ref) : t331s =
  a.t331s__content
 
 meta "model_projection" function t331s__ref_t331s__content__projection
 
 meta "inline:no" function t331s__ref_t331s__content__projection
 
 val t331s__havoc 
   (x : t331s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T329s" defined at mystring.adb:60 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__equal__L_3__L328s__T329s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t329s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t329s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t329s__ref =
  { mutable t329s__content : t329s }
 
 function t329s__ref_t329s__content__projection 
   (a : t329s__ref) : t329s =
  a.t329s__content
 
 meta "model_projection" function t329s__ref_t329s__content__projection
 
 meta "inline:no" function t329s__ref_t329s__content__projection
 
 val t329s__havoc 
   (x : t329s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T334s" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__substring__T334s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t334s =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t334s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t334s__ref =
  { mutable t334s__content : t334s }
 
 function t334s__ref_t334s__content__projection 
   (a : t334s__ref) : t334s =
  a.t334s__content
 
 meta "model_projection" function t334s__ref_t334s__content__projection
 
 meta "inline:no" function t334s__ref_t334s__content__projection
 
 val t334s__havoc 
   (x : t334s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T334s" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__substring__T334s__rep
 use        Passworddatabase__urls__substring__T334s as Passworddatabase__urls__substring__T334s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__substring__T334s.t334s) : int =
  (Passworddatabase__urls__substring__T334s.t334s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__substring__T334s.t334s, 
 predicate in_range = Passworddatabase__urls__substring__T334s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T335s" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__substring__T335s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T336s" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__substring__L_4__T336s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t336s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t336s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t336s__ref =
  { mutable t336s__content : t336s }
 
 function t336s__ref_t336s__content__projection 
   (a : t336s__ref) : t336s =
  a.t336s__content
 
 meta "model_projection" function t336s__ref_t336s__content__projection
 
 meta "inline:no" function t336s__ref_t336s__content__projection
 
 val t336s__havoc 
   (x : t336s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__password
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type password =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : password) (b : password) : bool
 
 val constant dummy 
   : password

 
 type password__ref =
  { mutable password__content : password }
 
 function password__ref_password__content__projection 
   (a : password__ref) : password =
  a.password__content
 
 meta "model_projection" function password__ref_password__content__projection
 
 meta "inline:no" function password__ref_password__content__projection
 
 val password__havoc 
   (x : password__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__url
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type url =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : url) (b : url) : bool
 
 val constant dummy 
   : url

 
 type url__ref =
  { mutable url__content : url }
 
 function url__ref_url__content__projection 
   (a : url__ref) : url =
  a.url__content
 
 meta "model_projection" function url__ref_url__content__projection
 
 meta "inline:no" function url__ref_url__content__projection
 
 val url__havoc 
   (x : url__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "database" defined at passworddatabase.ads:18, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__database
 use export Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "d" defined at passworddatabase.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 22 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u" defined at passworddatabase.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 22 0 0][@model_projected] [@model_trace:2583] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has_password_for" defined at passworddatabase.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__has_password_for
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url

 val function has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
 
 val predicate has_password_for__function_guard 
   (temp___result_170 : bool) (d : Passworddatabase__database.database) (u : Passworddatabase__url.url)

end

(* Module for defining the constant "d" defined at passworddatabase.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__get__3__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 24 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__get__3__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u" defined at passworddatabase.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__get__3__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 24 0 0][@model_projected] [@model_trace:2611] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__get__3__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__3" defined at passworddatabase.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__get__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__password as Passworddatabase__password

 val function get__3 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : Passworddatabase__password.password
 
 val predicate get__3__function_guard 
   (temp___result_171 : Passworddatabase__password.password) (d : Passworddatabase__database.database) (u : Passworddatabase__url.url)

end

(* Module for defining the constant "u" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__put__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 27 0 0][@model_trace:2647] [@model_projected] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "p" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__put__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p [#"passworddatabase.ads" 27 0 0][@model_projected] [@model_trace:2656] [@name:P] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "d" defined at passworddatabase.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__length__3__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 45 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__length__3__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length__3" defined at passworddatabase.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__length__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val function length__3 
   (d : Passworddatabase__database.database) : int
 
 val predicate length__3__function_guard 
   (temp___result_172 : int) (d : Passworddatabase__database.database)

end

(* Module for defining the constant "u" defined at passworddatabase.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__remove__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 30 0 0][@model_projected] [@model_trace:2697] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__remove__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at passworddatabase.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 33 0 0][@model_projected] [@name:S] [@model_trace:2723] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password

 val function from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
 
 val predicate from_string__function_guard 
   (temp___result_173 : Passworddatabase__password.password) (s : Standard__string.string)

end

(* Module for defining the constant "s" defined at passworddatabase.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 35 0 0][@model_trace:2751] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url

 val function from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
 
 val predicate from_string__2__function_guard 
   (temp___result_174 : Passworddatabase__url.url) (s : Standard__string.string)

end

(* Module for defining the constant "p" defined at passworddatabase.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__to_string__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p [#"passworddatabase.ads" 37 0 0][@model_projected] [@model_trace:2779] [@name:P] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at passworddatabase.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__to_string__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string" defined at passworddatabase.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password

 val function to_string 
   (p : Passworddatabase__password.password) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_175 : Standard__string.string) (p : Passworddatabase__password.password)

end

(* Module for defining the constant "u" defined at passworddatabase.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__to_string__2__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 38 0 0][@model_trace:2798] [@model_projected] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__to_string__2__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string__2" defined at passworddatabase.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__to_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url

 val function to_string__2 
   (u : Passworddatabase__url.url) : Standard__string.string
 
 val predicate to_string__2__function_guard 
   (temp___result_176 : Standard__string.string) (u : Passworddatabase__url.url)

end

(* Module for defining the constant "u1" defined at passworddatabase.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__less__2__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u1 [#"passworddatabase.ads" 40 0 0][@model_projected] [@name:U1] [@model_trace:2817] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passworddatabase.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__less__2__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u2" defined at passworddatabase.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__less__2__u2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u2 [#"passworddatabase.ads" 40 0 0][@model_projected] [@name:U2] [@model_trace:2826] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u2" defined at passworddatabase.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__less__2__u2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less__2" defined at passworddatabase.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__less__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val function less__2 
   (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url) : bool
 
 val predicate less__2__function_guard 
   (temp___result_177 : bool) (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url)

end

(* Module for defining the constant "u1" defined at passworddatabase.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__equal__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u1 [#"passworddatabase.ads" 41 0 0][@model_projected] [@name:U1] [@model_trace:2845] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passworddatabase.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__equal__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u2" defined at passworddatabase.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__equal__u2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u2 [#"passworddatabase.ads" 41 0 0][@model_projected] [@name:U2] [@model_trace:2854] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u2" defined at passworddatabase.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__equal__u2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "equal" defined at passworddatabase.ads:41, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val function equal 
   (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url) : bool
 
 val predicate equal__function_guard 
   (temp___result_178 : bool) (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url)

end

(* Module for defining the constant "p1" defined at passworddatabase.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__equal__2__p1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p1 [#"passworddatabase.ads" 43 0 0][@model_trace:2873] [@model_projected] [@name:P1] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p1" defined at passworddatabase.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__equal__2__p1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "p2" defined at passworddatabase.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__equal__2__p2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p2 [#"passworddatabase.ads" 43 0 0][@model_projected] [@model_trace:2882] [@name:P2] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p2" defined at passworddatabase.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__equal__2__p2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "equal__2" defined at passworddatabase.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__equal__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val function equal__2 
   (p1 : Passworddatabase__password.password) (p2 : Passworddatabase__password.password) : bool
 
 val predicate equal__2__function_guard 
   (temp___result_179 : bool) (p1 : Passworddatabase__password.password) (p2 : Passworddatabase__password.password)

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_projected] [@name:M] [@model_trace:52784]  : Passworddatabase__passwords__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:110424] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_projected] [@name:Result] [@model_trace:110424'First] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:110424'Last] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_trace:110479] [@model_projected] [@name:M]  : Passworddatabase__passwords__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_projected] [@model_trace:110498] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_projected] [@model_trace:110575] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_projected] [@name:I] [@model_trace:110642]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_projected] [@name:I] [@model_trace:110819]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_projected] [@model_trace:111019] [@name:R]  : Passworddatabase__passwords__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@name:J] [@model_trace:111042]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__passwords__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_trace:111108] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:98209]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:98209'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:98209'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:98218] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_trace:53666] [@model_projected] [@name:M]  : Passworddatabase__urls__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_trace:111706] [@model_projected] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:111706'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:111706'Last] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_trace:111761] [@model_projected] [@name:M]  : Passworddatabase__urls__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_projected] [@name:J] [@model_trace:111780]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_trace:111857] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_trace:111924] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_projected] [@model_trace:112101] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_projected] [@model_trace:112301] [@name:R]  : Passworddatabase__urls__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@name:J] [@model_trace:112324]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__urls__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_projected] [@name:I] [@model_trace:112390]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 20 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__put__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 27 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__remove__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 30 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__remove__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__passwords__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__passwords__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__passwords__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__passwords__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__passwords__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__passwords__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__urls__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__urls__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__urls__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__urls__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passworddatabase__urls__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__urls__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at passworddatabase.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at passworddatabase.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) =
  (if (( temp___is_init_180 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_184)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_184 : int) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_185 : int) (temp___skip_top_level_186 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_185 : int) (temp___skip_top_level_186 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_185 : int) (temp___skip_top_level_186 : bool) }

end

(* Module giving axioms for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__Tcount_typeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__count_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__containers__count_type as Ada__containers__count_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_191 : int) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool) =
  (if (( temp___is_init_187 \/ (Ada__containers__count_type.first <= Ada__containers__count_type.last) )) then (
   (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last temp___expr_191)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_191 : int) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_191 : int) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_192 : int) (temp___skip_top_level_193 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_192 : int) (temp___skip_top_level_193 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_192 : int) (temp___skip_top_level_193 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_198 : Array__Int__Standard__character.map) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_198 : Array__Int__Standard__character.map) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_198 : Array__Int__Standard__character.map) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_200 : Array__Int__Standard__character.map) (temp___skip_top_level_201 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_200 : Array__Int__Standard__character.map) (temp___skip_top_level_201 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_200 : Array__Int__Standard__character.map) (temp___skip_top_level_201 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_208 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_208 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_208 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "T10s" defined at mystring.ads:21 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__equal__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__to_string__m as Passworddatabase__passwords__to_string__m
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__to_string__TresultS as Passworddatabase__passwords__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_260 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) =
  (if (temp___skip_constant_257) then (
   true) else (
   ( (Passworddatabase__passwords__to_string__TresultS.dynamic_property (1 : int) (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) (Passworddatabase__passwords__to_string__TresultS.first temp___expr_260) (Passworddatabase__passwords__to_string__TresultS.last temp___expr_260)) /\ ( ((Passworddatabase__passwords__to_string__TresultS.first temp___expr_260) = (1 : int)) /\ ((Passworddatabase__passwords__to_string__TresultS.last temp___expr_260) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_260 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_260 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_262 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___skip_top_level_263 : bool) =
  ( ( true /\ ((Passworddatabase__passwords__to_string__TresultS.first temp___expr_262) = (1 : int)) )/\((Passworddatabase__passwords__to_string__TresultS.last temp___expr_262) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_262 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___skip_top_level_263 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_262 : Passworddatabase__passwords__to_string__TresultS.tresultS) (temp___skip_top_level_263 : bool) }

end

(* Module giving axioms for type "T290s" defined at mystring.adb:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__to_string__T290s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T291s" defined at mystring.adb:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__to_string__T291s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS293sP1" defined at mystring.adb:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__from_string__TS293sP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S293s" defined at mystring.adb:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__from_string__S293s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__passwords__from_string__s as Passworddatabase__passwords__from_string__s
 use        Passworddatabase__passwords__from_string__S293s as Passworddatabase__passwords__from_string__S293s

 predicate dynamic_invariant [@inline] 
   (temp___expr_270 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) =
  (if (temp___skip_constant_267) then (
   true) else (
   ( (Passworddatabase__passwords__from_string__S293s.dynamic_property (Standard__string.first Passworddatabase__passwords__from_string__s.s) (Standard__string.last Passworddatabase__passwords__from_string__s.s) (Passworddatabase__passwords__from_string__S293s.first temp___expr_270) (Passworddatabase__passwords__from_string__S293s.last temp___expr_270)) /\ ( ((Passworddatabase__passwords__from_string__S293s.first temp___expr_270) = (Standard__string.first Passworddatabase__passwords__from_string__s.s)) /\ ((Passworddatabase__passwords__from_string__S293s.last temp___expr_270) = (Standard__string.last Passworddatabase__passwords__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_270 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_270 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_272 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___skip_top_level_273 : bool) =
  ( ( true /\ ((Passworddatabase__passwords__from_string__S293s.first temp___expr_272) = (Standard__string.first Passworddatabase__passwords__from_string__s.s)) )/\((Passworddatabase__passwords__from_string__S293s.last temp___expr_272) = (Standard__string.last Passworddatabase__passwords__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_272 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___skip_top_level_273 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_272 : Passworddatabase__passwords__from_string__S293s.s293s) (temp___skip_top_level_273 : bool) }

end

(* Module giving axioms for type "T294s" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__from_string__T294s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T295s" defined at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__from_string__T295s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T296s" defined at mystring.adb:20 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__from_string__L_1__T296s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T307s" defined at mystring.adb:60 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__equal__L_3__L306s__T307s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T305s" defined at mystring.adb:60 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__equal__L_3__L304s__T305s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T310s" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__substring__T310s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T311s" defined at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__substring__T311s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T312s" defined at mystring.adb:75 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__substring__L_4__T312s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_282 : Array__Int__Standard__character.map) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_282 : Array__Int__Standard__character.map) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_282 : Array__Int__Standard__character.map) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_284 : Array__Int__Standard__character.map) (temp___skip_top_level_285 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_284 : Array__Int__Standard__character.map) (temp___skip_top_level_285 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_284 : Array__Int__Standard__character.map) (temp___skip_top_level_285 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_292 : Passworddatabase__urls__mystring.mystring) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_292 : Passworddatabase__urls__mystring.mystring) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_292 : Passworddatabase__urls__mystring.mystring) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_294 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_295 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_294 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_295 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_294 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_295 : bool) }

end

(* Module giving axioms for type "T25s" defined at mystring.ads:21 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__equal__L24s__T25s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__to_string__m as Passworddatabase__urls__to_string__m
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__to_string__TresultS as Passworddatabase__urls__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_344 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___is_init_340 : bool) (temp___skip_constant_341 : bool) (temp___do_toplevel_342 : bool) (temp___do_typ_inv_343 : bool) =
  (if (temp___skip_constant_341) then (
   true) else (
   ( (Passworddatabase__urls__to_string__TresultS.dynamic_property (1 : int) (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) (Passworddatabase__urls__to_string__TresultS.first temp___expr_344) (Passworddatabase__urls__to_string__TresultS.last temp___expr_344)) /\ ( ((Passworddatabase__urls__to_string__TresultS.first temp___expr_344) = (1 : int)) /\ ((Passworddatabase__urls__to_string__TresultS.last temp___expr_344) = (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_344 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___is_init_340 : bool) (temp___skip_constant_341 : bool) (temp___do_toplevel_342 : bool) (temp___do_typ_inv_343 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_344 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___is_init_340 : bool) (temp___skip_constant_341 : bool) (temp___do_toplevel_342 : bool) (temp___do_typ_inv_343 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_346 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___skip_top_level_347 : bool) =
  ( ( true /\ ((Passworddatabase__urls__to_string__TresultS.first temp___expr_346) = (1 : int)) )/\((Passworddatabase__urls__to_string__TresultS.last temp___expr_346) = (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_346 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___skip_top_level_347 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_346 : Passworddatabase__urls__to_string__TresultS.tresultS) (temp___skip_top_level_347 : bool) }

end

(* Module giving axioms for type "T314s" defined at mystring.adb:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__to_string__T314s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T315s" defined at mystring.adb:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__to_string__T315s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS317sP1" defined at mystring.adb:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__from_string__TS317sP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S317s" defined at mystring.adb:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__from_string__S317s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__urls__from_string__s as Passworddatabase__urls__from_string__s
 use        Passworddatabase__urls__from_string__S317s as Passworddatabase__urls__from_string__S317s

 predicate dynamic_invariant [@inline] 
   (temp___expr_354 : Passworddatabase__urls__from_string__S317s.s317s) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) =
  (if (temp___skip_constant_351) then (
   true) else (
   ( (Passworddatabase__urls__from_string__S317s.dynamic_property (Standard__string.first Passworddatabase__urls__from_string__s.s) (Standard__string.last Passworddatabase__urls__from_string__s.s) (Passworddatabase__urls__from_string__S317s.first temp___expr_354) (Passworddatabase__urls__from_string__S317s.last temp___expr_354)) /\ ( ((Passworddatabase__urls__from_string__S317s.first temp___expr_354) = (Standard__string.first Passworddatabase__urls__from_string__s.s)) /\ ((Passworddatabase__urls__from_string__S317s.last temp___expr_354) = (Standard__string.last Passworddatabase__urls__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_354 : Passworddatabase__urls__from_string__S317s.s317s) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_354 : Passworddatabase__urls__from_string__S317s.s317s) (temp___is_init_350 : bool) (temp___skip_constant_351 : bool) (temp___do_toplevel_352 : bool) (temp___do_typ_inv_353 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_356 : Passworddatabase__urls__from_string__S317s.s317s) (temp___skip_top_level_357 : bool) =
  ( ( true /\ ((Passworddatabase__urls__from_string__S317s.first temp___expr_356) = (Standard__string.first Passworddatabase__urls__from_string__s.s)) )/\((Passworddatabase__urls__from_string__S317s.last temp___expr_356) = (Standard__string.last Passworddatabase__urls__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_356 : Passworddatabase__urls__from_string__S317s.s317s) (temp___skip_top_level_357 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_356 : Passworddatabase__urls__from_string__S317s.s317s) (temp___skip_top_level_357 : bool) }

end

(* Module giving axioms for type "T318s" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__from_string__T318s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T319s" defined at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__from_string__T319s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T320s" defined at mystring.adb:20 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__from_string__L_1__T320s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T331s" defined at mystring.adb:60 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__equal__L_3__L330s__T331s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T329s" defined at mystring.adb:60 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__equal__L_3__L328s__T329s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T334s" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__substring__T334s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T335s" defined at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__substring__T335s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T336s" defined at mystring.adb:75 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__substring__L_4__T336s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 predicate dynamic_invariant [@inline] 
   (temp___expr_364 : Passworddatabase__password.password) (temp___is_init_360 : bool) (temp___skip_constant_361 : bool) (temp___do_toplevel_362 : bool) (temp___do_typ_inv_363 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_364 : Passworddatabase__password.password) (temp___is_init_360 : bool) (temp___skip_constant_361 : bool) (temp___do_toplevel_362 : bool) (temp___do_typ_inv_363 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_364 : Passworddatabase__password.password) (temp___is_init_360 : bool) (temp___skip_constant_361 : bool) (temp___do_toplevel_362 : bool) (temp___do_typ_inv_363 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_366 : Passworddatabase__password.password) (temp___skip_top_level_367 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_366 : Passworddatabase__password.password) (temp___skip_top_level_367 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_366 : Passworddatabase__password.password) (temp___skip_top_level_367 : bool) }

end

(* Module giving axioms for type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 predicate dynamic_invariant [@inline] 
   (temp___expr_376 : Passworddatabase__url.url) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_376 : Passworddatabase__url.url) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_376 : Passworddatabase__url.url) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_378 : Passworddatabase__url.url) (temp___skip_top_level_379 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_378 : Passworddatabase__url.url) (temp___skip_top_level_379 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_378 : Passworddatabase__url.url) (temp___skip_top_level_379 : bool) }

end

(* Module giving axioms for type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_388 : Passworddatabase__database.database) (temp___is_init_384 : bool) (temp___skip_constant_385 : bool) (temp___do_toplevel_386 : bool) (temp___do_typ_inv_387 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_388 : Passworddatabase__database.database) (temp___is_init_384 : bool) (temp___skip_constant_385 : bool) (temp___do_toplevel_386 : bool) (temp___do_typ_inv_387 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_388 : Passworddatabase__database.database) (temp___is_init_384 : bool) (temp___skip_constant_385 : bool) (temp___do_toplevel_386 : bool) (temp___do_typ_inv_387 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_389 : Passworddatabase__database.database) (temp___skip_top_level_390 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_389 : Passworddatabase__database.database) (temp___skip_top_level_390 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_389 : Passworddatabase__database.database) (temp___skip_top_level_390 : bool) }

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_429
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_429 
   (temp___431 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_479
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_479 
   (temp___481 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_518
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_518 
   (temp___520 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_568
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_568 
   (temp___570 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_password_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length

 axiom max_password_length__def_axiom :
  ((Passworddatabase__max_password_length.max_password_length ) = (100 : int))

end

(* Module for defining the value of constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_url_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length

 axiom max_url_length__def_axiom :
  ((Passworddatabase__max_url_length.max_url_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_entries" defined at passworddatabase.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_entries___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_entries as Passworddatabase__max_entries

 axiom max_entries__def_axiom :
  ((Passworddatabase__max_entries.max_entries ) = (1000 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at passworddatabase.ads:12, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__passwords__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__passwords__max_mystring_length as Passworddatabase__passwords__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Passworddatabase__passwords__max_mystring_length.max_mystring_length ) = (100 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at passworddatabase.ads:13, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__urls__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__urls__max_mystring_length as Passworddatabase__urls__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Passworddatabase__urls__max_mystring_length.max_mystring_length ) = (1024 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Passworddatabase__passwords__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep

 val length 
   (m : Passworddatabase__passwords__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Passworddatabase__passwords__mystring__T13s__rep.to_rep m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) /\ ( [@GP_Pretty_Ada:53058] (result <= (100 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring [(Passworddatabase__passwords__length.length m)].
   ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Passworddatabase__passwords__length.length m) in (
    (if ((Passworddatabase__passwords__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:53058] (result <= (100 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring [(Passworddatabase__passwords__length.length m)].
   ( ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Passworddatabase__passwords__length.length m) in (
    (Passworddatabase__passwords__length.length__function_guard result m)))
    ) -> ((Passworddatabase__passwords__length.length m) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__to_string as Passworddatabase__passwords__to_string
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom

 val to_string 
   (m : Passworddatabase__passwords__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__passwords__to_string.to_string m)) /\ (Passworddatabase__passwords__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:52491] ((Standard__string.length result) = (epsilon temp___result_218 : int.
   ( (temp___result_218 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_218 m) ))) ) /\ ( [@GP_Pretty_Ada:52498] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:52503] ((Standard__string.last result) = (epsilon temp___result_219 : int.
   ( (temp___result_219 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_219 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring [(Passworddatabase__passwords__to_string.to_string m)].
   ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Passworddatabase__passwords__to_string.to_string m) in (
    (if ((Passworddatabase__passwords__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:52491] ((Standard__string.length result) = (epsilon temp___result_222 : int.
      ( (temp___result_222 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_222 m) ))) ) /\ ( [@GP_Pretty_Ada:52498] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:52503] ((Standard__string.last result) = (epsilon temp___result_223 : int.
      ( (temp___result_223 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_223 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__from_string as Passworddatabase__passwords__from_string
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Passworddatabase__passwords__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:52976] ((Standard__string.length s) <= (100 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__passwords__from_string.from_string s)) /\ (Passworddatabase__passwords__from_string.from_string__function_guard result s) )/\( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:52990] ((epsilon temp___result_226 : int.
   ( (temp___result_226 = (Passworddatabase__passwords__length.length result)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_226 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Passworddatabase__passwords__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:52976] ((Standard__string.length s) <= (100 : int)) ) ) -> (let result = (Passworddatabase__passwords__from_string.from_string s) in (
    (if ((Passworddatabase__passwords__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:52990] ((epsilon temp___result_229 : int.
      ( (temp___result_229 = (Passworddatabase__passwords__length.length result)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_229 result) )) = (Standard__string.length s)) ) /\ (Passworddatabase__passwords__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__less as Passworddatabase__passwords__less

 val less 
   (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__passwords__less.less m1 m2)) /\ (Passworddatabase__passwords__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Passworddatabase__passwords__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__get as Passworddatabase__passwords__get
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Passworddatabase__passwords__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:53126] (index <= (epsilon temp___result_234 : int.
   ( (temp___result_234 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_234 m) ))) ) }
  ensures {  ( ( (result = (Passworddatabase__passwords__get.get m index)) /\ (Passworddatabase__passwords__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___235 [@mlw:proxy_symbol] [@introduced] = m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
   (Array__Int__Standard__character.get temp___235 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring.
  (forall index   : int [(Passworddatabase__passwords__get.get m index)].
   ( ( ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:53126] (index <= (epsilon temp___result_237 : int.
    ( (temp___result_237 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_237 m) ))) ) ) -> (let result = (Passworddatabase__passwords__get.get m index) in (
    (if ((Passworddatabase__passwords__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring.
  (forall index   : int [(Passworddatabase__passwords__get.get m index)].
   ( ( ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Passworddatabase__passwords__get.get m index) in (
    (Passworddatabase__passwords__get.get__function_guard result m index)))
    ) -> ((Passworddatabase__passwords__get.get m index) = (Standard__character__rep.to_rep (let temp___239 [@mlw:proxy_symbol] [@introduced] = m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
    (Array__Int__Standard__character.get temp___239 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__get as Passworddatabase__passwords__get
 use        Passworddatabase__passwords__equal as Passworddatabase__passwords__equal

 val equal 
   (m1 : Passworddatabase__passwords__mystring.mystring) (m2 : Passworddatabase__passwords__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__passwords__equal.equal m1 m2)) /\ (Passworddatabase__passwords__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:52597] ((epsilon temp___result_240 : int.
    ( (temp___result_240 = (Passworddatabase__passwords__length.length m1)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_240 m1) )) = (epsilon temp___result_241 : int.
    ( (temp___result_241 = (Passworddatabase__passwords__length.length m2)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_241 m2) ))) ) /\ (forall i   [@model_trace:52615] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_242 : int.
     ( (temp___result_242 = (Passworddatabase__passwords__length.length m1)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_242 m1) ))) ) -> ( [@GP_Pretty_Ada:52605] ((epsilon temp___result_243 : int.
     ( (temp___result_243 = (Passworddatabase__passwords__get.get m1 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_243 m1 i) )) = (epsilon temp___result_244 : int.
     ( (temp___result_244 = (Passworddatabase__passwords__get.get m2 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_244 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:53204] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__substring as Passworddatabase__passwords__substring
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom

 val substring 
   (m : Passworddatabase__passwords__mystring.mystring) (from : int) (to__ : int) : Passworddatabase__passwords__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:52683] (from <= to__) ) /\ ( [@GP_Pretty_Ada:52686] (to__ <= (epsilon temp___result_247 : int.
   ( (temp___result_247 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_247 m) ))) ) ) }
  ensures {  ( ( (result = (Passworddatabase__passwords__substring.substring m from to__)) /\ (Passworddatabase__passwords__substring.substring__function_guard result m from to__) )/\( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:53099] ((epsilon temp___result_248 : int.
   ( (temp___result_248 = (Passworddatabase__passwords__length.length result)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_248 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Passworddatabase__passwords__mystring.mystring.
  (forall from   to__   : int [(Passworddatabase__passwords__substring.substring m from to__)].
   ( ( ( ( (Passworddatabase__passwords__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:52683] (from <= to__) ) /\ ( [@GP_Pretty_Ada:52686] (to__ <= (epsilon temp___result_251 : int.
    ( (temp___result_251 = (Passworddatabase__passwords__length.length m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_251 m) ))) ) ) ) -> (let result = (Passworddatabase__passwords__substring.substring m from to__) in (
    (if ((Passworddatabase__passwords__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:53099] ((epsilon temp___result_252 : int.
      ( (temp___result_252 = (Passworddatabase__passwords__length.length result)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_252 result) )) = ((to__ - from) + (1 : int))) ) /\ (Passworddatabase__passwords__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__passwords__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Passworddatabase__passwords__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:98237] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:98243] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:98252] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:98263] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Passworddatabase__urls__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep

 val length 
   (m : Passworddatabase__urls__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Passworddatabase__urls__mystring__T28s__rep.to_rep m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) /\ ( [@GP_Pretty_Ada:53940] (result <= (1024 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring [(Passworddatabase__urls__length.length m)].
   ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Passworddatabase__urls__length.length m) in (
    (if ((Passworddatabase__urls__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:53940] (result <= (1024 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring [(Passworddatabase__urls__length.length m)].
   ( ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Passworddatabase__urls__length.length m) in (
    (Passworddatabase__urls__length.length__function_guard result m)))
    ) -> ((Passworddatabase__urls__length.length m) = (Passworddatabase__urls__mystring__T28s__rep.to_rep m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__to_string as Passworddatabase__urls__to_string
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom

 val to_string 
   (m : Passworddatabase__urls__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__urls__to_string.to_string m)) /\ (Passworddatabase__urls__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:53373] ((Standard__string.length result) = (epsilon temp___result_302 : int.
   ( (temp___result_302 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_302 m) ))) ) /\ ( [@GP_Pretty_Ada:53380] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:53385] ((Standard__string.last result) = (epsilon temp___result_303 : int.
   ( (temp___result_303 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_303 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring [(Passworddatabase__urls__to_string.to_string m)].
   ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Passworddatabase__urls__to_string.to_string m) in (
    (if ((Passworddatabase__urls__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:53373] ((Standard__string.length result) = (epsilon temp___result_306 : int.
      ( (temp___result_306 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_306 m) ))) ) /\ ( [@GP_Pretty_Ada:53380] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:53385] ((Standard__string.last result) = (epsilon temp___result_307 : int.
      ( (temp___result_307 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_307 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__from_string as Passworddatabase__urls__from_string
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Passworddatabase__urls__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:53858] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__urls__from_string.from_string s)) /\ (Passworddatabase__urls__from_string.from_string__function_guard result s) )/\( (Passworddatabase__urls__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:53872] ((epsilon temp___result_310 : int.
   ( (temp___result_310 = (Passworddatabase__urls__length.length result)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_310 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Passworddatabase__urls__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:53858] ((Standard__string.length s) <= (1024 : int)) ) ) -> (let result = (Passworddatabase__urls__from_string.from_string s) in (
    (if ((Passworddatabase__urls__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:53872] ((epsilon temp___result_313 : int.
      ( (temp___result_313 = (Passworddatabase__urls__length.length result)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_313 result) )) = (Standard__string.length s)) ) /\ (Passworddatabase__urls__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__less as Passworddatabase__urls__less

 val less 
   (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__urls__less.less m1 m2)) /\ (Passworddatabase__urls__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Passworddatabase__urls__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__get as Passworddatabase__urls__get
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Passworddatabase__urls__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:54008] (index <= (epsilon temp___result_318 : int.
   ( (temp___result_318 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_318 m) ))) ) }
  ensures {  ( ( (result = (Passworddatabase__urls__get.get m index)) /\ (Passworddatabase__urls__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___319 [@mlw:proxy_symbol] [@introduced] = m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
   (Array__Int__Standard__character.get temp___319 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring.
  (forall index   : int [(Passworddatabase__urls__get.get m index)].
   ( ( ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:54008] (index <= (epsilon temp___result_321 : int.
    ( (temp___result_321 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_321 m) ))) ) ) -> (let result = (Passworddatabase__urls__get.get m index) in (
    (if ((Passworddatabase__urls__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring.
  (forall index   : int [(Passworddatabase__urls__get.get m index)].
   ( ( ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Passworddatabase__urls__get.get m index) in (
    (Passworddatabase__urls__get.get__function_guard result m index)))
    ) -> ((Passworddatabase__urls__get.get m index) = (Standard__character__rep.to_rep (let temp___323 [@mlw:proxy_symbol] [@introduced] = m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
    (Array__Int__Standard__character.get temp___323 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__get as Passworddatabase__urls__get
 use        Passworddatabase__urls__equal as Passworddatabase__urls__equal

 val equal 
   (m1 : Passworddatabase__urls__mystring.mystring) (m2 : Passworddatabase__urls__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__urls__equal.equal m1 m2)) /\ (Passworddatabase__urls__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:53479] ((epsilon temp___result_324 : int.
    ( (temp___result_324 = (Passworddatabase__urls__length.length m1)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_324 m1) )) = (epsilon temp___result_325 : int.
    ( (temp___result_325 = (Passworddatabase__urls__length.length m2)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_325 m2) ))) ) /\ (forall i   [@model_trace:53497] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_326 : int.
     ( (temp___result_326 = (Passworddatabase__urls__length.length m1)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_326 m1) ))) ) -> ( [@GP_Pretty_Ada:53487] ((epsilon temp___result_327 : int.
     ( (temp___result_327 = (Passworddatabase__urls__get.get m1 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_327 m1 i) )) = (epsilon temp___result_328 : int.
     ( (temp___result_328 = (Passworddatabase__urls__get.get m2 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_328 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:54086] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__substring as Passworddatabase__urls__substring
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom

 val substring 
   (m : Passworddatabase__urls__mystring.mystring) (from : int) (to__ : int) : Passworddatabase__urls__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:53565] (from <= to__) ) /\ ( [@GP_Pretty_Ada:53568] (to__ <= (epsilon temp___result_331 : int.
   ( (temp___result_331 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_331 m) ))) ) ) }
  ensures {  ( ( (result = (Passworddatabase__urls__substring.substring m from to__)) /\ (Passworddatabase__urls__substring.substring__function_guard result m from to__) )/\( (Passworddatabase__urls__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:53981] ((epsilon temp___result_332 : int.
   ( (temp___result_332 = (Passworddatabase__urls__length.length result)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_332 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Passworddatabase__urls__mystring.mystring.
  (forall from   to__   : int [(Passworddatabase__urls__substring.substring m from to__)].
   ( ( ( ( (Passworddatabase__urls__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:53565] (from <= to__) ) /\ ( [@GP_Pretty_Ada:53568] (to__ <= (epsilon temp___result_335 : int.
    ( (temp___result_335 = (Passworddatabase__urls__length.length m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_335 m) ))) ) ) ) -> (let result = (Passworddatabase__urls__substring.substring m from to__) in (
    (if ((Passworddatabase__urls__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:53981] ((epsilon temp___result_336 : int.
      ( (temp___result_336 = (Passworddatabase__urls__length.length result)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_336 result) )) = ((to__ - from) + (1 : int))) ) /\ (Passworddatabase__urls__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__urls__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Passworddatabase__urls__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val init 
   (d : Passworddatabase__database.database__ref) : unit
  requires {  true }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "has_password_for" defined at passworddatabase.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__has_password_for___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for

 val has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__has_password_for.has_password_for d u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard result d u) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at passworddatabase.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__get__3 as Passworddatabase__get__3
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val get__3 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : Passworddatabase__password.password
  requires {  ( [@GP_Pretty_Ada:54600] ((epsilon temp___result_392 : bool.
   ( (temp___result_392 = (Passworddatabase__has_password_for.has_password_for d u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_392 d u) )) = True) ) }
  ensures {  ( ( (result = (Passworddatabase__get__3.get__3 d u)) /\ (Passworddatabase__get__3.get__3__function_guard result d u) )/\(Passworddatabase__password___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "length__3" defined at passworddatabase.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Ada__containers__count_type as Ada__containers__count_type
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val length__3 
   (d : Passworddatabase__database.database) : int
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__length__3.length__3 d)) /\ (Passworddatabase__length__3.length__3__function_guard result d) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom length__3__post_axiom :
  (forall d   : Passworddatabase__database.database [(Passworddatabase__length__3.length__3 d)].
   (let result = (Passworddatabase__length__3.length__3 d) in (
    (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at passworddatabase.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val put 
   (d : Passworddatabase__database.database__ref) (u : Passworddatabase__url.url) (p : Passworddatabase__password.password) : unit
  requires {  ( [@GP_Pretty_Ada:54625] ( ((epsilon temp___result_395 : int.
   ( (temp___result_395 = (Passworddatabase__length__3.length__3 d.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_395 d.Passworddatabase__database.database__content) )) < (1000 : int)) \/ ((epsilon temp___result_396 : bool.
   ( (temp___result_396 = (Passworddatabase__has_password_for.has_password_for d.Passworddatabase__database.database__content u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_396 d.Passworddatabase__database.database__content u) )) = True) ) ) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at passworddatabase.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val remove 
   (d : Passworddatabase__database.database__ref) (u : Passworddatabase__url.url) : unit
  requires {  ( [@GP_Pretty_Ada:54644] ((epsilon temp___result_399 : bool.
   ( (temp___result_399 = (Passworddatabase__has_password_for.has_password_for d.Passworddatabase__database.database__content u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_399 d.Passworddatabase__database.database__content u) )) = True) ) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string as Passworddatabase__from_string
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
  requires {  ( [@GP_Pretty_Ada:54663] ((Standard__string.length s) <= (100 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string.from_string s)) /\ (Passworddatabase__from_string.from_string__function_guard result s) )/\(Passworddatabase__password___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
  requires {  ( [@GP_Pretty_Ada:54682] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard result s) )/\(Passworddatabase__url___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at passworddatabase.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__to_string as Passworddatabase__to_string

 val to_string 
   (p : Passworddatabase__password.password) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__to_string.to_string p)) /\ (Passworddatabase__to_string.to_string__function_guard result p) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "to_string__2" defined at passworddatabase.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__to_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__to_string__2 as Passworddatabase__to_string__2

 val to_string__2 
   (u : Passworddatabase__url.url) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__to_string__2.to_string__2 u)) /\ (Passworddatabase__to_string__2.to_string__2__function_guard result u) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "less__2" defined at passworddatabase.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__less__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__less__2 as Passworddatabase__less__2

 val less__2 
   (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__less__2.less__2 u1 u2)) /\ (Passworddatabase__less__2.less__2__function_guard result u1 u2) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at passworddatabase.ads:41, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__equal as Passworddatabase__equal

 val equal 
   (u1 : Passworddatabase__url.url) (u2 : Passworddatabase__url.url) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__equal.equal u1 u2)) /\ (Passworddatabase__equal.equal__function_guard result u1 u2) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "equal__2" defined at passworddatabase.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__equal__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__equal__2 as Passworddatabase__equal__2

 val equal__2 
   (p1 : Passworddatabase__password.password) (p2 : Passworddatabase__password.password) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__equal__2.equal__2 p1 p2)) /\ (Passworddatabase__equal__2.equal__2__function_guard result p1 p2) )/\true ) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "passworddatabase" defined at passworddatabase.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Passworddatabase__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length
 use        Passworddatabase__max_entries as Passworddatabase__max_entries
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Passworddatabase__max_password_length___axiom as Passworddatabase__max_password_length___axiom
 use        Passworddatabase__max_url_length___axiom as Passworddatabase__max_url_length___axiom
 use        Passworddatabase__max_entries___axiom as Passworddatabase__max_entries___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"passworddatabase.ads" 7 0 0][@GP_Subp:passworddatabase.ads:7] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 7 0 0] true }
   = [@vc:divergent]
  ( [#"passworddatabase.ads" 7 0 0] assume { [#"passworddatabase.ads" 7 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"passworddatabase.ads" 7 0 0] ());
  ([#"passworddatabase.ads" 8 0 0] ( [#"passworddatabase.ads" 8 0 0] begin ensures {true} let _ = (let _ = (100 : int) in (
   ()))
   in () end ;
  [#"passworddatabase.ads" 8 0 0] assume { [#"passworddatabase.ads" 8 0 0] (Standard__natural___axiom.dynamic_invariant Passworddatabase__max_password_length.max_password_length True False True True) } ));
  ([#"passworddatabase.ads" 9 0 0] ( [#"passworddatabase.ads" 9 0 0] begin ensures {true} let _ = (let _ = (1024 : int) in (
   ()))
   in () end ;
  [#"passworddatabase.ads" 9 0 0] assume { [#"passworddatabase.ads" 9 0 0] (Standard__natural___axiom.dynamic_invariant Passworddatabase__max_url_length.max_url_length True False True True) } ));
  ([#"passworddatabase.ads" 10 0 0] ( [#"passworddatabase.ads" 10 0 0] begin ensures {true} let _ = (let _ = (1000 : int) in (
   ()))
   in () end ;
  [#"passworddatabase.ads" 10 0 0] assume { [#"passworddatabase.ads" 10 0 0] (Ada__containers__count_type___axiom.dynamic_invariant Passworddatabase__max_entries.max_entries True False True True) } ));
  ([#"passworddatabase.ads" 12 0 0] ());
  ([#"mystring.adb" 3 0 0] ());
  ([#"passworddatabase.ads" 12 0 0] ());
  ([#"passworddatabase.ads" 13 0 0] ());
  ([#"mystring.adb" 3 0 0] ());
  ([#"passworddatabase.ads" 13 0 0] ());
  ([#"passworddatabase.ads" 15 0 0] ());
  ([#"passworddatabase.ads" 15 0 0] ());
  ([#"passworddatabase.ads" 16 0 0] ());
  ([#"passworddatabase.ads" 16 0 0] ());
  ([#"passworddatabase.ads" 18 0 0] ());
  ([#"passworddatabase.ads" 20 0 0] ());
  ([#"passworddatabase.ads" 22 0 0] ());
  ([#"passworddatabase.ads" 24 0 0] ());
  ([#"passworddatabase.ads" 25 0 0] ());
  ([#"passworddatabase.ads" 27 0 0] ());
  ([#"passworddatabase.ads" 28 0 0] ());
  ([#"passworddatabase.ads" 30 0 0] ());
  ([#"passworddatabase.ads" 31 0 0] ());
  ([#"passworddatabase.ads" 33 0 0] ());
  ([#"passworddatabase.ads" 34 0 0] ());
  ([#"passworddatabase.ads" 35 0 0] ());
  ([#"passworddatabase.ads" 36 0 0] ());
  ([#"passworddatabase.ads" 37 0 0] ());
  ([#"passworddatabase.ads" 38 0 0] ());
  ([#"passworddatabase.ads" 40 0 0] ());
  ([#"passworddatabase.ads" 41 0 0] ());
  ([#"passworddatabase.ads" 43 0 0] ());
  ([#"passworddatabase.ads" 45 0 0] ()) )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "passwords" defined at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Passworddatabase__passwords__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__passwords__max_mystring_length as Passworddatabase__passwords__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__passwords__max_mystring_length___axiom as Passworddatabase__passwords__max_mystring_length___axiom

 let def [#"passworddatabase.ads" 12 0 0][@GP_Subp:passworddatabase.ads:12] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 12 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"passworddatabase.ads" 12 0 0] ( [#"passworddatabase.ads" 12 0 0] begin ensures {true} let _ = (let _ = (100 : int) in (
   ()))
   in () end ;
  [#"passworddatabase.ads" 12 0 0] assume { [#"passworddatabase.ads" 12 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"passworddatabase.ads" 12 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Passworddatabase__passwords__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___415 [@mlw:proxy_symbol] [@introduced] =  (val _f : Passworddatabase__passwords__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length__m as Passworddatabase__passwords__length__m
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__passwords__length__m___axiom as Passworddatabase__passwords__length__m___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom

 val passworddatabase__passwords__length__result [@model_projected] [@name:Length] [@model_trace:52662@result]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:passworddatabase.ads:12:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:24:14:instantiated:passworddatabase.ads:12:4] [@model_vc_post] [@GP_Id:0] ( [@GP_Pretty_Ada:53058] [@GP_Sloc:mystring.ads:24:14:instantiated:passworddatabase.ads:12:4] (passworddatabase__passwords__length__result.int__content <= (100 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:12 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:passworddatabase.ads:12:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (passworddatabase__passwords__length__result.int__content <- ( (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__length__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (passworddatabase__passwords__length__result.int__content <= (100 : int)) in (
   ()))
   in () end ;
  passworddatabase__passwords__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__to_string__m as Passworddatabase__passwords__to_string__m
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__to_string__result as Passworddatabase__passwords__to_string__result
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Passworddatabase__passwords__to_string__TresultS as Passworddatabase__passwords__to_string__TresultS
 use        Passworddatabase__passwords__to_string__T291s as Passworddatabase__passwords__to_string__T291s
 use        Passworddatabase__passwords__to_string__TresultS___axiom as Passworddatabase__passwords__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__to_string__m___axiom as Passworddatabase__passwords__to_string__m___axiom
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Passworddatabase__passwords__to_string__result___axiom as Passworddatabase__passwords__to_string__result___axiom
 use        Passworddatabase__passwords__to_string__TresultS___axiom as Passworddatabase__passwords__to_string__TresultS___axiom
 use        Passworddatabase__passwords__to_string__T291s___axiom as Passworddatabase__passwords__to_string__T291s___axiom

 val passworddatabase__passwords__to_string__result [@name:To_String] [@model_projected] [@model_trace:52511@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:mystring.ads:9:14:instantiated:passworddatabase.ads:12:4] [@GP_Shape:pragargs__and] [@GP_Id:7] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:passworddatabase.ads:12:4:VC_POSTCONDITION] ( ( ( [@GP_Pretty_Ada:52491] [@GP_Sloc:mystring.ads:9:14:instantiated:passworddatabase.ads:12:4] ((Standard__string.length passworddatabase__passwords__to_string__result.Standard__string.string__content) = (epsilon temp___result_427 : int.
   ( (temp___result_427 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__to_string__m.m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_427 Passworddatabase__passwords__to_string__m.m) ))) ) /\ ( [@GP_Pretty_Ada:52498] [@GP_Sloc:mystring.ads:10:14:instantiated:passworddatabase.ads:12:4] ((Standard__string.first passworddatabase__passwords__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:52503] [@GP_Sloc:mystring.ads:10:45:instantiated:passworddatabase.ads:12:4] ((Standard__string.last passworddatabase__passwords__to_string__result.Standard__string.string__content) = (epsilon temp___result_428 : int.
   ( (temp___result_428 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__to_string__m.m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_428 Passworddatabase__passwords__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:12 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@vc:annotation] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:6:7:instantiated:passworddatabase.ads:12:4] [@GP_Id:1] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Passworddatabase__passwords__to_string__TresultS___axiom.default_initial_assumption (Passworddatabase__passwords__to_string__TresultS.of_array Passworddatabase__passwords__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first) (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Passworddatabase__passwords__to_string__TresultS.dynamic_property (1 : int) (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first) (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Passworddatabase__passwords__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Passworddatabase__passwords__to_string__TresultS.to_array (let temp___424 [@mlw:proxy_symbol] [@introduced] = (let temp___423 [@mlw:proxy_symbol] [@introduced] = (let temp___422 [@mlw:proxy_symbol] [@introduced] = (let temp___420 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) in (
   (let temp___419 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___421 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
    (Passworddatabase__passwords__to_string__T291s.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Sloc:mystring.adb:8:25:instantiated:passworddatabase.ads:12:4] [@GP_Id:2] ( (temp___419 <= temp___420) -> ( ( (Passworddatabase__passwords__TmystringstrD1.first <= temp___419) /\ (temp___419 <= Passworddatabase__passwords__TmystringstrD1.last) ) /\ ( (Passworddatabase__passwords__TmystringstrD1.first <= temp___420) /\ (temp___420 <= Passworddatabase__passwords__TmystringstrD1.last) ) ) ) )) };
    temp___421 )) (temp___419) (temp___420))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Sloc:mystring.adb:8:25:instantiated:passworddatabase.ads:12:4] [@GP_Id:3] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Passworddatabase__passwords__to_string__T291s.first(temp___422))) ((Passworddatabase__passwords__to_string__T291s.last(temp___422)))) )) };
    (Standard__string.of_array((Passworddatabase__passwords__to_string__T291s.to_array(temp___422))) ((Passworddatabase__passwords__to_string__T291s.first(temp___422))) ((Passworddatabase__passwords__to_string__T291s.last(temp___422)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:passworddatabase.ads:12:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:8:17:instantiated:passworddatabase.ads:12:4] [@GP_Shape:result_assign__typeconv] [@GP_Id:4] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___423) <= (Standard__string.last temp___423))) then (
     ( ((1 : int) <= (Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) /\ (((Standard__string.last temp___423) - (Standard__string.first temp___423)) = ((Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) - (1 : int))) )) else (
     ((Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) < (1 : int)))) ) )) };
    (Passworddatabase__passwords__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___423))) ((Standard__string.first(temp___423))) ((1 : int)))) ((1 : int)) ((Passworddatabase__passwords__mystring__T13s__rep.to_rep Passworddatabase__passwords__to_string__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@GP_Sloc:mystring.adb:8:14:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:passworddatabase.ads:12:4:VC_LENGTH_CHECK] [@GP_Shape:result_assign] [@GP_Id:5] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Passworddatabase__passwords__to_string__TresultS.first temp___424) <= (Passworddatabase__passwords__to_string__TresultS.last temp___424))) then (
     ( ((Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first) <= (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last)) /\ (((Passworddatabase__passwords__to_string__TresultS.last temp___424) - (Passworddatabase__passwords__to_string__TresultS.first temp___424)) = ((Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last) - (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____last) < (Standard__integer__rep.to_rep Passworddatabase__passwords__to_string__result.result____first)))) ) )) };
    temp___424 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (passworddatabase__passwords__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Passworddatabase__passwords__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Passworddatabase__passwords__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Passworddatabase__passwords__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Sloc:mystring.ads:9:30:instantiated:passworddatabase.ads:12:4] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:6] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = passworddatabase__passwords__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(passworddatabase__passwords__to_string__result.Standard__string.string__content)) ))) )) = (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = passworddatabase__passwords__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(passworddatabase__passwords__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = passworddatabase__passwords__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(passworddatabase__passwords__to_string__result.Standard__string.string__content)) ) = (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__to_string__m.m))))) in (
   ()))
   in () end ;
  passworddatabase__passwords__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at passworddatabase.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_429___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_429 as Temp_____aggregate_def_429
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___431   : int.
   (let temp___430 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_429.temp_____aggregate_def_429 temp___431) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___431 True True True True)) then (
     (forall temp___432   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___430 temp___432)) = temp___431))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__from_string__s as Passworddatabase__passwords__from_string__s
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__from_string__m as Passworddatabase__passwords__from_string__m
 use        Passworddatabase__passwords__from_string__j as Passworddatabase__passwords__from_string__j
 use        Passworddatabase__passwords__from_string__L_1__i as Passworddatabase__passwords__from_string__L_1__i
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Passworddatabase__passwords__from_string__L_1 as Passworddatabase__passwords__from_string__L_1
 use        Passworddatabase__passwords__from_string__L_1__T296s as Passworddatabase__passwords__from_string__L_1__T296s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_429 as Temp_____aggregate_def_429
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__from_string__s___axiom as Passworddatabase__passwords__from_string__s___axiom
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Passworddatabase__passwords__from_string__m___axiom as Passworddatabase__passwords__from_string__m___axiom
 use        Passworddatabase__passwords__from_string__j___axiom as Passworddatabase__passwords__from_string__j___axiom
 use        Passworddatabase__passwords__from_string__L_1___axiom as Passworddatabase__passwords__from_string__L_1___axiom
 use        Passworddatabase__passwords__from_string__L_1__i___axiom as Passworddatabase__passwords__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_429___axiom as Temp_____aggregate_def_429___axiom
 use        Passworddatabase__passwords__from_string__L_1__T296s___axiom as Passworddatabase__passwords__from_string__L_1__T296s___axiom

 val passworddatabase__passwords__from_string__result [@name:From_String] [@model_projected] [@model_trace:52545@result]  : Passworddatabase__passwords__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:18] [@GP_Shape:pragargs__cmp] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:passworddatabase.ads:12:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:14:15:instantiated:passworddatabase.ads:12:4] [@model_vc_post] ( [@GP_Sloc:mystring.ads:14:15:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:52990] ((epsilon temp___result_447 : int.
   ( (temp___result_447 = (Passworddatabase__passwords__length.length passworddatabase__passwords__from_string__result.Passworddatabase__passwords__mystring.mystring__content)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_447 passworddatabase__passwords__from_string__result.Passworddatabase__passwords__mystring.mystring__content) )) = (Standard__string.length Passworddatabase__passwords__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Passworddatabase__passwords__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@GP_Sloc:mystring.ads:13:15:instantiated:passworddatabase.ads:12:4] [@GP_Id:17] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__passwords__from_string__s.s)) ))) )) <= (100 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  ( [@GP_Pretty_Ada:52976] ((Standard__string.length Passworddatabase__passwords__from_string__s.s) <= (100 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let passworddatabase__passwords__from_string__m__assume = { Passworddatabase__passwords__mystring.__split_fields = { Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = ( 0 : Passworddatabase__passwords__mystring__T13s.t13s ); Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str = (Temp_____aggregate_def_429.temp_____aggregate_def_429((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( passworddatabase__passwords__from_string__m__assume.Passworddatabase__passwords__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Passworddatabase__passwords__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=110558] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@GP_Sloc:mystring.adb:16:11:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@GP_Id:9] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Passworddatabase__passwords__from_string__s.s)) ))) )) > (100 : int)) )));
   ( [@branch_id=110558] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Reason:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:passworddatabase.ads:12:4:VC_RAISE] [@GP_Sloc:mystring.adb:17:10:instantiated:passworddatabase.ads:12:4] [@GP_Id:8] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 19 0 0] (let temp___434 [@mlw:proxy_symbol] [@introduced] = (let temp___433 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___433.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length in (
     ()))
     in () end ;
    { ( temp___433 ) with Passworddatabase__passwords__mystring.__split_fields = { ( temp___433.Passworddatabase__passwords__mystring.__split_fields ) with Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = (Passworddatabase__passwords__mystring__T13s__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@GP_Sloc:mystring.adb:19:20:instantiated:passworddatabase.ads:12:4] [@GP_Id:10] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] (Passworddatabase__passwords__mystring__T13s.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Passworddatabase__passwords__from_string__s.s)) ))) )))) } } )))
    in (
     (Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( temp___434.Passworddatabase__passwords__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 20 0 0] (let temp___435 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Passworddatabase__passwords__from_string__s.s)) ) in (
   (let temp___436 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Passworddatabase__passwords__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Passworddatabase__passwords__from_string__L_1__i.i.int__content <- ( temp___435 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at passworddatabase.ads:12 *)
    ;
    (if ((Boolean.andb((temp___435 <= Passworddatabase__passwords__from_string__L_1__i.i.int__content)) ((Passworddatabase__passwords__from_string__L_1__i.i.int__content <= temp___436)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__j.j.int__content in (
       ()))
       in () end ;
      (let temp___443 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
      ensures {[#"mystring.adb" 20 0 0] (result = Passworddatabase__passwords__from_string__j.j.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___441 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Passworddatabase__passwords__mystring.mystring
       ensures {[#"mystring.adb" 20 0 0] (result = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__L_1__i.i.int__content in (
         ()))
         in () end ;
        (let temp___440 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Passworddatabase__passwords__from_string__L_1__i.i.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:12 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at passworddatabase.ads:12 *)
         ;
         (let temp___inv_444 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:passworddatabase.ads:12:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Id:13] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:passworddatabase.ads:12:4] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Passworddatabase__passwords__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Passworddatabase__passwords__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:15] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:passworddatabase.ads:12:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Sloc:mystring.adb:21:33:instantiated:passworddatabase.ads:12:4] ( [@GP_Pretty_Ada:110586] [@GP_Sloc:mystring.adb:21:33:instantiated:passworddatabase.ads:12:4] (Passworddatabase__passwords__from_string__j.j.int__content = ((Passworddatabase__passwords__from_string__L_1__i.i.int__content - (Standard__string.first Passworddatabase__passwords__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at passworddatabase.ads:12 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((Standard__string.first Passworddatabase__passwords__from_string__s.s) <= (Standard__string.last Passworddatabase__passwords__from_string__s.s)) )) then (
           (Passworddatabase__passwords__from_string__L_1__T296s.dynamic_property (Standard__string.first Passworddatabase__passwords__from_string__s.s) (Standard__string.last Passworddatabase__passwords__from_string__s.s) Passworddatabase__passwords__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } True True True True) )/\({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = temp___441.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) ) /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__from_string__j.j.int__content True True True True) )/\true )) (( ((Standard__string.first Passworddatabase__passwords__from_string__s.s) <= Passworddatabase__passwords__from_string__L_1__i.i.int__content) /\ (Passworddatabase__passwords__from_string__L_1__i.i.int__content <= (Standard__string.last Passworddatabase__passwords__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:12 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:12 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 22 0 0] (let temp___439 [@mlw:proxy_symbol] [@introduced] = (let temp___438 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___438.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
            ()))
            in () end ;
           { ( temp___438 ) with Passworddatabase__passwords__mystring.__split_fields = { ( temp___438.Passworddatabase__passwords__mystring.__split_fields ) with Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str = (let temp___437 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
            (Array__Int__Standard__character.set({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@GP_Id:11] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:22:16:instantiated:passworddatabase.ads:12:4] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__from_string__j.j.int__content) /\ (Passworddatabase__passwords__from_string__j.j.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
            Passworddatabase__passwords__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passworddatabase__passwords__from_string__s.s))) (Passworddatabase__passwords__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( temp___439.Passworddatabase__passwords__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Passworddatabase__passwords__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:23:17:instantiated:passworddatabase.ads:12:4] (Standard__integer.range_check_((Passworddatabase__passwords__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:12 *)
          ;
          (if ((Passworddatabase__passwords__from_string__L_1__i.i.int__content = temp___436)) then (
            raise Passworddatabase__passwords__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Passworddatabase__passwords__from_string__L_1__i.i.int__content <- ( (Passworddatabase__passwords__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_444 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:passworddatabase.ads:12:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Id:13] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:passworddatabase.ads:12:4] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Passworddatabase__passwords__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Passworddatabase__passwords__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Passworddatabase__passwords__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (passworddatabase__passwords__from_string__result.Passworddatabase__passwords__mystring.mystring__content <- ( { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__from_string__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Passworddatabase__passwords__length___axiom.length(passworddatabase__passwords__from_string__result.Passworddatabase__passwords__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@GP_Id:16] [@vc:annotation] [@GP_Sloc:mystring.ads:14:45:instantiated:passworddatabase.ads:12:4] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__passwords__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  passworddatabase__passwords__from_string__result.Passworddatabase__passwords__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__less__m1 as Passworddatabase__passwords__less__m1
 use        Passworddatabase__passwords__less__m2 as Passworddatabase__passwords__less__m2
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__less__i as Passworddatabase__passwords__less__i
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Passworddatabase__passwords__less__L_2 as Passworddatabase__passwords__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__less__m1___axiom as Passworddatabase__passwords__less__m1___axiom
 use        Passworddatabase__passwords__less__m2___axiom as Passworddatabase__passwords__less__m2___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Passworddatabase__passwords__less__i___axiom as Passworddatabase__passwords__less__i___axiom
 use        Passworddatabase__passwords__less__L_2___axiom as Passworddatabase__passwords__less__L_2___axiom

 val passworddatabase__passwords__less__result [@model_trace:52564@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Passworddatabase__passwords__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=110715] Main.spark__branch).bool__content <- ( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__less__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) < (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__less__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length))) )));
   ( [@branch_id=110715] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (passworddatabase__passwords__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:passworddatabase.ads:12:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=110725] Main.spark__branch).bool__content <- ( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__less__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) > (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__less__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length))) )));
    ( [@branch_id=110725] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (passworddatabase__passwords__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at passworddatabase.ads:12 *)
     ;
     (if ((Passworddatabase__passwords__less__i.i.int__content <= (100 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___452 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Passworddatabase__passwords__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:12 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at passworddatabase.ads:12 *)
        ;
        (let temp___inv_453 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:passworddatabase.ads:12:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:37:36:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Id:24] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:37:36:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:110746] (Passworddatabase__passwords__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at passworddatabase.ads:12 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__less__i.i.int__content True True True True) )/\true )) ((Passworddatabase__passwords__less__i.i.int__content <= (100 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:12 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:12 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=110753] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___450 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__less__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get(temp___450) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:38:23:instantiated:passworddatabase.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:22] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__less__i.i.int__content) /\ (Passworddatabase__passwords__less__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
          Passworddatabase__passwords__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___451 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__less__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get(temp___451) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:38:35:instantiated:passworddatabase.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:23] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__less__i.i.int__content) /\ (Passworddatabase__passwords__less__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
          Passworddatabase__passwords__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=110753] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (passworddatabase__passwords__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:passworddatabase.ads:12:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=110767] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___448 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__less__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get(temp___448) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:40:26:instantiated:passworddatabase.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__less__i.i.int__content) /\ (Passworddatabase__passwords__less__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
           Passworddatabase__passwords__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___449 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__less__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get(temp___449) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:21] [@GP_Sloc:mystring.adb:40:38:instantiated:passworddatabase.ads:12:4] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__less__i.i.int__content) /\ (Passworddatabase__passwords__less__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
           Passworddatabase__passwords__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=110767] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (passworddatabase__passwords__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Passworddatabase__passwords__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@GP_Sloc:mystring.adb:43:23:instantiated:passworddatabase.ads:12:4] [@GP_Id:19] [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] (Standard__integer.range_check_((Passworddatabase__passwords__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:12 *)
         ;
         (if (not ( (Passworddatabase__passwords__less__i.i.int__content <= (100 : int)) )) then (
           raise Passworddatabase__passwords__less__L_2.L_2));
         (let temp___inv_453 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Passworddatabase__passwords__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (passworddatabase__passwords__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  passworddatabase__passwords__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__get__m as Passworddatabase__passwords__get__m
 use        Passworddatabase__passwords__get__index as Passworddatabase__passwords__get__index
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__get__m___axiom as Passworddatabase__passwords__get__m___axiom
 use        Passworddatabase__passwords__get__index___axiom as Passworddatabase__passwords__get__index___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom

 val passworddatabase__passwords__get__result [@model_trace:52748@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__passwords__get__index.index <= (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:53126] (Passworddatabase__passwords__get__index.index <= (epsilon temp___result_458 : int.
   ( (temp___result_458 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__get__m.m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_458 Passworddatabase__passwords__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:passworddatabase.ads:12:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (passworddatabase__passwords__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___456 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__get__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
    (Array__Int__Standard__character.get(temp___456) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Id:25] [@GP_Sloc:mystring.ads:46:13:instantiated:passworddatabase.ads:12:4] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__get__index.index) /\ (Passworddatabase__passwords__get__index.index <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
    Passworddatabase__passwords__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  passworddatabase__passwords__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__equal__m1 as Passworddatabase__passwords__equal__m1
 use        Passworddatabase__passwords__equal__m2 as Passworddatabase__passwords__equal__m2
 use        Passworddatabase__passwords__get as Passworddatabase__passwords__get
 use        Passworddatabase__passwords__get___axiom as Passworddatabase__passwords__get___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__equal__i as Passworddatabase__passwords__equal__i
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Passworddatabase__passwords__equal__L_3 as Passworddatabase__passwords__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__equal__m1___axiom as Passworddatabase__passwords__equal__m1___axiom
 use        Passworddatabase__passwords__equal__m2___axiom as Passworddatabase__passwords__equal__m2___axiom
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__get___axiom as Passworddatabase__passwords__get___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Passworddatabase__passwords__equal__i___axiom as Passworddatabase__passwords__equal__i___axiom
 use        Passworddatabase__passwords__equal__L_3___axiom as Passworddatabase__passwords__equal__L_3___axiom

 val passworddatabase__passwords__equal__result [@name:Equal] [@model_projected] [@model_trace:52628@result]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:35] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:passworddatabase.ads:12:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:mystring.ads:19:15:instantiated:passworddatabase.ads:12:4] [@GP_Shape:pragargs__if] (if ((passworddatabase__passwords__equal__result.bool__content = True)) then (
   ( ( [@GP_Sloc:mystring.ads:20:11:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:52597] ((epsilon temp___result_474 : int.
    ( (temp___result_474 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__equal__m1.m1)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_474 Passworddatabase__passwords__equal__m1.m1) )) = (epsilon temp___result_475 : int.
    ( (temp___result_475 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__equal__m2.m2)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_475 Passworddatabase__passwords__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@model_trace:52615] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_476 : int.
     ( (temp___result_476 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__equal__m1.m1)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_476 Passworddatabase__passwords__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:52605] [@GP_Sloc:mystring.ads:21:40:instantiated:passworddatabase.ads:12:4] ((epsilon temp___result_477 : int.
     ( (temp___result_477 = (Passworddatabase__passwords__get.get Passworddatabase__passwords__equal__m1.m1 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_477 Passworddatabase__passwords__equal__m1.m1 i) )) = (epsilon temp___result_478 : int.
     ( (temp___result_478 = (Passworddatabase__passwords__get.get Passworddatabase__passwords__equal__m2.m2 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_478 Passworddatabase__passwords__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:53204] [@GP_Sloc:mystring.ads:19:15:instantiated:passworddatabase.ads:12:4] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__equal__m1.m1 True False True True) };
   assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:12 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Passworddatabase__passwords__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=110904] Main.spark__branch).bool__content <- ( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) <> (Passworddatabase__passwords__mystring__T13s__rep.to_rep(Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length))) )));
   ( [@branch_id=110904] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (passworddatabase__passwords__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at passworddatabase.ads:12 *)
    ;
    (if ((Passworddatabase__passwords__equal__i.i.int__content <= (100 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___461 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Passworddatabase__passwords__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:12 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at passworddatabase.ads:12 *)
       ;
       (let temp___inv_462 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Passworddatabase__passwords__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:54:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Id:29] (Standard__integer.range_check_((Passworddatabase__passwords__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___463 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get(temp___463) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:30] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Sloc:mystring.adb:60:67:instantiated:passworddatabase.ads:12:4] ( (Passworddatabase__passwords__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___464 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get(temp___464) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:79:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Id:31] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__passwords__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:110945] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__passwords__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___465 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
         (Array__Int__Standard__character.get temp___465 j)))
        ) = (Standard__character__rep.to_rep (let temp___466 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
         (Array__Int__Standard__character.get temp___466 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:59:36:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Id:32] [@GP_Shape:if__L_3_while__pragargs__and] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:passworddatabase.ads:12:4:VC_LOOP_INVARIANT] ( ( [@GP_Sloc:mystring.adb:59:36:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:110926] (Passworddatabase__passwords__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:110945] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__passwords__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Pretty_Ada:110933] [@GP_Sloc:mystring.adb:60:60:instantiated:passworddatabase.ads:12:4] ((Standard__character__rep.to_rep (let temp___467 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get temp___467 j)))
          ) = (Standard__character__rep.to_rep (let temp___468 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get temp___468 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at passworddatabase.ads:12 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__passwords__equal__i.i.int__content True True True True) )/\true )) ((Passworddatabase__passwords__equal__i.i.int__content <= (100 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:12 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:12 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=110958] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___459 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
         (Array__Int__Standard__character.get(temp___459) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:61:23:instantiated:passworddatabase.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:27] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__equal__i.i.int__content) /\ (Passworddatabase__passwords__equal__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
         Passworddatabase__passwords__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___460 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
         (Array__Int__Standard__character.get(temp___460) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:61:36:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:28] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__equal__i.i.int__content) /\ (Passworddatabase__passwords__equal__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
         Passworddatabase__passwords__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=110958] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (passworddatabase__passwords__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Passworddatabase__passwords__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@GP_Sloc:mystring.adb:64:23:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] [@GP_Id:26] (Standard__integer.range_check_((Passworddatabase__passwords__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:12 *)
        ;
        (if (not ( (Passworddatabase__passwords__equal__i.i.int__content <= (100 : int)) )) then (
          raise Passworddatabase__passwords__equal__L_3.L_3));
        (let temp___inv_462 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Passworddatabase__passwords__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:54:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Id:29] (Standard__integer.range_check_((Passworddatabase__passwords__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___463 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get(temp___463) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:30] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Sloc:mystring.adb:60:67:instantiated:passworddatabase.ads:12:4] ( (Passworddatabase__passwords__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___464 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
           (Array__Int__Standard__character.get(temp___464) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:79:instantiated:passworddatabase.ads:12:4] [@vc:annotation] [@GP_Id:31] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__passwords__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:110945] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__passwords__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___465 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m1.m1.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get temp___465 j)))
         ) = (Standard__character__rep.to_rep (let temp___466 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__equal__m2.m2.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
          (Array__Int__Standard__character.get temp___466 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Passworddatabase__passwords__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (passworddatabase__passwords__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (passworddatabase__passwords__equal__result.bool__content) then (
   (Boolean.andb(((Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__equal__m1.m1)) = (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:33] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:passworddatabase.ads:12:4:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:40:instantiated:passworddatabase.ads:12:4] (Passworddatabase__passwords__get___axiom.get(Passworddatabase__passwords__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:52:instantiated:passworddatabase.ads:12:4] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:passworddatabase.ads:12:4:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:34] (Passworddatabase__passwords__get___axiom.get(Passworddatabase__passwords__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:52615] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_469 : int.
     ( (temp___result_469 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__equal__m1.m1)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_469 Passworddatabase__passwords__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:52605] ((epsilon temp___result_470 : int.
     ( (temp___result_470 = (Passworddatabase__passwords__get.get Passworddatabase__passwords__equal__m1.m1 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_470 Passworddatabase__passwords__equal__m1.m1 i) )) = (epsilon temp___result_471 : int.
     ( (temp___result_471 = (Passworddatabase__passwords__get.get Passworddatabase__passwords__equal__m2.m2 i)) /\ (Passworddatabase__passwords__get.get__function_guard temp___result_471 Passworddatabase__passwords__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  passworddatabase__passwords__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at passworddatabase.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_479___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_479 as Temp_____aggregate_def_479
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___481   : int.
   (let temp___480 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_479.temp_____aggregate_def_479 temp___481) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___481 True True True True)) then (
     (forall temp___482   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___480 temp___482)) = temp___481))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__length as Passworddatabase__passwords__length
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__substring__m as Passworddatabase__passwords__substring__m
 use        Passworddatabase__passwords__substring__from as Passworddatabase__passwords__substring__from
 use        Passworddatabase__passwords__substring__to as Passworddatabase__passwords__substring__to
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__substring__r as Passworddatabase__passwords__substring__r
 use        Passworddatabase__passwords__substring__j as Passworddatabase__passwords__substring__j
 use        Passworddatabase__passwords__substring__L_4__i as Passworddatabase__passwords__substring__L_4__i
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Passworddatabase__passwords__substring__L_4 as Passworddatabase__passwords__substring__L_4
 use        Passworddatabase__passwords__substring__L_4__T312s as Passworddatabase__passwords__substring__L_4__T312s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_479 as Temp_____aggregate_def_479
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__length___axiom as Passworddatabase__passwords__length___axiom
 use        Passworddatabase__passwords__substring__m___axiom as Passworddatabase__passwords__substring__m___axiom
 use        Passworddatabase__passwords__substring__from___axiom as Passworddatabase__passwords__substring__from___axiom
 use        Passworddatabase__passwords__substring__to___axiom as Passworddatabase__passwords__substring__to___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Passworddatabase__passwords__substring__r___axiom as Passworddatabase__passwords__substring__r___axiom
 use        Passworddatabase__passwords__substring__j___axiom as Passworddatabase__passwords__substring__j___axiom
 use        Passworddatabase__passwords__substring__L_4___axiom as Passworddatabase__passwords__substring__L_4___axiom
 use        Passworddatabase__passwords__substring__L_4__i___axiom as Passworddatabase__passwords__substring__L_4__i___axiom
 use        Temp_____aggregate_def_479___axiom as Temp_____aggregate_def_479___axiom
 use        Passworddatabase__passwords__substring__L_4__T312s___axiom as Passworddatabase__passwords__substring__L_4__T312s___axiom

 val passworddatabase__passwords__substring__result [@model_projected] [@model_trace:52704@result] [@name:Substring]  : Passworddatabase__passwords__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:45] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:28:14:instantiated:passworddatabase.ads:12:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:passworddatabase.ads:12:4:VC_POSTCONDITION] [@model_vc_post] ( [@GP_Sloc:mystring.ads:28:14:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:53099] ((epsilon temp___result_497 : int.
   ( (temp___result_497 = (Passworddatabase__passwords__length.length passworddatabase__passwords__substring__result.Passworddatabase__passwords__mystring.mystring__content)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_497 passworddatabase__passwords__substring__result.Passworddatabase__passwords__mystring.mystring__content) )) = ((Passworddatabase__passwords__substring__to.to__ - Passworddatabase__passwords__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant Passworddatabase__passwords__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Passworddatabase__passwords__substring__from.from <= Passworddatabase__passwords__substring__to.to__)) ((Passworddatabase__passwords__substring__to.to__ <= (Passworddatabase__passwords__length___axiom.length(Passworddatabase__passwords__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:12 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:52683] (Passworddatabase__passwords__substring__from.from <= Passworddatabase__passwords__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:52686] (Passworddatabase__passwords__substring__to.to__ <= (epsilon temp___result_496 : int.
   ( (temp___result_496 = (Passworddatabase__passwords__length.length Passworddatabase__passwords__substring__m.m)) /\ (Passworddatabase__passwords__length.length__function_guard temp___result_496 Passworddatabase__passwords__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let passworddatabase__passwords__substring__r__assume = { Passworddatabase__passwords__mystring.__split_fields = { Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = (Passworddatabase__passwords__mystring__T13s__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:72:44:instantiated:passworddatabase.ads:12:4] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Passworddatabase__passwords__mystring__T13s.range_check_(([#"mystring.adb" 72 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:72:44:instantiated:passworddatabase.ads:12:4] [@GP_Id:36] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Passworddatabase__passwords__substring__to.to__ - Passworddatabase__passwords__substring__from.from) + (1 : int)))) )))) )))); Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str = (Temp_____aggregate_def_479.temp_____aggregate_def_479((32 : int))) } } in (
     (Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( passworddatabase__passwords__substring__r__assume.Passworddatabase__passwords__mystring.__split_fields ))))
   ;
    assume {  (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Passworddatabase__passwords__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 75 0 0] (let temp___483 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__substring__from.from in (
   (let temp___484 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Passworddatabase__passwords__substring__L_4__i.i.int__content <- ( temp___483 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at passworddatabase.ads:12 *)
    ;
    (if ((Boolean.andb((temp___483 <= Passworddatabase__passwords__substring__L_4__i.i.int__content)) ((Passworddatabase__passwords__substring__L_4__i.i.int__content <= temp___484)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___491 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Passworddatabase__passwords__mystring.mystring
      ensures {[#"mystring.adb" 75 0 0] (result = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__substring__L_4__i.i.int__content in (
        ()))
        in () end ;
       (let temp___490 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Passworddatabase__passwords__substring__L_4__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__passwords__substring__j.j.int__content in (
         ()))
         in () end ;
        (let temp___489 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
        ensures {[#"mystring.adb" 75 0 0] (result = Passworddatabase__passwords__substring__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:12 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at passworddatabase.ads:12 *)
         ;
         (let temp___inv_493 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:passworddatabase.ads:12:4] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:passworddatabase.ads:12:4] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Passworddatabase__passwords__substring__L_4__i.i.int__content - Passworddatabase__passwords__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Sloc:mystring.adb:76:33:instantiated:passworddatabase.ads:12:4] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:43] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:passworddatabase.ads:12:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:76:33:instantiated:passworddatabase.ads:12:4] [@GP_Pretty_Ada:111120] (Passworddatabase__passwords__substring__j.j.int__content = ((Passworddatabase__passwords__substring__L_4__i.i.int__content - Passworddatabase__passwords__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at passworddatabase.ads:12 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Passworddatabase__passwords__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Passworddatabase__passwords__substring__from.from <= Passworddatabase__passwords__substring__to.to__) )) then (
           (Passworddatabase__passwords__substring__L_4__T312s.dynamic_property Passworddatabase__passwords__substring__from.from Passworddatabase__passwords__substring__to.to__ Passworddatabase__passwords__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } True True True True) )/\({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = temp___491.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length) )) (( (Passworddatabase__passwords__substring__from.from <= Passworddatabase__passwords__substring__L_4__i.i.int__content) /\ (Passworddatabase__passwords__substring__L_4__i.i.int__content <= Passworddatabase__passwords__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:12 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:12 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 77 0 0] (let temp___488 [@mlw:proxy_symbol] [@introduced] = (let temp___487 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___487.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
            ()))
            in () end ;
           { ( temp___487 ) with Passworddatabase__passwords__mystring.__split_fields = { ( temp___487.Passworddatabase__passwords__mystring.__split_fields ) with Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str = (let temp___486 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
            (Array__Int__Standard__character.set({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:77:16:instantiated:passworddatabase.ads:12:4] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Id:39] [@GP_Reason:VC_INDEX_CHECK] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__substring__j.j.int__content) /\ (Passworddatabase__passwords__substring__j.j.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
            Passworddatabase__passwords__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___485 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__passwords__substring__m.m.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
             (Array__Int__Standard__character.get(temp___485) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:77:28:instantiated:passworddatabase.ads:12:4] [@GP_Id:38] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:passworddatabase.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Passworddatabase__passwords__TmystringstrD1.first <= Passworddatabase__passwords__substring__L_4__i.i.int__content) /\ (Passworddatabase__passwords__substring__L_4__i.i.int__content <= Passworddatabase__passwords__TmystringstrD1.last) ) )) };
             Passworddatabase__passwords__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( temp___488.Passworddatabase__passwords__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Passworddatabase__passwords__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:78:17:instantiated:passworddatabase.ads:12:4] [@GP_Id:40] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Passworddatabase__passwords__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:12 *)
          ;
          (if ((Passworddatabase__passwords__substring__L_4__i.i.int__content = temp___484)) then (
            raise Passworddatabase__passwords__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Passworddatabase__passwords__substring__L_4__i.i.int__content <- ( (Passworddatabase__passwords__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_493 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__passwords__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:passworddatabase.ads:12:4] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:passworddatabase.ads:12:4] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Passworddatabase__passwords__substring__L_4__i.i.int__content - Passworddatabase__passwords__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Passworddatabase__passwords__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (passworddatabase__passwords__substring__result.Passworddatabase__passwords__mystring.mystring__content <- ( { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__substring__r.r__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Passworddatabase__passwords__length___axiom.length(passworddatabase__passwords__substring__result.Passworddatabase__passwords__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@GP_Sloc:mystring.ads:28:51:instantiated:passworddatabase.ads:12:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:passworddatabase.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] (Standard__integer.range_check_(((Passworddatabase__passwords__substring__to.to__ - Passworddatabase__passwords__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  passworddatabase__passwords__substring__result.Passworddatabase__passwords__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__passwords__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring
 use        Passworddatabase__passwords__get_line__m as Passworddatabase__passwords__get_line__m
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__passwords__get_line__m___axiom as Passworddatabase__passwords__get_line__m___axiom
 use        Passworddatabase__passwords__mystringstr___axiom as Passworddatabase__passwords__mystringstr___axiom
 use        Passworddatabase__passwords__mystring___axiom as Passworddatabase__passwords__mystring___axiom
 use        Passworddatabase__passwords__TmystringstrD1___axiom as Passworddatabase__passwords__TmystringstrD1___axiom
 use        Passworddatabase__passwords__mystring__T13s___axiom as Passworddatabase__passwords__mystring__T13s___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Passworddatabase__passwords__mystring___axiom.dynamic_invariant { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:12 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:passworddatabase.ads:12:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@GP_Sloc:mystring.adb:85:44:instantiated:passworddatabase.ads:12:4] [@GP_Id:46] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Passworddatabase__passwords__TmystringstrD1.first) (Passworddatabase__passwords__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str) (Passworddatabase__passwords__TmystringstrD1.first) (Passworddatabase__passwords__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Passworddatabase__passwords__mystring__T13s__rep.to_rep({ Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content }.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___500 [@mlw:proxy_symbol] [@introduced] = (let temp___499 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___499.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str in (
       ()))
       in () end ;
      { ( temp___499 ) with Passworddatabase__passwords__mystring.__split_fields = { ( temp___499.Passworddatabase__passwords__mystring.__split_fields ) with Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__str = (let temp___498 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___498))) ((Standard__string.first(temp___498))) (Passworddatabase__passwords__TmystringstrD1.first))))
       } } )))
      in (
       (Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( temp___500.Passworddatabase__passwords__mystring.__split_fields ))))
     ;
     (let temp___502 [@mlw:proxy_symbol] [@introduced] = (let temp___501 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__passwords__mystring.__split_fields = Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___501.Passworddatabase__passwords__mystring.__split_fields.Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length in (
       ()))
       in () end ;
      { ( temp___501 ) with Passworddatabase__passwords__mystring.__split_fields = { ( temp___501.Passworddatabase__passwords__mystring.__split_fields ) with Passworddatabase__passwords__mystring.rec__passworddatabase__passwords__mystring__length = (Passworddatabase__passwords__mystring__T13s__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@GP_Id:47] [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:passworddatabase.ads:12:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:85:60:instantiated:passworddatabase.ads:12:4] (Passworddatabase__passwords__mystring__T13s.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Passworddatabase__passwords__get_line__m.m__split_fields.Passworddatabase__passwords__mystring.__split_fields__content <- ( temp___502.Passworddatabase__passwords__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "urls" defined at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Passworddatabase__urls__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__urls__max_mystring_length as Passworddatabase__urls__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Passworddatabase__urls__max_mystring_length___axiom as Passworddatabase__urls__max_mystring_length___axiom

 let def [#"passworddatabase.ads" 13 0 0][@GP_Subp:passworddatabase.ads:13] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 13 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"passworddatabase.ads" 13 0 0] ( [#"passworddatabase.ads" 13 0 0] begin ensures {true} let _ = (let _ = (1024 : int) in (
   ()))
   in () end ;
  [#"passworddatabase.ads" 13 0 0] assume { [#"passworddatabase.ads" 13 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"passworddatabase.ads" 13 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Passworddatabase__urls__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___504 [@mlw:proxy_symbol] [@introduced] =  (val _f : Passworddatabase__urls__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length__m as Passworddatabase__urls__length__m
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__urls__length__m___axiom as Passworddatabase__urls__length__m___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom

 val passworddatabase__urls__length__result [@model_projected] [@model_trace:53544@result] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Sloc:mystring.ads:24:14:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Id:48] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:passworddatabase.ads:13:4:VC_POSTCONDITION] [@model_vc_post] ( [@GP_Sloc:mystring.ads:24:14:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53940] (passworddatabase__urls__length__result.int__content <= (1024 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:13 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at passworddatabase.ads:13 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:passworddatabase.ads:13:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (passworddatabase__urls__length__result.int__content <- ( (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__length__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (passworddatabase__urls__length__result.int__content <= (1024 : int)) in (
   ()))
   in () end ;
  passworddatabase__urls__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__to_string__m as Passworddatabase__urls__to_string__m
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__to_string__result as Passworddatabase__urls__to_string__result
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Passworddatabase__urls__to_string__TresultS as Passworddatabase__urls__to_string__TresultS
 use        Passworddatabase__urls__to_string__T315s as Passworddatabase__urls__to_string__T315s
 use        Passworddatabase__urls__to_string__TresultS___axiom as Passworddatabase__urls__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__to_string__m___axiom as Passworddatabase__urls__to_string__m___axiom
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Passworddatabase__urls__to_string__result___axiom as Passworddatabase__urls__to_string__result___axiom
 use        Passworddatabase__urls__to_string__TresultS___axiom as Passworddatabase__urls__to_string__TresultS___axiom
 use        Passworddatabase__urls__to_string__T315s___axiom as Passworddatabase__urls__to_string__T315s___axiom

 val passworddatabase__urls__to_string__result [@name:To_String] [@model_projected] [@model_trace:53393@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:passworddatabase.ads:13:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:9:14:instantiated:passworddatabase.ads:13:4] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:55] ( ( ( [@GP_Sloc:mystring.ads:9:14:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53373] ((Standard__string.length passworddatabase__urls__to_string__result.Standard__string.string__content) = (epsilon temp___result_516 : int.
   ( (temp___result_516 = (Passworddatabase__urls__length.length Passworddatabase__urls__to_string__m.m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_516 Passworddatabase__urls__to_string__m.m) ))) ) /\ ( [@GP_Sloc:mystring.ads:10:14:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53380] ((Standard__string.first passworddatabase__urls__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:53385] [@GP_Sloc:mystring.ads:10:45:instantiated:passworddatabase.ads:13:4] ((Standard__string.last passworddatabase__urls__to_string__result.Standard__string.string__content) = (epsilon temp___result_517 : int.
   ( (temp___result_517 = (Passworddatabase__urls__length.length Passworddatabase__urls__to_string__m.m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_517 Passworddatabase__urls__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:13 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at passworddatabase.ads:13 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@GP_Sloc:mystring.adb:6:7:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Id:49] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Passworddatabase__urls__to_string__TresultS___axiom.default_initial_assumption (Passworddatabase__urls__to_string__TresultS.of_array Passworddatabase__urls__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first) (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Passworddatabase__urls__to_string__TresultS.dynamic_property (1 : int) (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first) (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last) = (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Passworddatabase__urls__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Passworddatabase__urls__to_string__TresultS.to_array (let temp___513 [@mlw:proxy_symbol] [@introduced] = (let temp___512 [@mlw:proxy_symbol] [@introduced] = (let temp___511 [@mlw:proxy_symbol] [@introduced] = (let temp___509 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) in (
   (let temp___508 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___510 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
    (Passworddatabase__urls__to_string__T315s.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:50] ( (temp___508 <= temp___509) -> ( ( (Passworddatabase__urls__TmystringstrD1.first <= temp___508) /\ (temp___508 <= Passworddatabase__urls__TmystringstrD1.last) ) /\ ( (Passworddatabase__urls__TmystringstrD1.first <= temp___509) /\ (temp___509 <= Passworddatabase__urls__TmystringstrD1.last) ) ) ) )) };
    temp___510 )) (temp___508) (temp___509))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:51] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Passworddatabase__urls__to_string__T315s.first(temp___511))) ((Passworddatabase__urls__to_string__T315s.last(temp___511)))) )) };
    (Standard__string.of_array((Passworddatabase__urls__to_string__T315s.to_array(temp___511))) ((Passworddatabase__urls__to_string__T315s.first(temp___511))) ((Passworddatabase__urls__to_string__T315s.last(temp___511)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:passworddatabase.ads:13:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:result_assign__typeconv] [@GP_Id:52] [@GP_Reason:VC_LENGTH_CHECK] [@GP_Sloc:mystring.adb:8:17:instantiated:passworddatabase.ads:13:4] ( true /\ (if (((Standard__string.first temp___512) <= (Standard__string.last temp___512))) then (
     ( ((1 : int) <= (Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) /\ (((Standard__string.last temp___512) - (Standard__string.first temp___512)) = ((Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) - (1 : int))) )) else (
     ((Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) < (1 : int)))) ) )) };
    (Passworddatabase__urls__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___512))) ((Standard__string.first(temp___512))) ((1 : int)))) ((1 : int)) ((Passworddatabase__urls__mystring__T28s__rep.to_rep Passworddatabase__urls__to_string__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:passworddatabase.ads:13:4:VC_LENGTH_CHECK] [@GP_Shape:result_assign] [@GP_Sloc:mystring.adb:8:14:instantiated:passworddatabase.ads:13:4] [@GP_Id:53] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Passworddatabase__urls__to_string__TresultS.first temp___513) <= (Passworddatabase__urls__to_string__TresultS.last temp___513))) then (
     ( ((Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first) <= (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last)) /\ (((Passworddatabase__urls__to_string__TresultS.last temp___513) - (Passworddatabase__urls__to_string__TresultS.first temp___513)) = ((Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last) - (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____last) < (Standard__integer__rep.to_rep Passworddatabase__urls__to_string__result.result____first)))) ) )) };
    temp___513 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (passworddatabase__urls__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Passworddatabase__urls__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Passworddatabase__urls__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Passworddatabase__urls__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@vc:annotation] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:9:30:instantiated:passworddatabase.ads:13:4] [@GP_Id:54] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = passworddatabase__urls__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(passworddatabase__urls__to_string__result.Standard__string.string__content)) ))) )) = (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = passworddatabase__urls__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(passworddatabase__urls__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = passworddatabase__urls__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(passworddatabase__urls__to_string__result.Standard__string.string__content)) ) = (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__to_string__m.m))))) in (
   ()))
   in () end ;
  passworddatabase__urls__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at passworddatabase.ads:13, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_518___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_518 as Temp_____aggregate_def_518
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___520   : int.
   (let temp___519 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_518.temp_____aggregate_def_518 temp___520) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___520 True True True True)) then (
     (forall temp___521   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___519 temp___521)) = temp___520))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__from_string__s as Passworddatabase__urls__from_string__s
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__from_string__m as Passworddatabase__urls__from_string__m
 use        Passworddatabase__urls__from_string__j as Passworddatabase__urls__from_string__j
 use        Passworddatabase__urls__from_string__L_1__i as Passworddatabase__urls__from_string__L_1__i
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Passworddatabase__urls__from_string__L_1 as Passworddatabase__urls__from_string__L_1
 use        Passworddatabase__urls__from_string__L_1__T320s as Passworddatabase__urls__from_string__L_1__T320s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_518 as Temp_____aggregate_def_518
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__from_string__s___axiom as Passworddatabase__urls__from_string__s___axiom
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Passworddatabase__urls__from_string__m___axiom as Passworddatabase__urls__from_string__m___axiom
 use        Passworddatabase__urls__from_string__j___axiom as Passworddatabase__urls__from_string__j___axiom
 use        Passworddatabase__urls__from_string__L_1___axiom as Passworddatabase__urls__from_string__L_1___axiom
 use        Passworddatabase__urls__from_string__L_1__i___axiom as Passworddatabase__urls__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_518___axiom as Temp_____aggregate_def_518___axiom
 use        Passworddatabase__urls__from_string__L_1__T320s___axiom as Passworddatabase__urls__from_string__L_1__T320s___axiom

 val passworddatabase__urls__from_string__result [@model_trace:53427@result] [@name:From_String] [@model_projected]  : Passworddatabase__urls__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:passworddatabase.ads:13:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:66] [@GP_Sloc:mystring.ads:14:15:instantiated:passworddatabase.ads:13:4] ( [@GP_Sloc:mystring.ads:14:15:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53872] ((epsilon temp___result_536 : int.
   ( (temp___result_536 = (Passworddatabase__urls__length.length passworddatabase__urls__from_string__result.Passworddatabase__urls__mystring.mystring__content)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_536 passworddatabase__urls__from_string__result.Passworddatabase__urls__mystring.mystring__content) )) = (Standard__string.length Passworddatabase__urls__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Passworddatabase__urls__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:13 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Sloc:mystring.ads:13:15:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:65] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__urls__from_string__s.s)) ))) )) <= (1024 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  ( [@GP_Pretty_Ada:53858] ((Standard__string.length Passworddatabase__urls__from_string__s.s) <= (1024 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let passworddatabase__urls__from_string__m__assume = { Passworddatabase__urls__mystring.__split_fields = { Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = ( 0 : Passworddatabase__urls__mystring__T28s.t28s ); Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str = (Temp_____aggregate_def_518.temp_____aggregate_def_518((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( passworddatabase__urls__from_string__m__assume.Passworddatabase__urls__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Passworddatabase__urls__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=111840] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@GP_Id:57] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Sloc:mystring.adb:16:11:instantiated:passworddatabase.ads:13:4] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Passworddatabase__urls__from_string__s.s)) ))) )) > (1024 : int)) )));
   ( [@branch_id=111840] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Id:56] [@GP_Reason:VC_RAISE] [@GP_Sloc:mystring.adb:17:10:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:passworddatabase.ads:13:4:VC_RAISE] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 19 0 0] (let temp___523 [@mlw:proxy_symbol] [@introduced] = (let temp___522 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___522.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length in (
     ()))
     in () end ;
    { ( temp___522 ) with Passworddatabase__urls__mystring.__split_fields = { ( temp___522.Passworddatabase__urls__mystring.__split_fields ) with Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = (Passworddatabase__urls__mystring__T28s__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@GP_Id:58] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:19:20:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] (Passworddatabase__urls__mystring__T28s.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Passworddatabase__urls__from_string__s.s)) ))) )))) } } )))
    in (
     (Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( temp___523.Passworddatabase__urls__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 20 0 0] (let temp___524 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Passworddatabase__urls__from_string__s.s)) ) in (
   (let temp___525 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Passworddatabase__urls__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Passworddatabase__urls__from_string__L_1__i.i.int__content <- ( temp___524 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at passworddatabase.ads:13 *)
    ;
    (if ((Boolean.andb((temp___524 <= Passworddatabase__urls__from_string__L_1__i.i.int__content)) ((Passworddatabase__urls__from_string__L_1__i.i.int__content <= temp___525)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___531 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Passworddatabase__urls__mystring.mystring
      ensures {[#"mystring.adb" 20 0 0] (result = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__L_1__i.i.int__content in (
        ()))
        in () end ;
       (let temp___530 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
       ensures {[#"mystring.adb" 20 0 0] (result = Passworddatabase__urls__from_string__L_1__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__j.j.int__content in (
         ()))
         in () end ;
        (let temp___529 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Passworddatabase__urls__from_string__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:13 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at passworddatabase.ads:13 *)
         ;
         (let temp___inv_533 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Sloc:mystring.adb:21:49:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:62] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:61] [@GP_Sloc:mystring.adb:21:39:instantiated:passworddatabase.ads:13:4] (Standard__integer.range_check_((Passworddatabase__urls__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Passworddatabase__urls__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:21:33:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__cmp] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:passworddatabase.ads:13:4:VC_LOOP_INVARIANT] [@GP_Id:63] ( [@GP_Sloc:mystring.adb:21:33:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:111868] (Passworddatabase__urls__from_string__j.j.int__content = ((Passworddatabase__urls__from_string__L_1__i.i.int__content - (Standard__string.first Passworddatabase__urls__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at passworddatabase.ads:13 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Passworddatabase__urls__from_string__s.s) <= (Standard__string.last Passworddatabase__urls__from_string__s.s)) )) then (
           (Passworddatabase__urls__from_string__L_1__T320s.dynamic_property (Standard__string.first Passworddatabase__urls__from_string__s.s) (Standard__string.last Passworddatabase__urls__from_string__s.s) Passworddatabase__urls__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } True True True True) )/\({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = temp___531.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) )) (( ((Standard__string.first Passworddatabase__urls__from_string__s.s) <= Passworddatabase__urls__from_string__L_1__i.i.int__content) /\ (Passworddatabase__urls__from_string__L_1__i.i.int__content <= (Standard__string.last Passworddatabase__urls__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:13 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:13 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 22 0 0] (let temp___528 [@mlw:proxy_symbol] [@introduced] = (let temp___527 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___527.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
            ()))
            in () end ;
           { ( temp___527 ) with Passworddatabase__urls__mystring.__split_fields = { ( temp___527.Passworddatabase__urls__mystring.__split_fields ) with Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str = (let temp___526 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
            (Array__Int__Standard__character.set({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@GP_Id:59] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@GP_Sloc:mystring.adb:22:16:instantiated:passworddatabase.ads:13:4] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__from_string__j.j.int__content) /\ (Passworddatabase__urls__from_string__j.j.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
            Passworddatabase__urls__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passworddatabase__urls__from_string__s.s))) (Passworddatabase__urls__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( temp___528.Passworddatabase__urls__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Passworddatabase__urls__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@GP_Sloc:mystring.adb:23:17:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:60] (Standard__integer.range_check_((Passworddatabase__urls__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at passworddatabase.ads:13 *)
          ;
          (if ((Passworddatabase__urls__from_string__L_1__i.i.int__content = temp___525)) then (
            raise Passworddatabase__urls__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Passworddatabase__urls__from_string__L_1__i.i.int__content <- ( (Passworddatabase__urls__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_533 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Sloc:mystring.adb:21:49:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:62] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:61] [@GP_Sloc:mystring.adb:21:39:instantiated:passworddatabase.ads:13:4] (Standard__integer.range_check_((Passworddatabase__urls__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Passworddatabase__urls__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Passworddatabase__urls__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (passworddatabase__urls__from_string__result.Passworddatabase__urls__mystring.mystring__content <- ( { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__from_string__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Passworddatabase__urls__length___axiom.length(passworddatabase__urls__from_string__result.Passworddatabase__urls__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:64] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:14:45:instantiated:passworddatabase.ads:13:4] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__urls__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  passworddatabase__urls__from_string__result.Passworddatabase__urls__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__less__m1 as Passworddatabase__urls__less__m1
 use        Passworddatabase__urls__less__m2 as Passworddatabase__urls__less__m2
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__less__i as Passworddatabase__urls__less__i
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Passworddatabase__urls__less__L_2 as Passworddatabase__urls__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__less__m1___axiom as Passworddatabase__urls__less__m1___axiom
 use        Passworddatabase__urls__less__m2___axiom as Passworddatabase__urls__less__m2___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Passworddatabase__urls__less__i___axiom as Passworddatabase__urls__less__i___axiom
 use        Passworddatabase__urls__less__L_2___axiom as Passworddatabase__urls__less__L_2___axiom

 val passworddatabase__urls__less__result [@model_trace:53446@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Passworddatabase__urls__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=111997] Main.spark__branch).bool__content <- ( ((Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__less__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) < (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__less__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length))) )));
   ( [@branch_id=111997] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (passworddatabase__urls__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:passworddatabase.ads:13:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=112007] Main.spark__branch).bool__content <- ( ((Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__less__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) > (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__less__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length))) )));
    ( [@branch_id=112007] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (passworddatabase__urls__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at passworddatabase.ads:13 *)
     ;
     (if ((Passworddatabase__urls__less__i.i.int__content <= (1024 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___541 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Passworddatabase__urls__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:13 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at passworddatabase.ads:13 *)
        ;
        (let temp___inv_542 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:72] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:passworddatabase.ads:13:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:37:36:instantiated:passworddatabase.ads:13:4] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:37:36:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:112028] (Passworddatabase__urls__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at passworddatabase.ads:13 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__less__i.i.int__content True True True True) )/\true )) ((Passworddatabase__urls__less__i.i.int__content <= (1024 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:13 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:13 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=112035] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___539 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__less__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get(temp___539) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Sloc:mystring.adb:38:23:instantiated:passworddatabase.ads:13:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:70] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__less__i.i.int__content) /\ (Passworddatabase__urls__less__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
          Passworddatabase__urls__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___540 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__less__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get(temp___540) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Sloc:mystring.adb:38:35:instantiated:passworddatabase.ads:13:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__less__i.i.int__content) /\ (Passworddatabase__urls__less__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
          Passworddatabase__urls__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=112035] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (passworddatabase__urls__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:passworddatabase.ads:13:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=112049] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___537 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__less__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get(temp___537) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Sloc:mystring.adb:40:26:instantiated:passworddatabase.ads:13:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:68] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__less__i.i.int__content) /\ (Passworddatabase__urls__less__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
           Passworddatabase__urls__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___538 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__less__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get(temp___538) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:40:38:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:69] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__less__i.i.int__content) /\ (Passworddatabase__urls__less__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
           Passworddatabase__urls__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=112049] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (passworddatabase__urls__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Passworddatabase__urls__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@GP_Sloc:mystring.adb:43:23:instantiated:passworddatabase.ads:13:4] [@GP_Id:67] [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Passworddatabase__urls__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at passworddatabase.ads:13 *)
         ;
         (if (not ( (Passworddatabase__urls__less__i.i.int__content <= (1024 : int)) )) then (
           raise Passworddatabase__urls__less__L_2.L_2));
         (let temp___inv_542 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Passworddatabase__urls__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (passworddatabase__urls__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  passworddatabase__urls__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__get__m as Passworddatabase__urls__get__m
 use        Passworddatabase__urls__get__index as Passworddatabase__urls__get__index
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__get__m___axiom as Passworddatabase__urls__get__m___axiom
 use        Passworddatabase__urls__get__index___axiom as Passworddatabase__urls__get__index___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom

 val passworddatabase__urls__get__result [@model_trace:53630@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__urls__get__index.index <= (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:54008] (Passworddatabase__urls__get__index.index <= (epsilon temp___result_547 : int.
   ( (temp___result_547 = (Passworddatabase__urls__length.length Passworddatabase__urls__get__m.m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_547 Passworddatabase__urls__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:passworddatabase.ads:13:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (passworddatabase__urls__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___545 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__get__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
    (Array__Int__Standard__character.get(temp___545) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@GP_Sloc:mystring.ads:46:13:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Id:73] [@GP_Reason:VC_INDEX_CHECK] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__get__index.index) /\ (Passworddatabase__urls__get__index.index <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
    Passworddatabase__urls__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  passworddatabase__urls__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__equal__m1 as Passworddatabase__urls__equal__m1
 use        Passworddatabase__urls__equal__m2 as Passworddatabase__urls__equal__m2
 use        Passworddatabase__urls__get as Passworddatabase__urls__get
 use        Passworddatabase__urls__get___axiom as Passworddatabase__urls__get___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__equal__i as Passworddatabase__urls__equal__i
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Passworddatabase__urls__equal__L_3 as Passworddatabase__urls__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__equal__m1___axiom as Passworddatabase__urls__equal__m1___axiom
 use        Passworddatabase__urls__equal__m2___axiom as Passworddatabase__urls__equal__m2___axiom
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__get___axiom as Passworddatabase__urls__get___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Passworddatabase__urls__equal__i___axiom as Passworddatabase__urls__equal__i___axiom
 use        Passworddatabase__urls__equal__L_3___axiom as Passworddatabase__urls__equal__L_3___axiom

 val passworddatabase__urls__equal__result [@model_trace:53510@result] [@name:Equal] [@model_projected]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:83] [@GP_Sloc:mystring.ads:19:15:instantiated:passworddatabase.ads:13:4] [@model_vc_post] [@GP_Shape:pragargs__if] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:passworddatabase.ads:13:4:VC_POSTCONDITION] (if ((passworddatabase__urls__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:53479] [@GP_Sloc:mystring.ads:20:11:instantiated:passworddatabase.ads:13:4] ((epsilon temp___result_563 : int.
    ( (temp___result_563 = (Passworddatabase__urls__length.length Passworddatabase__urls__equal__m1.m1)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_563 Passworddatabase__urls__equal__m1.m1) )) = (epsilon temp___result_564 : int.
    ( (temp___result_564 = (Passworddatabase__urls__length.length Passworddatabase__urls__equal__m2.m2)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_564 Passworddatabase__urls__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@model_trace:53497] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_565 : int.
     ( (temp___result_565 = (Passworddatabase__urls__length.length Passworddatabase__urls__equal__m1.m1)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_565 Passworddatabase__urls__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:21:40:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53487] ((epsilon temp___result_566 : int.
     ( (temp___result_566 = (Passworddatabase__urls__get.get Passworddatabase__urls__equal__m1.m1 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_566 Passworddatabase__urls__equal__m1.m1 i) )) = (epsilon temp___result_567 : int.
     ( (temp___result_567 = (Passworddatabase__urls__get.get Passworddatabase__urls__equal__m2.m2 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_567 Passworddatabase__urls__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Sloc:mystring.ads:19:15:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:54086] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__equal__m1.m1 True False True True) };
   assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:13 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at passworddatabase.ads:13 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Passworddatabase__urls__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=112186] Main.spark__branch).bool__content <- ( ((Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) <> (Passworddatabase__urls__mystring__T28s__rep.to_rep(Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length))) )));
   ( [@branch_id=112186] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (passworddatabase__urls__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at passworddatabase.ads:13 *)
    ;
    (if ((Passworddatabase__urls__equal__i.i.int__content <= (1024 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___550 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Passworddatabase__urls__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:13 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at passworddatabase.ads:13 *)
       ;
       (let temp___inv_551 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Passworddatabase__urls__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Sloc:mystring.adb:60:54:instantiated:passworddatabase.ads:13:4] [@GP_Id:77] (Standard__integer.range_check_((Passworddatabase__urls__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___552 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get(temp___552) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:67:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Id:78] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__urls__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___553 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get(temp___553) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:79] [@GP_Sloc:mystring.adb:60:79:instantiated:passworddatabase.ads:13:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__urls__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:112227] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__urls__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___554 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
         (Array__Int__Standard__character.get temp___554 j)))
        ) = (Standard__character__rep.to_rep (let temp___555 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
         (Array__Int__Standard__character.get temp___555 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Id:80] [@GP_Reason:VC_LOOP_INVARIANT] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:passworddatabase.ads:13:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:if__L_3_while__pragargs__and] [@GP_Sloc:mystring.adb:59:36:instantiated:passworddatabase.ads:13:4] ( ( [@GP_Pretty_Ada:112208] [@GP_Sloc:mystring.adb:59:36:instantiated:passworddatabase.ads:13:4] (Passworddatabase__urls__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:112227] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__urls__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Sloc:mystring.adb:60:60:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:112215] ((Standard__character__rep.to_rep (let temp___556 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get temp___556 j)))
          ) = (Standard__character__rep.to_rep (let temp___557 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get temp___557 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at passworddatabase.ads:13 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Passworddatabase__urls__equal__i.i.int__content True True True True) )/\true )) ((Passworddatabase__urls__equal__i.i.int__content <= (1024 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:13 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:13 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=112240] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___548 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
         (Array__Int__Standard__character.get(temp___548) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:75] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:61:23:instantiated:passworddatabase.ads:13:4] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__equal__i.i.int__content) /\ (Passworddatabase__urls__equal__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
         Passworddatabase__urls__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___549 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
         (Array__Int__Standard__character.get(temp___549) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Id:76] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:61:36:instantiated:passworddatabase.ads:13:4] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__equal__i.i.int__content) /\ (Passworddatabase__urls__equal__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
         Passworddatabase__urls__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=112240] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (passworddatabase__urls__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Passworddatabase__urls__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:64:23:instantiated:passworddatabase.ads:13:4] [@GP_Shape:if__L_3_while__if__i_assign__add] (Standard__integer.range_check_((Passworddatabase__urls__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at passworddatabase.ads:13 *)
        ;
        (if (not ( (Passworddatabase__urls__equal__i.i.int__content <= (1024 : int)) )) then (
          raise Passworddatabase__urls__equal__L_3.L_3));
        (let temp___inv_551 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Passworddatabase__urls__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Sloc:mystring.adb:60:54:instantiated:passworddatabase.ads:13:4] [@GP_Id:77] (Standard__integer.range_check_((Passworddatabase__urls__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___552 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get(temp___552) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:67:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Id:78] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__urls__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___553 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
           (Array__Int__Standard__character.get(temp___553) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:79] [@GP_Sloc:mystring.adb:60:79:instantiated:passworddatabase.ads:13:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Passworddatabase__urls__TmystringstrD1.first <= j) /\ (j <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:112227] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Passworddatabase__urls__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___554 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m1.m1.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get temp___554 j)))
         ) = (Standard__character__rep.to_rep (let temp___555 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__equal__m2.m2.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
          (Array__Int__Standard__character.get temp___555 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Passworddatabase__urls__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (passworddatabase__urls__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (passworddatabase__urls__equal__result.bool__content) then (
   (Boolean.andb(((Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__equal__m1.m1)) = (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Id:81] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:mystring.ads:21:40:instantiated:passworddatabase.ads:13:4] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:passworddatabase.ads:13:4:VC_PRECONDITION] (Passworddatabase__urls__get___axiom.get(Passworddatabase__urls__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:passworddatabase.ads:13:4:VC_PRECONDITION] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Sloc:mystring.ads:21:52:instantiated:passworddatabase.ads:13:4] (Passworddatabase__urls__get___axiom.get(Passworddatabase__urls__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:53497] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_558 : int.
     ( (temp___result_558 = (Passworddatabase__urls__length.length Passworddatabase__urls__equal__m1.m1)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_558 Passworddatabase__urls__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:53487] ((epsilon temp___result_559 : int.
     ( (temp___result_559 = (Passworddatabase__urls__get.get Passworddatabase__urls__equal__m1.m1 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_559 Passworddatabase__urls__equal__m1.m1 i) )) = (epsilon temp___result_560 : int.
     ( (temp___result_560 = (Passworddatabase__urls__get.get Passworddatabase__urls__equal__m2.m2 i)) /\ (Passworddatabase__urls__get.get__function_guard temp___result_560 Passworddatabase__urls__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  passworddatabase__urls__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at passworddatabase.ads:13, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_568___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_568 as Temp_____aggregate_def_568
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___570   : int.
   (let temp___569 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_568.temp_____aggregate_def_568 temp___570) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___570 True True True True)) then (
     (forall temp___571   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___569 temp___571)) = temp___570))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__length as Passworddatabase__urls__length
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__substring__m as Passworddatabase__urls__substring__m
 use        Passworddatabase__urls__substring__from as Passworddatabase__urls__substring__from
 use        Passworddatabase__urls__substring__to as Passworddatabase__urls__substring__to
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__substring__r as Passworddatabase__urls__substring__r
 use        Passworddatabase__urls__substring__j as Passworddatabase__urls__substring__j
 use        Passworddatabase__urls__substring__L_4__i as Passworddatabase__urls__substring__L_4__i
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Passworddatabase__urls__substring__L_4 as Passworddatabase__urls__substring__L_4
 use        Passworddatabase__urls__substring__L_4__T336s as Passworddatabase__urls__substring__L_4__T336s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_568 as Temp_____aggregate_def_568
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__length___axiom as Passworddatabase__urls__length___axiom
 use        Passworddatabase__urls__substring__m___axiom as Passworddatabase__urls__substring__m___axiom
 use        Passworddatabase__urls__substring__from___axiom as Passworddatabase__urls__substring__from___axiom
 use        Passworddatabase__urls__substring__to___axiom as Passworddatabase__urls__substring__to___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Passworddatabase__urls__substring__r___axiom as Passworddatabase__urls__substring__r___axiom
 use        Passworddatabase__urls__substring__j___axiom as Passworddatabase__urls__substring__j___axiom
 use        Passworddatabase__urls__substring__L_4___axiom as Passworddatabase__urls__substring__L_4___axiom
 use        Passworddatabase__urls__substring__L_4__i___axiom as Passworddatabase__urls__substring__L_4__i___axiom
 use        Temp_____aggregate_def_568___axiom as Temp_____aggregate_def_568___axiom
 use        Passworddatabase__urls__substring__L_4__T336s___axiom as Passworddatabase__urls__substring__L_4__T336s___axiom

 val passworddatabase__urls__substring__result [@model_trace:53586@result] [@model_projected] [@name:Substring]  : Passworddatabase__urls__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Sloc:mystring.ads:28:14:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:passworddatabase.ads:13:4:VC_POSTCONDITION] [@GP_Id:93] ( [@GP_Sloc:mystring.ads:28:14:instantiated:passworddatabase.ads:13:4] [@GP_Pretty_Ada:53981] ((epsilon temp___result_586 : int.
   ( (temp___result_586 = (Passworddatabase__urls__length.length passworddatabase__urls__substring__result.Passworddatabase__urls__mystring.mystring__content)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_586 passworddatabase__urls__substring__result.Passworddatabase__urls__mystring.mystring__content) )) = ((Passworddatabase__urls__substring__to.to__ - Passworddatabase__urls__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant Passworddatabase__urls__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:13 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Passworddatabase__urls__substring__from.from <= Passworddatabase__urls__substring__to.to__)) ((Passworddatabase__urls__substring__to.to__ <= (Passworddatabase__urls__length___axiom.length(Passworddatabase__urls__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at passworddatabase.ads:13 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:53565] (Passworddatabase__urls__substring__from.from <= Passworddatabase__urls__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:53568] (Passworddatabase__urls__substring__to.to__ <= (epsilon temp___result_585 : int.
   ( (temp___result_585 = (Passworddatabase__urls__length.length Passworddatabase__urls__substring__m.m)) /\ (Passworddatabase__urls__length.length__function_guard temp___result_585 Passworddatabase__urls__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let passworddatabase__urls__substring__r__assume = { Passworddatabase__urls__mystring.__split_fields = { Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = (Passworddatabase__urls__mystring__T28s__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Id:85] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] [@GP_Sloc:mystring.adb:72:44:instantiated:passworddatabase.ads:13:4] (Passworddatabase__urls__mystring__T28s.range_check_(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:84] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] [@GP_Sloc:mystring.adb:72:44:instantiated:passworddatabase.ads:13:4] (Standard__integer.range_check_(((Passworddatabase__urls__substring__to.to__ - Passworddatabase__urls__substring__from.from) + (1 : int)))) )))) )))); Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str = (Temp_____aggregate_def_568.temp_____aggregate_def_568((32 : int))) } } in (
     (Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( passworddatabase__urls__substring__r__assume.Passworddatabase__urls__mystring.__split_fields ))))
   ;
    assume {  (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Passworddatabase__urls__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 75 0 0] (let temp___572 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__substring__from.from in (
   (let temp___573 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Passworddatabase__urls__substring__L_4__i.i.int__content <- ( temp___572 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at passworddatabase.ads:13 *)
    ;
    (if ((Boolean.andb((temp___572 <= Passworddatabase__urls__substring__L_4__i.i.int__content)) ((Passworddatabase__urls__substring__L_4__i.i.int__content <= temp___573)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___580 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Passworddatabase__urls__mystring.mystring
      ensures {[#"mystring.adb" 75 0 0] (result = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__substring__L_4__i.i.int__content in (
        ()))
        in () end ;
       (let temp___579 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Passworddatabase__urls__substring__L_4__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__urls__substring__j.j.int__content in (
         ()))
         in () end ;
        (let temp___578 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
        ensures {[#"mystring.adb" 75 0 0] (result = Passworddatabase__urls__substring__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:13 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at passworddatabase.ads:13 *)
         ;
         (let temp___inv_582 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Sloc:mystring.adb:76:46:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:90] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Sloc:mystring.adb:76:39:instantiated:passworddatabase.ads:13:4] [@GP_Id:89] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Passworddatabase__urls__substring__L_4__i.i.int__content - Passworddatabase__urls__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@GP_Sloc:mystring.adb:76:33:instantiated:passworddatabase.ads:13:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:passworddatabase.ads:13:4:VC_LOOP_INVARIANT] [@GP_Id:91] ( [@GP_Pretty_Ada:112402] [@GP_Sloc:mystring.adb:76:33:instantiated:passworddatabase.ads:13:4] (Passworddatabase__urls__substring__j.j.int__content = ((Passworddatabase__urls__substring__L_4__i.i.int__content - Passworddatabase__urls__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at passworddatabase.ads:13 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Passworddatabase__urls__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Passworddatabase__urls__substring__from.from <= Passworddatabase__urls__substring__to.to__) )) then (
           (Passworddatabase__urls__substring__L_4__T336s.dynamic_property Passworddatabase__urls__substring__from.from Passworddatabase__urls__substring__to.to__ Passworddatabase__urls__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content } True True True True) )/\({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = temp___580.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length) )) (( (Passworddatabase__urls__substring__from.from <= Passworddatabase__urls__substring__L_4__i.i.int__content) /\ (Passworddatabase__urls__substring__L_4__i.i.int__content <= Passworddatabase__urls__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:13 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:13 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 77 0 0] (let temp___577 [@mlw:proxy_symbol] [@introduced] = (let temp___576 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___576.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
            ()))
            in () end ;
           { ( temp___576 ) with Passworddatabase__urls__mystring.__split_fields = { ( temp___576.Passworddatabase__urls__mystring.__split_fields ) with Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str = (let temp___575 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
            (Array__Int__Standard__character.set({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Id:87] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:77:16:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_INDEX_CHECK] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__substring__j.j.int__content) /\ (Passworddatabase__urls__substring__j.j.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
            Passworddatabase__urls__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___574 [@mlw:proxy_symbol] [@introduced] = Passworddatabase__urls__substring__m.m.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
             (Array__Int__Standard__character.get(temp___574) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Id:86] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:passworddatabase.ads:13:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:77:28:instantiated:passworddatabase.ads:13:4] ( (Passworddatabase__urls__TmystringstrD1.first <= Passworddatabase__urls__substring__L_4__i.i.int__content) /\ (Passworddatabase__urls__substring__L_4__i.i.int__content <= Passworddatabase__urls__TmystringstrD1.last) ) )) };
             Passworddatabase__urls__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( temp___577.Passworddatabase__urls__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Passworddatabase__urls__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@GP_Id:88] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:78:17:instantiated:passworddatabase.ads:13:4] [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Passworddatabase__urls__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at passworddatabase.ads:13 *)
          ;
          (if ((Passworddatabase__urls__substring__L_4__i.i.int__content = temp___573)) then (
            raise Passworddatabase__urls__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Passworddatabase__urls__substring__L_4__i.i.int__content <- ( (Passworddatabase__urls__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_582 [@mlw:proxy_symbol] [@introduced] = (Passworddatabase__urls__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Sloc:mystring.adb:76:46:instantiated:passworddatabase.ads:13:4] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:90] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Sloc:mystring.adb:76:39:instantiated:passworddatabase.ads:13:4] [@GP_Id:89] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Passworddatabase__urls__substring__L_4__i.i.int__content - Passworddatabase__urls__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Passworddatabase__urls__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (passworddatabase__urls__substring__result.Passworddatabase__urls__mystring.mystring__content <- ( { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__substring__r.r__split_fields.Passworddatabase__urls__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Passworddatabase__urls__length___axiom.length(passworddatabase__urls__substring__result.Passworddatabase__urls__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.ads:28:51:instantiated:passworddatabase.ads:13:4] [@GP_Shape:pragargs__cmp__add] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:passworddatabase.ads:13:4:VC_OVERFLOW_CHECK] [@GP_Id:92] (Standard__integer.range_check_(((Passworddatabase__urls__substring__to.to__ - Passworddatabase__urls__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  passworddatabase__urls__substring__result.Passworddatabase__urls__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at passworddatabase.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__urls__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring
 use        Passworddatabase__urls__get_line__m as Passworddatabase__urls__get_line__m
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__urls__get_line__m___axiom as Passworddatabase__urls__get_line__m___axiom
 use        Passworddatabase__urls__mystringstr___axiom as Passworddatabase__urls__mystringstr___axiom
 use        Passworddatabase__urls__mystring___axiom as Passworddatabase__urls__mystring___axiom
 use        Passworddatabase__urls__TmystringstrD1___axiom as Passworddatabase__urls__TmystringstrD1___axiom
 use        Passworddatabase__urls__mystring__T28s___axiom as Passworddatabase__urls__mystring__T28s___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Passworddatabase__urls__mystring___axiom.dynamic_invariant { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at passworddatabase.ads:13 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:passworddatabase.ads:13:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Sloc:mystring.adb:85:44:instantiated:passworddatabase.ads:13:4] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Id:94] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Passworddatabase__urls__TmystringstrD1.first) (Passworddatabase__urls__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str) (Passworddatabase__urls__TmystringstrD1.first) (Passworddatabase__urls__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Passworddatabase__urls__mystring__T28s__rep.to_rep({ Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content }.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___589 [@mlw:proxy_symbol] [@introduced] = (let temp___588 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___588.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str in (
       ()))
       in () end ;
      { ( temp___588 ) with Passworddatabase__urls__mystring.__split_fields = { ( temp___588.Passworddatabase__urls__mystring.__split_fields ) with Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__str = (let temp___587 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___587))) ((Standard__string.first(temp___587))) (Passworddatabase__urls__TmystringstrD1.first))))
       } } )))
      in (
       (Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( temp___589.Passworddatabase__urls__mystring.__split_fields ))))
     ;
     (let temp___591 [@mlw:proxy_symbol] [@introduced] = (let temp___590 [@mlw:proxy_symbol] [@introduced] = { Passworddatabase__urls__mystring.__split_fields = Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___590.Passworddatabase__urls__mystring.__split_fields.Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length in (
       ()))
       in () end ;
      { ( temp___590 ) with Passworddatabase__urls__mystring.__split_fields = { ( temp___590.Passworddatabase__urls__mystring.__split_fields ) with Passworddatabase__urls__mystring.rec__passworddatabase__urls__mystring__length = (Passworddatabase__urls__mystring__T28s__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@GP_Sloc:mystring.adb:85:60:instantiated:passworddatabase.ads:13:4] [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:passworddatabase.ads:13:4:VC_RANGE_CHECK] [@GP_Id:95] (Passworddatabase__urls__mystring__T28s.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Passworddatabase__urls__get_line__m.m__split_fields.Passworddatabase__urls__mystring.__split_fields__content <- ( temp___591.Passworddatabase__urls__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Passworddatabase__database__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [@GP_Subp:passworddatabase.ads:18] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  ( () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__init__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__init__d as Passworddatabase__init__d
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__init__d___axiom as Passworddatabase__init__d___axiom

 let def [#"passworddatabase.ads" 20 0 0][@GP_Subp:passworddatabase.ads:20] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 20 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:20 *)
  ;
  [#"passworddatabase.ads" 20 0 0] assume { [#"passworddatabase.ads" 20 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__init__d.d.Passworddatabase__database.database__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:20 *)
  ;
  [#"passworddatabase.ads" 20 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:20 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "has_password_for" defined at passworddatabase.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__has_password_for__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__has_password_for__d as Passworddatabase__has_password_for__d
 use        Passworddatabase__has_password_for__u as Passworddatabase__has_password_for__u
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for__d___axiom as Passworddatabase__has_password_for__d___axiom
 use        Passworddatabase__has_password_for__u___axiom as Passworddatabase__has_password_for__u___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__has_password_for__result [@model_projected] [@name:Has_Password_For] [@model_trace:2567@result]  : bool__ref 
 
 let def [#"passworddatabase.ads" 22 0 0][@GP_Subp:passworddatabase.ads:22] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 22 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:22 *)
  ;
  [#"passworddatabase.ads" 22 0 0] assume { [#"passworddatabase.ads" 22 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__has_password_for__d.d True False True True) };
  [#"passworddatabase.ads" 22 0 0] assume { [#"passworddatabase.ads" 22 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__has_password_for__u.u True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:22 *)
  ;
  [#"passworddatabase.ads" 22 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:22 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get__3" defined at passworddatabase.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__get__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__get__3__d as Passworddatabase__get__3__d
 use        Passworddatabase__get__3__u as Passworddatabase__get__3__u
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__get__3__d___axiom as Passworddatabase__get__3__d___axiom
 use        Passworddatabase__get__3__u___axiom as Passworddatabase__get__3__u___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__get__3__result [@model_projected] [@name:Get] [@model_trace:2595@result]  : Passworddatabase__password.password__ref 
 
 let def [#"passworddatabase.ads" 24 0 0][@GP_Subp:passworddatabase.ads:24] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 24 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:24 *)
  ;
  [#"passworddatabase.ads" 24 0 0] assume { [#"passworddatabase.ads" 24 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__get__3__d.d True False True True) };
  [#"passworddatabase.ads" 24 0 0] assume { [#"passworddatabase.ads" 24 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__get__3__u.u True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:24 *)
  ;
  [#"passworddatabase.ads" 24 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__has_password_for___axiom.has_password_for(Passworddatabase__get__3__d.d) (Passworddatabase__get__3__u.u)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:24 *)
  ;
  [#"passworddatabase.ads" 24 0 0] assume { [#"passworddatabase.ads" 24 0 0] ( [@GP_Pretty_Ada:54600] ((epsilon temp___result_596 : bool.
   ( (temp___result_596 = (Passworddatabase__has_password_for.has_password_for Passworddatabase__get__3__d.d Passworddatabase__get__3__u.u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_596 Passworddatabase__get__3__d.d Passworddatabase__get__3__u.u) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "length__3" defined at passworddatabase.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__length__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__length__3__d as Passworddatabase__length__3__d
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__length__3__d___axiom as Passworddatabase__length__3__d___axiom

 val passworddatabase__length__3__result [@model_projected] [@name:Length] [@model_trace:2894@result]  : int__ref 
 
 let def [#"passworddatabase.ads" 45 0 0][@GP_Subp:passworddatabase.ads:45] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 45 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:45 *)
  ;
  [#"passworddatabase.ads" 45 0 0] assume { [#"passworddatabase.ads" 45 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__length__3__d.d True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:45 *)
  ;
  [#"passworddatabase.ads" 45 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:45 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put" defined at passworddatabase.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__put__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__put__d as Passworddatabase__put__d
 use        Passworddatabase__put__u as Passworddatabase__put__u
 use        Passworddatabase__put__p as Passworddatabase__put__p
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__put__d___axiom as Passworddatabase__put__d___axiom
 use        Passworddatabase__put__u___axiom as Passworddatabase__put__u___axiom
 use        Passworddatabase__put__p___axiom as Passworddatabase__put__p___axiom
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 let def [#"passworddatabase.ads" 27 0 0][@GP_Subp:passworddatabase.ads:27] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 27 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:27 *)
  ;
  [#"passworddatabase.ads" 27 0 0] assume { [#"passworddatabase.ads" 27 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__put__d.d.Passworddatabase__database.database__content True False True True) };
  [#"passworddatabase.ads" 27 0 0] assume { [#"passworddatabase.ads" 27 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__put__u.u True False True True) };
  [#"passworddatabase.ads" 27 0 0] assume { [#"passworddatabase.ads" 27 0 0] (Passworddatabase__password___axiom.dynamic_invariant Passworddatabase__put__p.p True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:27 *)
  ;
  [#"passworddatabase.ads" 27 0 0] begin ensures {true} let _ = (let _ = (Boolean.orb(((Passworddatabase__length__3___axiom.length__3(Passworddatabase__put__d.d.Passworddatabase__database.database__content)) < (1000 : int))) ((Passworddatabase__has_password_for___axiom.has_password_for(Passworddatabase__put__d.d.Passworddatabase__database.database__content) (Passworddatabase__put__u.u)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:27 *)
  ;
  [#"passworddatabase.ads" 27 0 0] assume { [#"passworddatabase.ads" 27 0 0] ( [@GP_Pretty_Ada:54625] ( ((epsilon temp___result_599 : int.
   ( (temp___result_599 = (Passworddatabase__length__3.length__3 Passworddatabase__put__d.d.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_599 Passworddatabase__put__d.d.Passworddatabase__database.database__content) )) < (1000 : int)) \/ ((epsilon temp___result_600 : bool.
   ( (temp___result_600 = (Passworddatabase__has_password_for.has_password_for Passworddatabase__put__d.d.Passworddatabase__database.database__content Passworddatabase__put__u.u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_600 Passworddatabase__put__d.d.Passworddatabase__database.database__content Passworddatabase__put__u.u) )) = True) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "remove" defined at passworddatabase.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__remove__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__remove__d as Passworddatabase__remove__d
 use        Passworddatabase__remove__u as Passworddatabase__remove__u
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__remove__d___axiom as Passworddatabase__remove__d___axiom
 use        Passworddatabase__remove__u___axiom as Passworddatabase__remove__u___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 let def [#"passworddatabase.ads" 30 0 0][@GP_Subp:passworddatabase.ads:30] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:30 *)
  ;
  [#"passworddatabase.ads" 30 0 0] assume { [#"passworddatabase.ads" 30 0 0] (Passworddatabase__database___axiom.dynamic_invariant Passworddatabase__remove__d.d.Passworddatabase__database.database__content True False True True) };
  [#"passworddatabase.ads" 30 0 0] assume { [#"passworddatabase.ads" 30 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__remove__u.u True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:30 *)
  ;
  [#"passworddatabase.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Passworddatabase__has_password_for___axiom.has_password_for(Passworddatabase__remove__d.d.Passworddatabase__database.database__content) (Passworddatabase__remove__u.u)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:30 *)
  ;
  [#"passworddatabase.ads" 30 0 0] assume { [#"passworddatabase.ads" 30 0 0] ( [@GP_Pretty_Ada:54644] ((epsilon temp___result_602 : bool.
   ( (temp___result_602 = (Passworddatabase__has_password_for.has_password_for Passworddatabase__remove__d.d.Passworddatabase__database.database__content Passworddatabase__remove__u.u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_602 Passworddatabase__remove__d.d.Passworddatabase__database.database__content Passworddatabase__remove__u.u) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string__s as Passworddatabase__from_string__s
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__from_string__s___axiom as Passworddatabase__from_string__s___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val passworddatabase__from_string__result [@name:From_String] [@model_projected] [@model_trace:2716@result]  : Passworddatabase__password.password__ref 
 
 let def [#"passworddatabase.ads" 33 0 0][@GP_Subp:passworddatabase.ads:33] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:33 *)
  ;
  [#"passworddatabase.ads" 33 0 0] assume { [#"passworddatabase.ads" 33 0 0] (Standard__string___axiom.dynamic_invariant Passworddatabase__from_string__s.s True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:33 *)
  ;
  [#"passworddatabase.ads" 33 0 0] begin ensures {true} let _ = (let _ = (([#"passworddatabase.ads" 34 0 0] ( [@GP_Sloc:passworddatabase.ads:34:14] [@vc:annotation] [@comment:     Pre => S'Length <= Max_Password_Length;              ^ passworddatabase.ads:34:14:VC_RANGE_CHECK] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:96] (Standard__integer.range_check_(( [#"passworddatabase.ads" 34 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__from_string__s.s)) ))) )) <= (100 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:33 *)
  ;
   assume {  ( [@GP_Pretty_Ada:54663] ((Standard__string.length Passworddatabase__from_string__s.s) <= (100 : int)) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__from_string__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2__s as Passworddatabase__from_string__2__s
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__from_string__2__s___axiom as Passworddatabase__from_string__2__s___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__from_string__2__result [@name:From_String] [@model_trace:2744@result] [@model_projected]  : Passworddatabase__url.url__ref 
 
 let def [#"passworddatabase.ads" 35 0 0][@GP_Subp:passworddatabase.ads:35] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 35 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:35 *)
  ;
  [#"passworddatabase.ads" 35 0 0] assume { [#"passworddatabase.ads" 35 0 0] (Standard__string___axiom.dynamic_invariant Passworddatabase__from_string__2__s.s True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:35 *)
  ;
  [#"passworddatabase.ads" 35 0 0] begin ensures {true} let _ = (let _ = (([#"passworddatabase.ads" 36 0 0] ( [@comment:     Pre => S'Length <= Max_URL_Length;              ^ passworddatabase.ads:36:14:VC_RANGE_CHECK] [@GP_Sloc:passworddatabase.ads:36:14] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:97] (Standard__integer.range_check_(( [#"passworddatabase.ads" 36 0 0] begin ensures {true} let _ = (let _ = Passworddatabase__from_string__2__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Passworddatabase__from_string__2__s.s)) ))) )) <= (1024 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:35 *)
  ;
   assume {  ( [@GP_Pretty_Ada:54682] ((Standard__string.length Passworddatabase__from_string__2__s.s) <= (1024 : int)) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at passworddatabase.ads:37, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__to_string__p as Passworddatabase__to_string__p
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__to_string__p___axiom as Passworddatabase__to_string__p___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val passworddatabase__to_string__result [@name:To_String] [@model_projected] [@model_trace:2772@result]  : Standard__string.string__ref 
 
 let def [#"passworddatabase.ads" 37 0 0][@GP_Subp:passworddatabase.ads:37] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 37 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:37 *)
  ;
  [#"passworddatabase.ads" 37 0 0] assume { [#"passworddatabase.ads" 37 0 0] (Passworddatabase__password___axiom.dynamic_invariant Passworddatabase__to_string__p.p True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:37 *)
  ;
  [#"passworddatabase.ads" 37 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:37 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string__2" defined at passworddatabase.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__to_string__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__to_string__2__u as Passworddatabase__to_string__2__u
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__to_string__2__u___axiom as Passworddatabase__to_string__2__u___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__to_string__2__result [@name:To_String] [@model_projected] [@model_trace:2791@result]  : Standard__string.string__ref 
 
 let def [#"passworddatabase.ads" 38 0 0][@GP_Subp:passworddatabase.ads:38] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 38 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:38 *)
  ;
  [#"passworddatabase.ads" 38 0 0] assume { [#"passworddatabase.ads" 38 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__to_string__2__u.u True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:38 *)
  ;
  [#"passworddatabase.ads" 38 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:38 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less__2" defined at passworddatabase.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__less__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__less__2__u1 as Passworddatabase__less__2__u1
 use        Passworddatabase__less__2__u2 as Passworddatabase__less__2__u2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__less__2__u1___axiom as Passworddatabase__less__2__u1___axiom
 use        Passworddatabase__less__2__u2___axiom as Passworddatabase__less__2__u2___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__less__2__result [@model_trace:2810@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"passworddatabase.ads" 40 0 0][@GP_Subp:passworddatabase.ads:40] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 40 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:40 *)
  ;
  [#"passworddatabase.ads" 40 0 0] assume { [#"passworddatabase.ads" 40 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__less__2__u1.u1 True False True True) };
  [#"passworddatabase.ads" 40 0 0] assume { [#"passworddatabase.ads" 40 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__less__2__u2.u2 True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:40 *)
  ;
  [#"passworddatabase.ads" 40 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:40 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at passworddatabase.ads:41, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__equal__u1 as Passworddatabase__equal__u1
 use        Passworddatabase__equal__u2 as Passworddatabase__equal__u2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Passworddatabase__equal__u1___axiom as Passworddatabase__equal__u1___axiom
 use        Passworddatabase__equal__u2___axiom as Passworddatabase__equal__u2___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val passworddatabase__equal__result [@model_trace:2838@result] [@name:Equal] [@model_projected]  : bool__ref 
 
 let def [#"passworddatabase.ads" 41 0 0][@GP_Subp:passworddatabase.ads:41] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 41 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:41 *)
  ;
  [#"passworddatabase.ads" 41 0 0] assume { [#"passworddatabase.ads" 41 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__equal__u1.u1 True False True True) };
  [#"passworddatabase.ads" 41 0 0] assume { [#"passworddatabase.ads" 41 0 0] (Passworddatabase__url___axiom.dynamic_invariant Passworddatabase__equal__u2.u2 True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:41 *)
  ;
  [#"passworddatabase.ads" 41 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:41 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal__2" defined at passworddatabase.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passworddatabase__equal__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__equal__2__p1 as Passworddatabase__equal__2__p1
 use        Passworddatabase__equal__2__p2 as Passworddatabase__equal__2__p2
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__equal__2__p1___axiom as Passworddatabase__equal__2__p1___axiom
 use        Passworddatabase__equal__2__p2___axiom as Passworddatabase__equal__2__p2___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val passworddatabase__equal__2__result [@name:Equal] [@model_projected] [@model_trace:2866@result]  : bool__ref 
 
 let def [#"passworddatabase.ads" 43 0 0][@GP_Subp:passworddatabase.ads:43] 
   (__void_param : unit)
  requires { [#"passworddatabase.ads" 43 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passworddatabase.ads:43 *)
  ;
  [#"passworddatabase.ads" 43 0 0] assume { [#"passworddatabase.ads" 43 0 0] (Passworddatabase__password___axiom.dynamic_invariant Passworddatabase__equal__2__p1.p1 True False True True) };
  [#"passworddatabase.ads" 43 0 0] assume { [#"passworddatabase.ads" 43 0 0] (Passworddatabase__password___axiom.dynamic_invariant Passworddatabase__equal__2__p2.p2 True False True True) };
  () (* Check for RTE in the Pre of the subprogram passworddatabase.ads:43 *)
  ;
  [#"passworddatabase.ads" 43 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passworddatabase.ads:43 *)
   )
end
