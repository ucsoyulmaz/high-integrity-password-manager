(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "root_controlled" defined at s-finroo.ads:40, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module System__finalization_root__root_controlled__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type __split_fields =
  { rec__ext__ : Main.__private }
 
 function __split_fields_rec__ext____projection 
   (a : __split_fields) : Main.__private =
  a.rec__ext__
 
 meta "model_projection" function __split_fields_rec__ext____projection
 
 meta "inline:no" function __split_fields_rec__ext____projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields; attr__tag : int }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function __rep_attr__tag__projection 
   (a : __rep) : int =
  a.attr__tag
 
 meta "model_projection" function __rep_attr__tag__projection
 
 meta "inline:no" function __rep_attr__tag__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (true) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }
 
 val function __dispatch_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "root_controlled" defined at s-finroo.ads:40, created in Gnat2Why.Types.Translate_Type *)
module System__finalization_root__root_controlled
 use export System__finalization_root__root_controlled__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type root_controlled =
  __rep
 
 val constant __tag 
   : int

 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : root_controlled) (b : root_controlled) : bool
 
 val constant dummy 
   : root_controlled

 
 type root_controlled__ref =
  { mutable root_controlled__content : root_controlled }
 
 function root_controlled__ref_root_controlled__content__projection 
   (a : root_controlled__ref) : root_controlled =
  a.root_controlled__content
 
 meta "model_projection" function root_controlled__ref_root_controlled__content__projection
 
 meta "inline:no" function root_controlled__ref_root_controlled__content__projection
 
 val root_controlled__havoc 
   (x : root_controlled__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "unbounded_string" defined at a-strunb.ads:87, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Ada__strings__unbounded__unbounded_string__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "unbounded_string" defined at a-strunb.ads:87, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__unbounded__unbounded_string
 use export Ada__strings__unbounded__unbounded_string__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type unbounded_string =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : unbounded_string) (b : unbounded_string) : bool
 
 val constant dummy 
   : unbounded_string

 
 type unbounded_string__ref =
  { mutable unbounded_string__content : unbounded_string }
 
 function unbounded_string__ref_unbounded_string__content__projection 
   (a : unbounded_string__ref) : unbounded_string =
  a.unbounded_string__content
 
 meta "model_projection" function unbounded_string__ref_unbounded_string__content__projection
 
 meta "inline:no" function unbounded_string__ref_unbounded_string__content__projection
 
 val unbounded_string__havoc 
   (x : unbounded_string__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_unbounded_string" defined at a-strunb.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__null_unbounded_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant null_unbounded_string [#"a-strunb.ads" 90 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "null_unbounded_string" defined at a-strunb.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__null_unbounded_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__length__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 92 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:92, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__length__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at a-strunb.ads:92, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function length 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for axiomatizing type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 63 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 62 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 129 0 0][@name:Default_Priority] [@model_trace:15314] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 63 63 >
 
 val constant first 
   : int
  ensures { result =  (63 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@model_trace:113379] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13b" defined at mystring.ads:38 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13b =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13b" defined at mystring.ads:38 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b__rep
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__mystring__T13b.t13b) : int =
  (Main__lines__mystring__T13b.t13b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__mystring__T13b.t13b, 
 predicate in_range = Main__lines__mystring__T13b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__TmystringstrD1.tmystringstrD1) : int =
  (Main__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Main__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:84, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__mystringstr as Main__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__main__lines__mystring__length [@name:Length] [@model_trace:.113288] : Main__lines__mystring__T13b.t13b; rec__main__lines__mystring__str [@model_trace:.113303] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__main__lines__mystring__length__projection [@name:Length] [@model_trace:.113288] 
   (a : __split_fields) : Main__lines__mystring__T13b.t13b =
  a.rec__main__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
 
 function __split_fields_rec__main__lines__mystring__str__projection [@model_trace:.113303] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__main__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate main__lines__mystring__length__pred 
   (a : __rep) =
  true
 val main__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__length__pred (a : __rep) }
 
 val rec__main__lines__mystring__length_ 
   (a : __rep) : Main__lines__mystring__T13b.t13b
  requires {  (main__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__length) }
 
 predicate main__lines__mystring__str__pred 
   (a : __rep) =
  true
 val main__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__str__pred (a : __rep) }
 
 val rec__main__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (main__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__lines__mystring__T13b__rep.to_rep a.__split_fields.rec__main__lines__mystring__length) = (Main__lines__mystring__T13b__rep.to_rep b.__split_fields.rec__main__lines__mystring__length)) /\ (Main__lines__mystringstr.bool_eq a.__split_fields.rec__main__lines__mystring__str b.__split_fields.rec__main__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
 use export Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant main__lines__mystring__length__first__bit 
   : int

 
 val constant main__lines__mystring__length__last__bit 
   : int

 
 val constant main__lines__mystring__length__position 
   : int

 
 axiom main__lines__mystring__length__first__bit_axiom :
  ((main__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__length__last__bit_axiom :
  ((main__lines__mystring__length__last__bit ) > (main__lines__mystring__length__first__bit ))
 
 axiom main__lines__mystring__length__position_axiom :
  ((main__lines__mystring__length__position ) >= (0 : int))
 
 val constant main__lines__mystring__str__first__bit 
   : int

 
 val constant main__lines__mystring__str__last__bit 
   : int

 
 val constant main__lines__mystring__str__position 
   : int

 
 axiom main__lines__mystring__str__first__bit_axiom :
  ((main__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__str__last__bit_axiom :
  ((main__lines__mystring__str__last__bit ) > (main__lines__mystring__str__first__bit ))
 
 axiom main__lines__mystring__str__position_axiom :
  ((main__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_trace:112987] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_trace:113138] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function length 
   (m : Main__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_157 : int) (m : Main__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_158 : Standard__string.string) (m : Main__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_projected] [@name:S] [@model_trace:113021] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_159 : Main__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_trace:113040] [@model_projected] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:113049] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_160 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_trace:113104] [@model_projected] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_projected] [@name:M2] [@model_trace:113113] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10b" defined at mystring.ads:21 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_projected] [@name:M] [@model_trace:113224] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@model_trace:113233] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function get 
   (m : Main__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_161 : int) (m : Main__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_162 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_projected] [@model_trace:113180] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:113189] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@model_trace:113198] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_163 : Main__lines__mystring.mystring) (m : Main__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T50b" defined at mystring.adb:8 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t50b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t50b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t50b__ref =
  { mutable t50b__content : t50b }
 
 function t50b__ref_t50b__content__projection 
   (a : t50b__ref) : t50b =
  a.t50b__content
 
 meta "model_projection" function t50b__ref_t50b__content__projection
 
 meta "inline:no" function t50b__ref_t50b__content__projection
 
 val t50b__havoc 
   (x : t50b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T51b" defined at mystring.adb:8 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T51b
 use export Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t51b =
  tmystringstrB
 
 type t51b__ref =
  { mutable t51b__content : t51b }
 
 function t51b__ref_t51b__content__projection 
   (a : t51b__ref) : t51b =
  a.t51b__content
 
 meta "model_projection" function t51b__ref_t51b__content__projection
 
 meta "inline:no" function t51b__ref_t51b__content__projection
 
 val t51b__havoc 
   (x : t51b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS53bP1" defined at mystring.adb:12 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__TS53bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS53bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS53bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS53bP1__ref =
  { mutable tS53bP1__content : tS53bP1 }
 
 function tS53bP1__ref_tS53bP1__content__projection 
   (a : tS53bP1__ref) : tS53bP1 =
  a.tS53bP1__content
 
 meta "model_projection" function tS53bP1__ref_tS53bP1__content__projection
 
 meta "inline:no" function tS53bP1__ref_tS53bP1__content__projection
 
 val tS53bP1__havoc 
   (x : tS53bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S53b" defined at mystring.adb:12 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__S53b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s53b =
  string
 
 type s53b__ref =
  { mutable s53b__content : s53b }
 
 function s53b__ref_s53b__content__projection 
   (a : s53b__ref) : s53b =
  a.s53b__content
 
 meta "model_projection" function s53b__ref_s53b__content__projection
 
 meta "inline:no" function s53b__ref_s53b__content__projection
 
 val s53b__havoc 
   (x : s53b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T54b" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t54b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t54b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t54b__ref =
  { mutable t54b__content : t54b }
 
 function t54b__ref_t54b__content__projection 
   (a : t54b__ref) : t54b =
  a.t54b__content
 
 meta "model_projection" function t54b__ref_t54b__content__projection
 
 meta "inline:no" function t54b__ref_t54b__content__projection
 
 val t54b__havoc 
   (x : t54b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T54b" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T54b__rep
 use        Main__lines__from_string__T54b as Main__lines__from_string__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__from_string__T54b.t54b) : int =
  (Main__lines__from_string__T54b.t54b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__from_string__T54b.t54b, 
 predicate in_range = Main__lines__from_string__T54b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T55b" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T56b" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__L_1__T56b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t56b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t56b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t56b__ref =
  { mutable t56b__content : t56b }
 
 function t56b__ref_t56b__content__projection 
   (a : t56b__ref) : t56b =
  a.t56b__content
 
 meta "model_projection" function t56b__ref_t56b__content__projection
 
 meta "inline:no" function t56b__ref_t56b__content__projection
 
 val t56b__havoc 
   (x : t56b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T67b" defined at mystring.adb:60 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L66b__T67b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t67b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t67b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t67b__ref =
  { mutable t67b__content : t67b }
 
 function t67b__ref_t67b__content__projection 
   (a : t67b__ref) : t67b =
  a.t67b__content
 
 meta "model_projection" function t67b__ref_t67b__content__projection
 
 meta "inline:no" function t67b__ref_t67b__content__projection
 
 val t67b__havoc 
   (x : t67b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T65b" defined at mystring.adb:60 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L64b__T65b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t65b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t65b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t65b__ref =
  { mutable t65b__content : t65b }
 
 function t65b__ref_t65b__content__projection 
   (a : t65b__ref) : t65b =
  a.t65b__content
 
 meta "model_projection" function t65b__ref_t65b__content__projection
 
 meta "inline:no" function t65b__ref_t65b__content__projection
 
 val t65b__havoc 
   (x : t65b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T70b" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T70b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t70b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t70b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t70b__ref =
  { mutable t70b__content : t70b }
 
 function t70b__ref_t70b__content__projection 
   (a : t70b__ref) : t70b =
  a.t70b__content
 
 meta "model_projection" function t70b__ref_t70b__content__projection
 
 meta "inline:no" function t70b__ref_t70b__content__projection
 
 val t70b__havoc 
   (x : t70b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T70b" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T70b__rep
 use        Main__lines__substring__T70b as Main__lines__substring__T70b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__substring__T70b.t70b) : int =
  (Main__lines__substring__T70b.t70b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__substring__T70b.t70b, 
 predicate in_range = Main__lines__substring__T70b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T71b" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T71b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T72b" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T72b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t72b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t72b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t72b__ref =
  { mutable t72b__content : t72b }
 
 function t72b__ref_t72b__content__projection 
   (a : t72b__ref) : t72b =
  a.t72b__content
 
 meta "model_projection" function t72b__ref_t72b__content__projection
 
 meta "inline:no" function t72b__ref_t72b__content__projection
 
 val t72b__havoc 
   (x : t72b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "database" defined at passworddatabase.ads:18, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__database
 use export Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "initialpin" defined at passwordmanager.ads:16 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__init_program__initialpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant initialpin [#"passwordmanager.ads" 16 0 0][@model_projected] [@model_trace:113897] [@name:InitialPin] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "initialpin" defined at passwordmanager.ads:16 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__init_program__initialpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T24b" defined at passwordmanager.ads:18 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__init_program__L23b__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t24b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t24b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24b__ref =
  { mutable t24b__content : t24b }
 
 function t24b__ref_t24b__content__projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref_t24b__content__projection
 
 meta "inline:no" function t24b__ref_t24b__content__projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for defining the constant "pinvaluegiven" defined at passwordmanager.ads:23 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__is_pin_correct__pinvaluegiven
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pinvaluegiven [#"passwordmanager.ads" 23 0 0][@model_trace:113952] [@name:PINValueGiven] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pinvaluegiven" defined at passwordmanager.ads:23 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__is_pin_correct__pinvaluegiven___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T26b" defined at passwordmanager.ads:25 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__is_pin_correct__L25b__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t26b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t26b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26b__ref =
  { mutable t26b__content : t26b }
 
 function t26b__ref_t26b__content__projection 
   (a : t26b__ref) : t26b =
  a.t26b__content
 
 meta "model_projection" function t26b__ref_t26b__content__projection
 
 meta "inline:no" function t26b__ref_t26b__content__projection
 
 val t26b__havoc 
   (x : t26b__ref) : unit
  writes {x}

end

(* Module for defining the constant "pinvaluegiven" defined at passwordmanager.ads:30 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__update_pin__pinvaluegiven
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pinvaluegiven [#"passwordmanager.ads" 30 0 0][@name:PINValueGiven] [@model_projected] [@model_trace:114008] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pinvaluegiven" defined at passwordmanager.ads:30 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__update_pin__pinvaluegiven___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T28b" defined at passwordmanager.ads:32 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__update_pin__L27b__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t28b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t28b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t28b__ref =
  { mutable t28b__content : t28b }
 
 function t28b__ref_t28b__content__projection 
   (a : t28b__ref) : t28b =
  a.t28b__content
 
 meta "model_projection" function t28b__ref_t28b__content__projection
 
 meta "inline:no" function t28b__ref_t28b__content__projection
 
 val t28b__havoc 
   (x : t28b__ref) : unit
  writes {x}

end

(* Module for defining the constant "u1" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__put_password__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant u1 [#"passwordmanager.ads" 37 0 0][@model_projected] [@model_trace:114096] [@name:U1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__put_password__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "p1" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__put_password__p1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant p1 [#"passwordmanager.ads" 37 0 0][@model_projected] [@model_trace:114105] [@name:P1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p1" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__put_password__p1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcount_typeB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcount_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcount_typeB__ref =
  { mutable tcount_typeB__content : tcount_typeB }
 
 function tcount_typeB__ref_tcount_typeB__content__projection 
   (a : tcount_typeB__ref) : tcount_typeB =
  a.tcount_typeB__content
 
 meta "model_projection" function tcount_typeB__ref_tcount_typeB__content__projection
 
 meta "inline:no" function tcount_typeB__ref_tcount_typeB__content__projection
 
 val tcount_typeB__havoc 
   (x : tcount_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB__rep
 use        Ada__containers__Tcount_typeB as Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__Tcount_typeB.tcount_typeB) : int =
  (Ada__containers__Tcount_typeB.tcount_typeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__Tcount_typeB.tcount_typeB, 
 predicate in_range = Ada__containers__Tcount_typeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count_type =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count_type__ref =
  { mutable count_type__content : count_type }
 
 function count_type__ref_count_type__content__projection 
   (a : count_type__ref) : count_type =
  a.count_type__content
 
 meta "model_projection" function count_type__ref_count_type__content__projection
 
 meta "inline:no" function count_type__ref_count_type__content__projection
 
 val count_type__havoc 
   (x : count_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type__rep
 use        Ada__containers__count_type as Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__count_type.count_type) : int =
  (Ada__containers__count_type.count_type'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__count_type.count_type, 
 predicate in_range = Ada__containers__count_type.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "d" defined at passworddatabase.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__length__3__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 45 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__length__3__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length__3" defined at passworddatabase.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__length__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val function length__3 
   (d : Passworddatabase__database.database) : int
 
 val predicate length__3__function_guard 
   (temp___result_165 : int) (d : Passworddatabase__database.database)

end

(* Module for defining the constant "max_entries" defined at passworddatabase.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_entries
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_entries [#"passworddatabase.ads" 10 0 0][@model_trace:3458] [@name:Max_Entries] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t28s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t28s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t28s__ref =
  { mutable t28s__content : t28s }
 
 function t28s__ref_t28s__content__projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref_t28s__content__projection
 
 meta "inline:no" function t28s__ref_t28s__content__projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__mystring__T28s.t28s) : int =
  (Passworddatabase__urls__mystring__T28s.t28s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__mystring__T28s.t28s, 
 predicate in_range = Passworddatabase__urls__mystring__T28s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__2__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__urls__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__urls__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__urls__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__2__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystringstr as Passworddatabase__urls__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__urls__mystring__length [@name:Length] [@model_trace:.73930] : Passworddatabase__urls__mystring__T28s.t28s; rec__passworddatabase__urls__mystring__str [@name:Str] [@model_trace:.73945] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__urls__mystring__length__projection [@name:Length] [@model_trace:.73930] 
   (a : __split_fields) : Passworddatabase__urls__mystring__T28s.t28s =
  a.rec__passworddatabase__urls__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__urls__mystring__str__projection [@name:Str] [@model_trace:.73945] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__urls__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__urls__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__length_ 
   (a : __rep) : Passworddatabase__urls__mystring__T28s.t28s
  requires {  (passworddatabase__urls__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__length) }
 
 predicate passworddatabase__urls__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__urls__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__urls__mystring__T28s__rep.to_rep a.__split_fields.rec__passworddatabase__urls__mystring__length) = (Passworddatabase__urls__mystring__T28s__rep.to_rep b.__split_fields.rec__passworddatabase__urls__mystring__length)) /\ (Passworddatabase__urls__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__urls__mystring__str b.__split_fields.rec__passworddatabase__urls__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__2__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__2__projection
 
 meta "inline:no" function mystring__ref_mystring__content__2__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__url
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type url =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : url) (b : url) : bool
 
 val constant dummy 
   : url

 
 type url__ref =
  { mutable url__content : url }
 
 function url__ref_url__content__projection 
   (a : url__ref) : url =
  a.url__content
 
 meta "model_projection" function url__ref_url__content__projection
 
 meta "inline:no" function url__ref_url__content__projection
 
 val url__havoc 
   (x : url__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at passworddatabase.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 35 0 0][@model_trace:3732] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_url_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_url_length [#"passworddatabase.ads" 9 0 0][@model_trace:3448] [@name:Max_URL_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for possibly declaring a logic function for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url

 val function from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
 
 val predicate from_string__2__function_guard 
   (temp___result_166 : Passworddatabase__url.url) (s : Standard__string.string)

end

(* Module for defining the constant "d" defined at passworddatabase.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 22 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u" defined at passworddatabase.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 22 0 0][@model_trace:3564] [@model_projected] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has_password_for" defined at passworddatabase.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__has_password_for
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url

 val function has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
 
 val predicate has_password_for__function_guard 
   (temp___result_167 : bool) (d : Passworddatabase__database.database) (u : Passworddatabase__url.url)

end

(* Module for defining the constant "u1" defined at passwordmanager.ads:56 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__get_password__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant u1 [#"passwordmanager.ads" 56 0 0][@model_trace:114140] [@model_projected] [@name:U1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passwordmanager.ads:56 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__get_password__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u1" defined at passwordmanager.ads:60 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__remove_password__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant u1 [#"passwordmanager.ads" 60 0 0][@model_projected] [@name:U1] [@model_trace:114176] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passwordmanager.ads:60 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__remove_password__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_db_size" defined at passwordmanager.ads:63 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__get_db_size
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function get_db_size 
   (__void_param : unit) : int
 
 val predicate get_db_size__function_guard 
   (temp___result_169 : int) (__void_param : unit)

end

(* Module for defining the constant "u1" defined at passwordmanager.ads:67 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Constant *)
module Main__pm__is_website_registered_already__u1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant u1 [#"passwordmanager.ads" 67 0 0][@model_trace:114239] [@model_projected] [@name:U1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u1" defined at passwordmanager.ads:67 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__is_website_registered_already__u1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS74bP1" defined at passwordmanager.adb:5 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__init_program__TS74bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS74bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS74bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS74bP1__ref =
  { mutable tS74bP1__content : tS74bP1 }
 
 function tS74bP1__ref_tS74bP1__content__projection 
   (a : tS74bP1__ref) : tS74bP1 =
  a.tS74bP1__content
 
 meta "model_projection" function tS74bP1__ref_tS74bP1__content__projection
 
 meta "inline:no" function tS74bP1__ref_tS74bP1__content__projection
 
 val tS74bP1__havoc 
   (x : tS74bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S74b" defined at passwordmanager.adb:5 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__init_program__S74b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s74b =
  string
 
 type s74b__ref =
  { mutable s74b__content : s74b }
 
 function s74b__ref_s74b__content__projection 
   (a : s74b__ref) : s74b =
  a.s74b__content
 
 meta "model_projection" function s74b__ref_s74b__content__projection
 
 meta "inline:no" function s74b__ref_s74b__content__projection
 
 val s74b__havoc 
   (x : s74b__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_trace:19608] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_172 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "TS75bP1" defined at passwordmanager.adb:14 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__is_pin_correct__TS75bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS75bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS75bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS75bP1__ref =
  { mutable tS75bP1__content : tS75bP1 }
 
 function tS75bP1__ref_tS75bP1__content__projection 
   (a : tS75bP1__ref) : tS75bP1 =
  a.tS75bP1__content
 
 meta "model_projection" function tS75bP1__ref_tS75bP1__content__projection
 
 meta "inline:no" function tS75bP1__ref_tS75bP1__content__projection
 
 val tS75bP1__havoc 
   (x : tS75bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S75b" defined at passwordmanager.adb:14 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__is_pin_correct__S75b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s75b =
  string
 
 type s75b__ref =
  { mutable s75b__content : s75b }
 
 function s75b__ref_s75b__content__projection 
   (a : s75b__ref) : s75b =
  a.s75b__content
 
 meta "model_projection" function s75b__ref_s75b__content__projection
 
 meta "inline:no" function s75b__ref_s75b__content__projection
 
 val s75b__havoc 
   (x : s75b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS78bP1" defined at passwordmanager.adb:27 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__update_pin__TS78bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS78bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS78bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS78bP1__ref =
  { mutable tS78bP1__content : tS78bP1 }
 
 function tS78bP1__ref_tS78bP1__content__projection 
   (a : tS78bP1__ref) : tS78bP1 =
  a.tS78bP1__content
 
 meta "model_projection" function tS78bP1__ref_tS78bP1__content__projection
 
 meta "inline:no" function tS78bP1__ref_tS78bP1__content__projection
 
 val tS78bP1__havoc 
   (x : tS78bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S78b" defined at passwordmanager.adb:27 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__update_pin__S78b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s78b =
  string
 
 type s78b__ref =
  { mutable s78b__content : s78b }
 
 function s78b__ref_s78b__content__projection 
   (a : s78b__ref) : s78b =
  a.s78b__content
 
 meta "model_projection" function s78b__ref_s78b__content__projection
 
 meta "inline:no" function s78b__ref_s78b__content__projection
 
 val s78b__havoc 
   (x : s78b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS80bP1" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__put_password__TS80bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS80bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS80bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS80bP1__ref =
  { mutable tS80bP1__content : tS80bP1 }
 
 function tS80bP1__ref_tS80bP1__content__projection 
   (a : tS80bP1__ref) : tS80bP1 =
  a.tS80bP1__content
 
 meta "model_projection" function tS80bP1__ref_tS80bP1__content__projection
 
 meta "inline:no" function tS80bP1__ref_tS80bP1__content__projection
 
 val tS80bP1__havoc 
   (x : tS80bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S80b" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__put_password__S80b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s80b =
  string
 
 type s80b__ref =
  { mutable s80b__content : s80b }
 
 function s80b__ref_s80b__content__projection 
   (a : s80b__ref) : s80b =
  a.s80b__content
 
 meta "model_projection" function s80b__ref_s80b__content__projection
 
 meta "inline:no" function s80b__ref_s80b__content__projection
 
 val s80b__havoc 
   (x : s80b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS79bP1" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__put_password__TS79bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS79bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS79bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS79bP1__ref =
  { mutable tS79bP1__content : tS79bP1 }
 
 function tS79bP1__ref_tS79bP1__content__projection 
   (a : tS79bP1__ref) : tS79bP1 =
  a.tS79bP1__content
 
 meta "model_projection" function tS79bP1__ref_tS79bP1__content__projection
 
 meta "inline:no" function tS79bP1__ref_tS79bP1__content__projection
 
 val tS79bP1__havoc 
   (x : tS79bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S79b" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__put_password__S79b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s79b =
  string
 
 type s79b__ref =
  { mutable s79b__content : s79b }
 
 function s79b__ref_s79b__content__projection 
   (a : s79b__ref) : s79b =
  a.s79b__content
 
 meta "model_projection" function s79b__ref_s79b__content__projection
 
 meta "inline:no" function s79b__ref_s79b__content__projection
 
 val s79b__havoc 
   (x : s79b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__mystring__T13s.t13s) : int =
  (Passworddatabase__passwords__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__mystring__T13s.t13s, 
 predicate in_range = Passworddatabase__passwords__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__3__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__3__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__3__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrD1__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__passwords__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__passwords__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__passwords__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__passwords__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__passwords__TmystringstrD1 as Passworddatabase__passwords__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__passwords__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__3__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__3__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__3__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring__T13s as Passworddatabase__passwords__mystring__T13s
 use        Passworddatabase__passwords__mystring__T13s__rep as Passworddatabase__passwords__mystring__T13s__rep
 use        Passworddatabase__passwords__mystringstr as Passworddatabase__passwords__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__passwords__mystring__length [@model_trace:.73048] [@name:Length] : Passworddatabase__passwords__mystring__T13s.t13s; rec__passworddatabase__passwords__mystring__str [@name:Str] [@model_trace:.73063] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__passwords__mystring__length__projection [@model_trace:.73048] [@name:Length] 
   (a : __split_fields) : Passworddatabase__passwords__mystring__T13s.t13s =
  a.rec__passworddatabase__passwords__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__passwords__mystring__str__projection [@name:Str] [@model_trace:.73063] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__passwords__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__passwords__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__passwords__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__length_ 
   (a : __rep) : Passworddatabase__passwords__mystring__T13s.t13s
  requires {  (passworddatabase__passwords__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__length) }
 
 predicate passworddatabase__passwords__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__passwords__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__passwords__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__passwords__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__passwords__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__passwords__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__passwords__mystring__T13s__rep.to_rep a.__split_fields.rec__passworddatabase__passwords__mystring__length) = (Passworddatabase__passwords__mystring__T13s__rep.to_rep b.__split_fields.rec__passworddatabase__passwords__mystring__length)) /\ (Passworddatabase__passwords__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__passwords__mystring__str b.__split_fields.rec__passworddatabase__passwords__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__passwords__mystring
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__3__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__3__projection
 
 meta "inline:no" function mystring__ref_mystring__content__3__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__password
 use export Passworddatabase__passwords__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type password =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__length__position 
   : int

 
 axiom passworddatabase__passwords__mystring__length__first__bit_axiom :
  ((passworddatabase__passwords__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__length__last__bit_axiom :
  ((passworddatabase__passwords__mystring__length__last__bit ) > (passworddatabase__passwords__mystring__length__first__bit ))
 
 axiom passworddatabase__passwords__mystring__length__position_axiom :
  ((passworddatabase__passwords__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__passwords__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__passwords__mystring__str__position 
   : int

 
 axiom passworddatabase__passwords__mystring__str__first__bit_axiom :
  ((passworddatabase__passwords__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__passwords__mystring__str__last__bit_axiom :
  ((passworddatabase__passwords__mystring__str__last__bit ) > (passworddatabase__passwords__mystring__str__first__bit ))
 
 axiom passworddatabase__passwords__mystring__str__position_axiom :
  ((passworddatabase__passwords__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : password) (b : password) : bool
 
 val constant dummy 
   : password

 
 type password__ref =
  { mutable password__content : password }
 
 function password__ref_password__content__projection 
   (a : password__ref) : password =
  a.password__content
 
 meta "model_projection" function password__ref_password__content__projection
 
 meta "inline:no" function password__ref_password__content__projection
 
 val password__havoc 
   (x : password__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at passworddatabase.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 33 0 0][@model_projected] [@name:S] [@model_trace:3704] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_password_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_password_length [#"passworddatabase.ads" 8 0 0][@name:Max_Password_Length] [@model_trace:3438] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for possibly declaring a logic function for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password

 val function from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
 
 val predicate from_string__function_guard 
   (temp___result_173 : Passworddatabase__password.password) (s : Standard__string.string)

end

(* Module for defining the constant "u" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__put__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 27 0 0][@model_projected] [@name:U] [@model_trace:3628] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "p" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__put__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p [#"passworddatabase.ads" 27 0 0][@model_projected] [@model_trace:3637] [@name:P] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS81bP1" defined at passwordmanager.adb:47 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__get_password__TS81bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS81bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS81bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS81bP1__ref =
  { mutable tS81bP1__content : tS81bP1 }
 
 function tS81bP1__ref_tS81bP1__content__projection 
   (a : tS81bP1__ref) : tS81bP1 =
  a.tS81bP1__content
 
 meta "model_projection" function tS81bP1__ref_tS81bP1__content__projection
 
 meta "inline:no" function tS81bP1__ref_tS81bP1__content__projection
 
 val tS81bP1__havoc 
   (x : tS81bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S81b" defined at passwordmanager.adb:47 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__get_password__S81b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s81b =
  string
 
 type s81b__ref =
  { mutable s81b__content : s81b }
 
 function s81b__ref_s81b__content__projection 
   (a : s81b__ref) : s81b =
  a.s81b__content
 
 meta "model_projection" function s81b__ref_s81b__content__projection
 
 meta "inline:no" function s81b__ref_s81b__content__projection
 
 val s81b__havoc 
   (x : s81b__ref) : unit
  writes {x}

end

(* Module for defining the constant "d" defined at passworddatabase.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__get__3__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 24 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__get__3__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u" defined at passworddatabase.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__get__3__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 24 0 0][@model_projected] [@model_trace:3592] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__get__3__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__3" defined at passworddatabase.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__get__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__password as Passworddatabase__password

 val function get__3 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : Passworddatabase__password.password
 
 val predicate get__3__function_guard 
   (temp___result_174 : Passworddatabase__password.password) (d : Passworddatabase__database.database) (u : Passworddatabase__url.url)

end

(* Module for defining the constant "p" defined at passworddatabase.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__to_string__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 val constant p [#"passworddatabase.ads" 37 0 0][@model_trace:3760] [@model_projected] [@name:P] 
   : Passworddatabase__password.password

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at passworddatabase.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__to_string__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string" defined at passworddatabase.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password

 val function to_string 
   (p : Passworddatabase__password.password) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_175 : Standard__string.string) (p : Passworddatabase__password.password)

end

(* Module for axiomatizing type "T84b" defined at passwordmanager.adb:59 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__get_password__T84b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS85bP1" defined at passwordmanager.adb:62 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__remove_password__TS85bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS85bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS85bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS85bP1__ref =
  { mutable tS85bP1__content : tS85bP1 }
 
 function tS85bP1__ref_tS85bP1__content__projection 
   (a : tS85bP1__ref) : tS85bP1 =
  a.tS85bP1__content
 
 meta "model_projection" function tS85bP1__ref_tS85bP1__content__projection
 
 meta "inline:no" function tS85bP1__ref_tS85bP1__content__projection
 
 val tS85bP1__havoc 
   (x : tS85bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S85b" defined at passwordmanager.adb:62 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__remove_password__S85b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s85b =
  string
 
 type s85b__ref =
  { mutable s85b__content : s85b }
 
 function s85b__ref_s85b__content__projection 
   (a : s85b__ref) : s85b =
  a.s85b__content
 
 meta "model_projection" function s85b__ref_s85b__content__projection
 
 meta "inline:no" function s85b__ref_s85b__content__projection
 
 val s85b__havoc 
   (x : s85b__ref) : unit
  writes {x}

end

(* Module for defining the constant "u" defined at passworddatabase.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__remove__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 30 0 0][@model_projected] [@model_trace:3678] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__remove__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS88bP1" defined at passwordmanager.adb:89 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__is_website_registered_already__TS88bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS88bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS88bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS88bP1__ref =
  { mutable tS88bP1__content : tS88bP1 }
 
 function tS88bP1__ref_tS88bP1__content__projection 
   (a : tS88bP1__ref) : tS88bP1 =
  a.tS88bP1__content
 
 meta "model_projection" function tS88bP1__ref_tS88bP1__content__projection
 
 meta "inline:no" function tS88bP1__ref_tS88bP1__content__projection
 
 val tS88bP1__havoc 
   (x : tS88bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S88b" defined at passwordmanager.adb:89 instantiated at main.adb:87, created in Gnat2Why.Types.Translate_Type *)
module Main__pm__is_website_registered_already__S88b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s88b =
  string
 
 type s88b__ref =
  { mutable s88b__content : s88b }
 
 function s88b__ref_s88b__content__projection 
   (a : s88b__ref) : s88b =
  a.s88b__content
 
 meta "model_projection" function s88b__ref_s88b__content__projection
 
 meta "inline:no" function s88b__ref_s88b__content__projection
 
 val s88b__havoc 
   (x : s88b__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@model_trace:.16560] [@name:Start] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@name:Length] [@model_trace:.16570] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@model_trace:.16560] [@name:Start] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@name:Length] [@model_trace:.16570] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__5__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__5__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__5__projection
 
 meta "inline:no" function __rep___split_fields__5__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_176   : int.
   (if (( (a__first <= temp___idx_176) /\ (temp___idx_176 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_176) (get b ((b__first - a__first) + temp___idx_176)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_176   : int.
    (if (( (a__first <= temp___idx_176) /\ (temp___idx_176 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_176) (get b ((b__first - a__first) + temp___idx_176)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:89, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:89, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1__rep
 use        Main__TTtSP1 as Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTtSP1.tTtSP1) : int =
  (Main__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTtSP1.tTtSP1, 
 predicate in_range = Main__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:89, created in Gnat2Why.Types.Translate_Type *)
module Main__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at main.adb:90, created in Gnat2Why.Types.Translate_Type *)
module Main__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t29b =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t29b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t29b__ref =
  { mutable t29b__content : t29b }
 
 function t29b__ref_t29b__content__projection 
   (a : t29b__ref) : t29b =
  a.t29b__content
 
 meta "model_projection" function t29b__ref_t29b__content__projection
 
 meta "inline:no" function t29b__ref_t29b__content__projection
 
 val t29b__havoc 
   (x : t29b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T29b" defined at main.adb:90, created in Gnat2Why.Types.Translate_Type *)
module Main__T29b__rep
 use        Main__T29b as Main__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T29b.t29b) : int =
  (Main__T29b.t29b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T29b.t29b, 
 predicate in_range = Main__T29b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T30b" defined at main.adb:90, created in Gnat2Why.Types.Translate_Type *)
module Main__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TTinputpintextSP1" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__TTinputpintextSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTinputpintextSP1 =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTinputpintextSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTinputpintextSP1__ref =
  { mutable tTinputpintextSP1__content : tTinputpintextSP1 }
 
 function tTinputpintextSP1__ref_tTinputpintextSP1__content__projection 
   (a : tTinputpintextSP1__ref) : tTinputpintextSP1 =
  a.tTinputpintextSP1__content
 
 meta "model_projection" function tTinputpintextSP1__ref_tTinputpintextSP1__content__projection
 
 meta "inline:no" function tTinputpintextSP1__ref_tTinputpintextSP1__content__projection
 
 val tTinputpintextSP1__havoc 
   (x : tTinputpintextSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTinputpintextSP1" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__TTinputpintextSP1__rep
 use        Main__TTinputpintextSP1 as Main__TTinputpintextSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTinputpintextSP1.tTinputpintextSP1) : int =
  (Main__TTinputpintextSP1.tTinputpintextSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTinputpintextSP1.tTinputpintextSP1, 
 predicate in_range = Main__TTinputpintextSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TinputpintextS" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__TinputpintextS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32b" defined at main.adb:93, created in Gnat2Why.Types.Translate_Type *)
module Main__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_177 : int) (__void_param : unit)

end

(* Module for defining the constant "number" defined at mycommandline.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 7 0 0][@name:Number] [@model_trace:16506] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_178 : Standard__string.string) (number : int)

end

(* Module for axiomatizing type "T33b" defined at main.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__L_2__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t33b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t33b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t33b__ref =
  { mutable t33b__content : t33b }
 
 function t33b__ref_t33b__content__projection 
   (a : t33b__ref) : t33b =
  a.t33b__content
 
 meta "model_projection" function t33b__ref_t33b__content__projection
 
 meta "inline:no" function t33b__ref_t33b__content__projection
 
 val t33b__havoc 
   (x : t33b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T33b" defined at main.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__L_2__T33b__rep
 use        Main__B_1__L_2__T33b as Main__B_1__L_2__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_1__L_2__T33b.t33b) : int =
  (Main__B_1__L_2__T33b.t33b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_1__L_2__T33b.t33b, 
 predicate in_range = Main__B_1__L_2__T33b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T37b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L36b__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t37b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t37b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t37b__ref =
  { mutable t37b__content : t37b }
 
 function t37b__ref_t37b__content__projection 
   (a : t37b__ref) : t37b =
  a.t37b__content
 
 meta "model_projection" function t37b__ref_t37b__content__projection
 
 meta "inline:no" function t37b__ref_t37b__content__projection
 
 val t37b__havoc 
   (x : t37b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T37b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L36b__T37b__rep
 use        Main__B_1__B_4__while_loop__L36b__T37b as Main__B_1__B_4__while_loop__L36b__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_1__B_4__while_loop__L36b__T37b.t37b) : int =
  (Main__B_1__B_4__while_loop__L36b__T37b.t37b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_1__B_4__while_loop__L36b__T37b.t37b, 
 predicate in_range = Main__B_1__B_4__while_loop__L36b__T37b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T35b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L34b__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t35b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t35b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t35b__ref =
  { mutable t35b__content : t35b }
 
 function t35b__ref_t35b__content__projection 
   (a : t35b__ref) : t35b =
  a.t35b__content
 
 meta "model_projection" function t35b__ref_t35b__content__projection
 
 meta "inline:no" function t35b__ref_t35b__content__projection
 
 val t35b__havoc 
   (x : t35b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T35b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L34b__T35b__rep
 use        Main__B_1__B_4__while_loop__L34b__T35b as Main__B_1__B_4__while_loop__L34b__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_1__B_4__while_loop__L34b__T35b.t35b) : int =
  (Main__B_1__B_4__while_loop__L34b__T35b.t35b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_1__B_4__while_loop__L34b__T35b.t35b, 
 predicate in_range = Main__B_1__B_4__while_loop__L34b__T35b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T38b" defined at main.adb:169, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:23195] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 70 0 0][@model_projected] [@model_trace:16643] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T39b" defined at main.adb:199, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T41b" defined at main.adb:206, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L40b__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t41b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t41b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t41b__ref =
  { mutable t41b__content : t41b }
 
 function t41b__ref_t41b__content__projection 
   (a : t41b__ref) : t41b =
  a.t41b__content
 
 meta "model_projection" function t41b__ref_t41b__content__projection
 
 meta "inline:no" function t41b__ref_t41b__content__projection
 
 val t41b__havoc 
   (x : t41b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T41b" defined at main.adb:206, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L40b__T41b__rep
 use        Main__B_1__B_4__while_loop__L40b__T41b as Main__B_1__B_4__while_loop__L40b__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_1__B_4__while_loop__L40b__T41b.t41b) : int =
  (Main__B_1__B_4__while_loop__L40b__T41b.t41b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_1__B_4__while_loop__L40b__T41b.t41b, 
 predicate in_range = Main__B_1__B_4__while_loop__L40b__T41b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T42b" defined at main.adb:231, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T43b" defined at main.adb:269, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T43b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:23507] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T44b" defined at main.adb:285, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T45b" defined at main.adb:307, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T46b" defined at main.adb:328, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__T46b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at main.adb:343, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L47b__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t48b =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t48b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t48b__ref =
  { mutable t48b__content : t48b }
 
 function t48b__ref_t48b__content__projection 
   (a : t48b__ref) : t48b =
  a.t48b__content
 
 meta "model_projection" function t48b__ref_t48b__content__projection
 
 meta "inline:no" function t48b__ref_t48b__content__projection
 
 val t48b__havoc 
   (x : t48b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T48b" defined at main.adb:343, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__B_4__while_loop__L47b__T48b__rep
 use        Main__B_1__B_4__while_loop__L47b__T48b as Main__B_1__B_4__while_loop__L47b__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_1__B_4__while_loop__L47b__T48b.t48b) : int =
  (Main__B_1__B_4__while_loop__L47b__T48b.t48b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_1__B_4__while_loop__L47b__T48b.t48b, 
 predicate in_range = Main__B_1__B_4__while_loop__L47b__T48b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T49b" defined at main.adb:383, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "source" defined at a-strunb.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__to_unbounded_string__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant source [#"a-strunb.ads" 104 0 0][@model_projected] [@name:Source] [@model_trace:29932] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__to_unbounded_string__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_unbounded_string" defined at a-strunb.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__to_unbounded_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function to_unbounded_string 
   (source : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate to_unbounded_string__function_guard 
   (temp___result_179 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Standard__string.string)

end

(* Module for defining the constant "length" defined at a-strunb.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__to_unbounded_string__2__length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant length [#"a-strunb.ads" 110 0 0][@name:Length] [@model_trace:29967] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "length" defined at a-strunb.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__to_unbounded_string__2__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_unbounded_string__2" defined at a-strunb.ads:109, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__to_unbounded_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function to_unbounded_string__2 
   (length : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate to_unbounded_string__2__function_guard 
   (temp___result_180 : Ada__strings__unbounded__unbounded_string.unbounded_string) (length : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__to_string__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 116 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__to_string__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string" defined at a-strunb.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function to_string 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_181 : Standard__string.string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "source" defined at a-strunb.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__set_unbounded_string__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant source [#"a-strunb.ads" 122 0 0][@model_projected] [@name:Source] [@model_trace:30050] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__set_unbounded_string__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__append__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant new_item [#"a-strunb.ads" 129 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:129, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__append__2__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant new_item [#"a-strunb.ads" 137 0 0][@name:New_Item] [@model_trace:30146] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__2__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__append__3__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant new_item [#"a-strunb.ads" 145 0 0][@name:New_Item] [@model_trace:30206] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:145, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__3__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "left" defined at a-strunb.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 152 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 153 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oconcat" defined at a-strunb.ads:151, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oconcat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oconcat 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate oconcat__function_guard 
   (temp___result_182 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:160, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 160 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:160, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:161, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 161 0 0][@model_projected] [@name:Right] [@model_trace:30321] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:161, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oconcat__2" defined at a-strunb.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oconcat__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oconcat__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate oconcat__2__function_guard 
   (temp___result_183 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 168 0 0][@name:Left] [@model_trace:30373] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 169 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oconcat__3" defined at a-strunb.ads:167, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oconcat__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oconcat__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate oconcat__3__function_guard 
   (temp___result_184 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:176, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__4__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 176 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:176, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__4__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__4__right
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant right [#"a-strunb.ads" 177 0 0][@model_trace:30443] [@name:Right] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__4__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oconcat__4" defined at a-strunb.ads:175, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oconcat__4
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oconcat__4 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate oconcat__4__function_guard 
   (temp___result_185 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : int)

end

(* Module for defining the constant "left" defined at a-strunb.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__5__left
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant left [#"a-strunb.ads" 184 0 0][@name:Left] [@model_trace:30489] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:184, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__5__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oconcat__5__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 185 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:185, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oconcat__5__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oconcat__5" defined at a-strunb.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oconcat__5
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oconcat__5 
   (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate oconcat__5__function_guard 
   (temp___result_186 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "source" defined at a-strunb.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__element__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 192 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__element__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at a-strunb.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__element__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"a-strunb.ads" 193 0 0][@name:Index] [@model_trace:30553] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at a-strunb.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__element__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "element" defined at a-strunb.ads:191, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__element
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function element 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (index : int) : int
 
 val predicate element__function_guard 
   (temp___result_187 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (index : int)

end

(* Module for defining the constant "index" defined at a-strunb.ads:200, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_element__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"a-strunb.ads" 200 0 0][@name:Index] [@model_trace:30593] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at a-strunb.ads:200, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_element__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "by" defined at a-strunb.ads:201, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_element__by
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant by__ [#"a-strunb.ads" 201 0 0][@name:By] [@model_trace:30602] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "by" defined at a-strunb.ads:201, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_element__by___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__slice__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 208 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:208, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__slice__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "low" defined at a-strunb.ads:209, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__slice__low
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant low [#"a-strunb.ads" 209 0 0][@model_trace:30652] [@name:Low] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "low" defined at a-strunb.ads:209, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__slice__low___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "high" defined at a-strunb.ads:210, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__slice__high
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant high [#"a-strunb.ads" 210 0 0][@name:High] [@model_trace:30661] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "high" defined at a-strunb.ads:210, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__slice__high___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "slice" defined at a-strunb.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__slice
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) : Standard__string.string
 
 val predicate slice__function_guard 
   (temp___result_188 : Standard__string.string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 217 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "low" defined at a-strunb.ads:218, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__low
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant low [#"a-strunb.ads" 218 0 0][@model_trace:30727] [@name:Low] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "low" defined at a-strunb.ads:218, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__low___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "high" defined at a-strunb.ads:219, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__high
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant high [#"a-strunb.ads" 219 0 0][@name:High] [@model_trace:30736] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "high" defined at a-strunb.ads:219, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__high___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unbounded_slice" defined at a-strunb.ads:216, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__unbounded_slice
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function unbounded_slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate unbounded_slice__function_guard 
   (temp___result_189 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:228, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 228 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:228, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "low" defined at a-strunb.ads:230, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__2__low
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant low [#"a-strunb.ads" 230 0 0][@model_trace:30815] [@name:Low] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "low" defined at a-strunb.ads:230, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__2__low___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "high" defined at a-strunb.ads:231, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__unbounded_slice__2__high
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant high [#"a-strunb.ads" 231 0 0][@model_trace:30824] [@name:High] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "high" defined at a-strunb.ads:231, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__2__high___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "left" defined at a-strunb.ads:239, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 239 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:240, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 240 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:240, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oeq" defined at a-strunb.ads:238, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oeq
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oeq 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate oeq__function_guard 
   (temp___result_190 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 245 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:245, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:246, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 246 0 0][@model_projected] [@model_trace:30924] [@name:Right] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:246, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oeq__2" defined at a-strunb.ads:244, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oeq__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oeq__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
 
 val predicate oeq__2__function_guard 
   (temp___result_191 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:251, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 251 0 0][@model_trace:30948] [@name:Left] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:251, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:252, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oeq__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 252 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:252, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oeq__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oeq__3" defined at a-strunb.ads:250, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oeq__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oeq__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate oeq__3__function_guard 
   (temp___result_192 : bool) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:257, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 257 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:257, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:258, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 258 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:258, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Olt" defined at a-strunb.ads:256, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Olt
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function olt 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate olt__function_guard 
   (temp___result_193 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:263, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 263 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:263, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 264 0 0][@model_projected] [@name:Right] [@model_trace:31023] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Olt__2" defined at a-strunb.ads:262, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Olt__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function olt__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
 
 val predicate olt__2__function_guard 
   (temp___result_194 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:269, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 269 0 0][@name:Left] [@model_trace:31047] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:269, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Olt__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 270 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:270, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Olt__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Olt__3" defined at a-strunb.ads:268, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Olt__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function olt__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate olt__3__function_guard 
   (temp___result_195 : bool) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:275, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 275 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:275, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:276, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 276 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:276, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ole" defined at a-strunb.ads:274, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ole
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ole 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate ole__function_guard 
   (temp___result_196 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:281, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 281 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:281, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:282, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 282 0 0][@model_trace:31122] [@model_projected] [@name:Right] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:282, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ole__2" defined at a-strunb.ads:280, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ole__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ole__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
 
 val predicate ole__2__function_guard 
   (temp___result_197 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:287, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 287 0 0][@name:Left] [@model_projected] [@model_trace:31146] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:287, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:288, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ole__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 288 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:288, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ole__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ole__3" defined at a-strunb.ads:286, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ole__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ole__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate ole__3__function_guard 
   (temp___result_198 : bool) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:293, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 293 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:293, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:294, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 294 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:294, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ogt" defined at a-strunb.ads:292, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ogt
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ogt 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate ogt__function_guard 
   (temp___result_199 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:299, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 299 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:299, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:300, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 300 0 0][@model_projected] [@model_trace:31221] [@name:Right] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:300, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ogt__2" defined at a-strunb.ads:298, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ogt__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ogt__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
 
 val predicate ogt__2__function_guard 
   (temp___result_200 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:305, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 305 0 0][@model_trace:31245] [@name:Left] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:305, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:306, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Ogt__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 306 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:306, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Ogt__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Ogt__3" defined at a-strunb.ads:304, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Ogt__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function ogt__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate ogt__3__function_guard 
   (temp___result_201 : bool) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:311, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 311 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:311, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:312, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 312 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:312, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oge" defined at a-strunb.ads:310, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oge
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oge 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate oge__function_guard 
   (temp___result_202 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:317, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant left [#"a-strunb.ads" 317 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:317, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:318, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 318 0 0][@model_trace:31320] [@model_projected] [@name:Right] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:318, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oge__2" defined at a-strunb.ads:316, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oge__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oge__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
 
 val predicate oge__2__function_guard 
   (temp___result_203 : bool) (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:323, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant left [#"a-strunb.ads" 323 0 0][@name:Left] [@model_projected] [@model_trace:31344] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:323, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:324, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Oge__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 324 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:324, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Oge__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Oge__3" defined at a-strunb.ads:322, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Oge__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function oge__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
 
 val predicate oge__3__function_guard 
   (temp___result_204 : bool) (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end

(* Module for defining the constant "source" defined at a-strunb.ads:333, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 333 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:333, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:334, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 334 0 0][@model_projected] [@model_trace:31386] [@name:Pattern] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:334, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "direction" defined at a-string.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__direction
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type direction 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = direction, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type direction__ref =
  { mutable direction__content : direction }
 
 function direction__ref_direction__content__projection 
   (a : direction__ref) : direction =
  a.direction__content
 
 meta "model_projection" function direction__ref_direction__content__projection
 
 meta "inline:no" function direction__ref_direction__content__projection
 
 val direction__havoc 
   (x : direction__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "direction" defined at a-string.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__direction__rep
 use        Ada__strings__direction as Ada__strings__direction
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__strings__direction.direction, 
 predicate in_range = Ada__strings__direction.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "going" defined at a-strunb.ads:335, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 335 0 0][@model_trace:31395] [@name:Going] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:335, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "Tcharacter_mappingB" defined at a-strmap.ads:149, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__maps__Tcharacter_mappingB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__character.character, 
 type index_rep_type = int, 
 function to_rep = Standard__character__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__character.in_range, 
 predicate index_dynamic_property = Standard__character.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tcharacter_mappingB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tcharacter_mappingB__ref =
  { mutable tcharacter_mappingB__content : tcharacter_mappingB }
 
 function tcharacter_mappingB__ref_tcharacter_mappingB__content__projection 
   (a : tcharacter_mappingB__ref) : tcharacter_mappingB =
  a.tcharacter_mappingB__content
 
 meta "model_projection" function tcharacter_mappingB__ref_tcharacter_mappingB__content__projection
 
 meta "inline:no" function tcharacter_mappingB__ref_tcharacter_mappingB__content__projection
 
 val tcharacter_mappingB__havoc 
   (x : tcharacter_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character_mapping" defined at a-strmap.ads:149, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__maps__character_mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "mapping" defined at a-strunb.ads:336, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant mapping [#"a-strunb.ads" 336 0 0][@model_trace:31405] [@name:Mapping] [@model_projected] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mapping" defined at a-strunb.ads:336, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index" defined at a-strunb.ads:332, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function index 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (going : int) (mapping : Array__Int__Standard__character.map) : int
 
 val predicate index__function_guard 
   (temp___result_205 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (going : int) (mapping : Array__Int__Standard__character.map)

end

(* Module for defining the constant "source" defined at a-strunb.ads:342, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 342 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:342, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:343, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__2__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 343 0 0][@model_projected] [@model_trace:31450] [@name:Pattern] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:343, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__2__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:344, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__2__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 344 0 0][@name:Going] [@model_trace:31459] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:344, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__2__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:351, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__3__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 351 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:351, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__3__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the array theory associated to type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Bool
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  bool
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_206   : int.
   (if (( (a__first <= temp___idx_206) /\ (temp___idx_206 <= a__last) )) then (
    ((get a temp___idx_206) = (get b ((b__first - a__first) + temp___idx_206)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_206   : int.
    (if (( (a__first <= temp___idx_206) /\ (temp___idx_206 <= a__last) )) then (
     ((get a temp___idx_206) = (get b ((b__first - a__first) + temp___idx_206)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Bool__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Bool.component_type, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get

end

(* Module for axiomatizing logical operations for the array theory associated to type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Why.Gen.Arrays.Declare_Logical_Operation_Symbols *)
module Array__Int__Bool__Bool_Op
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with axiom .,
 type map = Array__Int__Bool.map, 
 function get = Array__Int__Bool.get, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing comparison for the array theory associated to type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Bool_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Array__Int__Bool as Array__Int__Bool

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Bool.component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get, 
 function bool_eq = Array__Int__Bool.bool_eq

end

(* Module for axiomatizing type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__maps__Tcharacter_set_internalB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Bool as Array__Int__Bool

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Standard__character.character, 
 type index_rep_type = int, 
 function to_rep = Standard__character__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__character.in_range, 
 predicate index_dynamic_property = Standard__character.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tcharacter_set_internalB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tcharacter_set_internalB__ref =
  { mutable tcharacter_set_internalB__content : tcharacter_set_internalB }
 
 function tcharacter_set_internalB__ref_tcharacter_set_internalB__content__projection 
   (a : tcharacter_set_internalB__ref) : tcharacter_set_internalB =
  a.tcharacter_set_internalB__content
 
 meta "model_projection" function tcharacter_set_internalB__ref_tcharacter_set_internalB__content__projection
 
 meta "inline:no" function tcharacter_set_internalB__ref_tcharacter_set_internalB__content__projection
 
 val tcharacter_set_internalB__havoc 
   (x : tcharacter_set_internalB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tcharacter_setB" defined at a-strmap.ads:140, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__maps__Tcharacter_setB
 use export Ada__strings__maps__Tcharacter_set_internalB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tcharacter_setB =
  tcharacter_set_internalB
 
 type tcharacter_setB__ref =
  { mutable tcharacter_setB__content : tcharacter_setB }
 
 function tcharacter_setB__ref_tcharacter_setB__content__projection 
   (a : tcharacter_setB__ref) : tcharacter_setB =
  a.tcharacter_setB__content
 
 meta "model_projection" function tcharacter_setB__ref_tcharacter_setB__content__projection
 
 meta "inline:no" function tcharacter_setB__ref_tcharacter_setB__content__projection
 
 val tcharacter_setB__havoc 
   (x : tcharacter_setB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character_set" defined at a-strmap.ads:140, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__maps__character_set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 type component_type =
  bool
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "set" defined at a-strunb.ads:352, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__3__set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant set [#"a-strunb.ads" 352 0 0][@model_trace:31511] [@model_projected] [@name:Set] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "set" defined at a-strunb.ads:352, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__3__set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "membership" defined at a-string.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__membership
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type membership 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = membership, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type membership__ref =
  { mutable membership__content : membership }
 
 function membership__ref_membership__content__projection 
   (a : membership__ref) : membership =
  a.membership__content
 
 meta "model_projection" function membership__ref_membership__content__projection
 
 meta "inline:no" function membership__ref_membership__content__projection
 
 val membership__havoc 
   (x : membership__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "membership" defined at a-string.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__membership__rep
 use        Ada__strings__membership as Ada__strings__membership
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__strings__membership.membership, 
 predicate in_range = Ada__strings__membership.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "test" defined at a-strunb.ads:353, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__3__test
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant test [#"a-strunb.ads" 353 0 0][@model_trace:31522] [@name:Test] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "test" defined at a-strunb.ads:353, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__3__test___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:354, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__3__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 354 0 0][@name:Going] [@model_trace:31532] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:354, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__3__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index__3" defined at a-strunb.ads:350, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Bool as Array__Int__Bool

 val function index__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (test : int) (going : int) : int
 
 val predicate index__3__function_guard 
   (temp___result_207 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (test : int) (going : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:359, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__4__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 359 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:359, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__4__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:360, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__4__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 360 0 0][@model_projected] [@name:Pattern] [@model_trace:31566] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:360, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__4__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:361, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__4__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 361 0 0][@name:From] [@model_trace:31575] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:361, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__4__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:362, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__4__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 362 0 0][@model_trace:31584] [@name:Going] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__4__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mapping" defined at a-strunb.ads:363, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__4__mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant mapping [#"a-strunb.ads" 363 0 0][@model_trace:31594] [@name:Mapping] [@model_projected] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mapping" defined at a-strunb.ads:363, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__4__mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index__4" defined at a-strunb.ads:358, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index__4
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function index__4 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (from : int) (going : int) (mapping : Array__Int__Standard__character.map) : int
 
 val predicate index__4__function_guard 
   (temp___result_208 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (from : int) (going : int) (mapping : Array__Int__Standard__character.map)

end

(* Module for defining the constant "source" defined at a-strunb.ads:372, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__5__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 372 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:372, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__5__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:373, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__5__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 373 0 0][@model_projected] [@model_trace:31656] [@name:Pattern] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:373, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__5__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:374, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__5__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 374 0 0][@name:From] [@model_trace:31665] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:374, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__5__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:375, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__5__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 375 0 0][@model_trace:31674] [@name:Going] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:375, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__5__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:386, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__6__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 386 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:386, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__6__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "set" defined at a-strunb.ads:387, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__6__set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant set [#"a-strunb.ads" 387 0 0][@model_trace:31743] [@model_projected] [@name:Set] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "set" defined at a-strunb.ads:387, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__6__set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:388, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__6__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 388 0 0][@name:From] [@model_trace:31754] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:388, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__6__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "test" defined at a-strunb.ads:389, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__6__test
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant test [#"a-strunb.ads" 389 0 0][@model_trace:31763] [@name:Test] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "test" defined at a-strunb.ads:389, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__6__test___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:390, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index__6__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 390 0 0][@name:Going] [@model_trace:31773] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:390, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index__6__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index__6" defined at a-strunb.ads:385, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index__6
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Bool as Array__Int__Bool

 val function index__6 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (from : int) (test : int) (going : int) : int
 
 val predicate index__6__function_guard 
   (temp___result_209 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (from : int) (test : int) (going : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:397, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index_non_blank__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 397 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:397, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index_non_blank__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:398, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index_non_blank__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 398 0 0][@name:Going] [@model_trace:31824] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:398, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index_non_blank__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index_non_blank" defined at a-strunb.ads:396, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index_non_blank
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function index_non_blank 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (going : int) : int
 
 val predicate index_non_blank__function_guard 
   (temp___result_210 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (going : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:403, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index_non_blank__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 403 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:403, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index_non_blank__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:404, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index_non_blank__2__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 404 0 0][@name:From] [@model_trace:31858] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:404, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index_non_blank__2__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "going" defined at a-strunb.ads:405, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__index_non_blank__2__going
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant going [#"a-strunb.ads" 405 0 0][@model_trace:31867] [@name:Going] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "going" defined at a-strunb.ads:405, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__index_non_blank__2__going___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "index_non_blank__2" defined at a-strunb.ads:402, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__index_non_blank__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function index_non_blank__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (going : int) : int
 
 val predicate index_non_blank__2__function_guard 
   (temp___result_211 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (going : int)

end

(* Module for defining the constant "source" defined at a-strunb.ads:412, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 412 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:412, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:413, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 413 0 0][@model_trace:31918] [@model_projected] [@name:Pattern] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:413, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mapping" defined at a-strunb.ads:414, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant mapping [#"a-strunb.ads" 414 0 0][@name:Mapping] [@model_projected] [@model_trace:31927] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mapping" defined at a-strunb.ads:414, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "count" defined at a-strunb.ads:411, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function count 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (mapping : Array__Int__Standard__character.map) : int
 
 val predicate count__function_guard 
   (temp___result_212 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (mapping : Array__Int__Standard__character.map)

end

(* Module for defining the constant "source" defined at a-strunb.ads:420, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 420 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:420, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pattern" defined at a-strunb.ads:421, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__2__pattern
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pattern [#"a-strunb.ads" 421 0 0][@model_projected] [@model_trace:31972] [@name:Pattern] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pattern" defined at a-strunb.ads:421, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__2__pattern___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:428, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__3__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 428 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:428, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__3__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "set" defined at a-strunb.ads:429, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__count__3__set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant set [#"a-strunb.ads" 429 0 0][@model_trace:32023] [@model_projected] [@name:Set] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "set" defined at a-strunb.ads:429, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__count__3__set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "count__3" defined at a-strunb.ads:427, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__count__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Bool as Array__Int__Bool

 val function count__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) : int
 
 val predicate count__3__function_guard 
   (temp___result_213 : int) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map)

end

(* Module for defining the constant "source" defined at a-strunb.ads:434, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 434 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:434, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "set" defined at a-strunb.ads:435, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant set [#"a-strunb.ads" 435 0 0][@model_trace:32058] [@model_projected] [@name:Set] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "set" defined at a-strunb.ads:435, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:436, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 436 0 0][@name:From] [@model_trace:32069] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:436, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "test" defined at a-strunb.ads:437, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__test
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant test [#"a-strunb.ads" 437 0 0][@model_trace:32078] [@name:Test] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "test" defined at a-strunb.ads:437, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__test___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:446, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 446 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:446, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "set" defined at a-strunb.ads:447, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__2__set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant set [#"a-strunb.ads" 447 0 0][@model_trace:32145] [@model_projected] [@name:Set] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "set" defined at a-strunb.ads:447, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__2__set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "test" defined at a-strunb.ads:448, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__find_token__2__test
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant test [#"a-strunb.ads" 448 0 0][@model_trace:32156] [@name:Test] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "test" defined at a-strunb.ads:448, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__2__test___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:459, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__translate__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 459 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:459, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mapping" defined at a-strunb.ads:460, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__translate__mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant mapping [#"a-strunb.ads" 460 0 0][@name:Mapping] [@model_projected] [@model_trace:32206] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mapping" defined at a-strunb.ads:460, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "translate" defined at a-strunb.ads:458, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__translate
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function translate 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (mapping : Array__Int__Standard__character.map) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate translate__function_guard 
   (temp___result_214 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (mapping : Array__Int__Standard__character.map)

end

(* Module for defining the constant "mapping" defined at a-strunb.ads:467, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__translate__2__mapping
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val constant mapping [#"a-strunb.ads" 467 0 0][@model_trace:32252] [@name:Mapping] [@model_projected] 
   : Array__Int__Standard__character.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mapping" defined at a-strunb.ads:467, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__2__mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:473, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__translate__3__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 473 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:473, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__3__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:491, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 491 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:491, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "low" defined at a-strunb.ads:492, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__low
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant low [#"a-strunb.ads" 492 0 0][@model_trace:32388] [@name:Low] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "low" defined at a-strunb.ads:492, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__low___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "high" defined at a-strunb.ads:493, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__high
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant high [#"a-strunb.ads" 493 0 0][@name:High] [@model_trace:32397] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "high" defined at a-strunb.ads:493, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__high___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "by" defined at a-strunb.ads:494, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__by
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant by__ [#"a-strunb.ads" 494 0 0][@name:By] [@model_projected] [@model_trace:32406] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "by" defined at a-strunb.ads:494, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__by___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "replace_slice" defined at a-strunb.ads:490, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__replace_slice
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function replace_slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) (by__ : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate replace_slice__function_guard 
   (temp___result_215 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) (by__ : Standard__string.string)

end

(* Module for defining the constant "low" defined at a-strunb.ads:513, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__2__low
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant low [#"a-strunb.ads" 513 0 0][@model_trace:32537] [@name:Low] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "low" defined at a-strunb.ads:513, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__2__low___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "high" defined at a-strunb.ads:514, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__2__high
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant high [#"a-strunb.ads" 514 0 0][@name:High] [@model_trace:32546] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "high" defined at a-strunb.ads:514, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__2__high___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "by" defined at a-strunb.ads:515, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__replace_slice__2__by
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant by__ [#"a-strunb.ads" 515 0 0][@name:By] [@model_projected] [@model_trace:32555] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "by" defined at a-strunb.ads:515, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__2__by___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:533, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__insert__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 533 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:533, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "before" defined at a-strunb.ads:534, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__insert__before
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant before [#"a-strunb.ads" 534 0 0][@model_trace:32681] [@name:Before] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "before" defined at a-strunb.ads:534, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__before___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:535, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__insert__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant new_item [#"a-strunb.ads" 535 0 0][@name:New_Item] [@model_projected] [@model_trace:32690] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:535, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "insert" defined at a-strunb.ads:532, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__insert
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function insert 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (before : int) (new_item : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate insert__function_guard 
   (temp___result_216 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (before : int) (new_item : Standard__string.string)

end

(* Module for defining the constant "before" defined at a-strunb.ads:544, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__insert__2__before
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant before [#"a-strunb.ads" 544 0 0][@model_trace:32760] [@name:Before] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "before" defined at a-strunb.ads:544, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__2__before___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:545, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__insert__2__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant new_item [#"a-strunb.ads" 545 0 0][@name:New_Item] [@model_trace:32769] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:545, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__2__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:553, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__overwrite__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 553 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:553, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "position" defined at a-strunb.ads:554, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__overwrite__position
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant position [#"a-strunb.ads" 554 0 0][@model_trace:32838] [@name:Position] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "position" defined at a-strunb.ads:554, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__position___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:555, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__overwrite__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant new_item [#"a-strunb.ads" 555 0 0][@model_trace:32847] [@name:New_Item] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:555, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "overwrite" defined at a-strunb.ads:552, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__overwrite
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function overwrite 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (position : int) (new_item : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate overwrite__function_guard 
   (temp___result_217 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (position : int) (new_item : Standard__string.string)

end

(* Module for defining the constant "position" defined at a-strunb.ads:568, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__overwrite__2__position
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant position [#"a-strunb.ads" 568 0 0][@model_trace:32929] [@name:Position] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "position" defined at a-strunb.ads:568, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__2__position___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "new_item" defined at a-strunb.ads:569, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__overwrite__2__new_item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant new_item [#"a-strunb.ads" 569 0 0][@model_trace:32938] [@name:New_Item] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "new_item" defined at a-strunb.ads:569, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__2__new_item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:582, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__delete__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 582 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:582, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at a-strunb.ads:583, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__delete__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 583 0 0][@name:From] [@model_trace:33019] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:583, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "through" defined at a-strunb.ads:584, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__delete__through
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant through [#"a-strunb.ads" 584 0 0][@name:Through] [@model_trace:33028] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "through" defined at a-strunb.ads:584, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__through___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "delete" defined at a-strunb.ads:581, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__delete
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function delete 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (through : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate delete__function_guard 
   (temp___result_218 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (through : int)

end

(* Module for defining the constant "from" defined at a-strunb.ads:596, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__delete__2__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"a-strunb.ads" 596 0 0][@name:From] [@model_trace:33109] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at a-strunb.ads:596, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__2__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "through" defined at a-strunb.ads:597, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__delete__2__through
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant through [#"a-strunb.ads" 597 0 0][@name:Through] [@model_trace:33118] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "through" defined at a-strunb.ads:597, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__2__through___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:608, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 608 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:608, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__trim_end
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type trim_end 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = trim_end, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type trim_end__ref =
  { mutable trim_end__content : trim_end }
 
 function trim_end__ref_trim_end__content__projection 
   (a : trim_end__ref) : trim_end =
  a.trim_end__content
 
 meta "model_projection" function trim_end__ref_trim_end__content__projection
 
 meta "inline:no" function trim_end__ref_trim_end__content__projection
 
 val trim_end__havoc 
   (x : trim_end__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__trim_end__rep
 use        Ada__strings__trim_end as Ada__strings__trim_end
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__strings__trim_end.trim_end, 
 predicate in_range = Ada__strings__trim_end.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "side" defined at a-strunb.ads:609, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__side
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant side [#"a-strunb.ads" 609 0 0][@model_trace:33198] [@name:Side] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "side" defined at a-strunb.ads:609, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__side___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trim" defined at a-strunb.ads:607, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__trim
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function trim 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (side : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate trim__function_guard 
   (temp___result_219 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (side : int)

end

(* Module for defining the constant "side" defined at a-strunb.ads:616, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__2__side
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant side [#"a-strunb.ads" 616 0 0][@name:Side] [@model_trace:33242] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "side" defined at a-strunb.ads:616, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__2__side___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:622, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__3__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 622 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:622, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__3__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "left" defined at a-strunb.ads:623, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant left [#"a-strunb.ads" 623 0 0][@name:Left] [@model_projected] [@model_trace:33285] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:623, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:624, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant right [#"a-strunb.ads" 624 0 0][@model_projected] [@model_trace:33296] [@name:Right] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:624, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trim__3" defined at a-strunb.ads:621, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__trim__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val function trim__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Array__Int__Bool.map) (right : Array__Int__Bool.map) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate trim__3__function_guard 
   (temp___result_220 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Array__Int__Bool.map) (right : Array__Int__Bool.map)

end

(* Module for defining the constant "left" defined at a-strunb.ads:631, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__4__left
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant left [#"a-strunb.ads" 631 0 0][@name:Left] [@model_trace:33342] [@model_projected] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:631, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__4__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:632, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__trim__4__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool

 val constant right [#"a-strunb.ads" 632 0 0][@model_projected] [@name:Right] [@model_trace:33353] 
   : Array__Int__Bool.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:632, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__4__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:638, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__head__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 638 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:638, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "count" defined at a-strunb.ads:639, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__head__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant count [#"a-strunb.ads" 639 0 0][@name:Count] [@model_trace:33398] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at a-strunb.ads:639, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pad" defined at a-strunb.ads:640, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__head__pad
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pad [#"a-strunb.ads" 640 0 0][@name:Pad] [@model_trace:33407] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pad" defined at a-strunb.ads:640, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__pad___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "head" defined at a-strunb.ads:637, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__head
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function head 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate head__function_guard 
   (temp___result_221 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int)

end

(* Module for defining the constant "count" defined at a-strunb.ads:647, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__head__2__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant count [#"a-strunb.ads" 647 0 0][@model_trace:33450] [@name:Count] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at a-strunb.ads:647, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__2__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pad" defined at a-strunb.ads:648, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__head__2__pad
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pad [#"a-strunb.ads" 648 0 0][@name:Pad] [@model_trace:33459] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pad" defined at a-strunb.ads:648, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__2__pad___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "source" defined at a-strunb.ads:654, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__tail__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant source [#"a-strunb.ads" 654 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:654, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "count" defined at a-strunb.ads:655, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__tail__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant count [#"a-strunb.ads" 655 0 0][@model_trace:33499] [@name:Count] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at a-strunb.ads:655, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pad" defined at a-strunb.ads:656, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__tail__pad
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pad [#"a-strunb.ads" 656 0 0][@name:Pad] [@model_trace:33508] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pad" defined at a-strunb.ads:656, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__pad___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tail" defined at a-strunb.ads:653, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__tail
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function tail 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate tail__function_guard 
   (temp___result_222 : Ada__strings__unbounded__unbounded_string.unbounded_string) (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int)

end

(* Module for defining the constant "count" defined at a-strunb.ads:663, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__tail__2__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant count [#"a-strunb.ads" 663 0 0][@name:Count] [@model_trace:33551] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at a-strunb.ads:663, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__2__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pad" defined at a-strunb.ads:664, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__tail__2__pad
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant pad [#"a-strunb.ads" 664 0 0][@name:Pad] [@model_trace:33560] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pad" defined at a-strunb.ads:664, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__2__pad___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "left" defined at a-strunb.ads:670, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__left
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant left [#"a-strunb.ads" 670 0 0][@name:Left] [@model_trace:33591] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:670, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:671, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__right
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant right [#"a-strunb.ads" 671 0 0][@name:Right] [@model_trace:33600] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:671, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Omultiply" defined at a-strunb.ads:669, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Omultiply
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function omultiply 
   (left : int) (right : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate omultiply__function_guard 
   (temp___result_223 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : int) (right : int)

end

(* Module for defining the constant "left" defined at a-strunb.ads:678, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__2__left
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant left [#"a-strunb.ads" 678 0 0][@name:Left] [@model_trace:33640] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:678, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__2__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:679, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__2__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant right [#"a-strunb.ads" 679 0 0][@model_projected] [@name:Right] [@model_trace:33649] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:679, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__2__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Omultiply__2" defined at a-strunb.ads:677, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Omultiply__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function omultiply__2 
   (left : int) (right : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate omultiply__2__function_guard 
   (temp___result_224 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : int) (right : Standard__string.string)

end

(* Module for defining the constant "left" defined at a-strunb.ads:686, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__3__left
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant left [#"a-strunb.ads" 686 0 0][@model_trace:33701] [@name:Left] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "left" defined at a-strunb.ads:686, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__3__left___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "right" defined at a-strunb.ads:687, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__unbounded__Omultiply__3__right
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val constant right [#"a-strunb.ads" 687 0 0]
   : Ada__strings__unbounded__unbounded_string.unbounded_string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "right" defined at a-strunb.ads:687, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__Omultiply__3__right___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "Omultiply__3" defined at a-strunb.ads:685, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__Omultiply__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val function omultiply__3 
   (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
 
 val predicate omultiply__3__function_guard 
   (temp___result_225 : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string)

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_trace:113252] [@model_projected] [@name:M]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:144259] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:144259'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_trace:144259'Last] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_trace:144314] [@model_projected] [@name:M]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_projected] [@model_trace:144333] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_projected] [@model_trace:144410] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_trace:144477] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_projected] [@model_trace:144654] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_trace:144854] [@model_projected] [@name:R]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@name:J] [@model_trace:144877]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_trace:144943] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:23317] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:23317'First] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:23317'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_projected] [@name:Last] [@model_trace:23326]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "isunlocked" defined at main.adb:85, created in Gnat2Why.Decls.Translate_Variable *)
module Main__isunlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val isunlocked [#"main.adb" 85 0 0][@model_projected] [@name:IsUnlocked] [@model_trace:2374]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "isunlocked" defined at main.adb:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__isunlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ispinaccepted" defined at main.adb:86, created in Gnat2Why.Decls.Translate_Variable *)
module Main__ispinaccepted
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ispinaccepted [#"main.adb" 86 0 0][@name:IsPinAccepted] [@model_projected] [@model_trace:2383]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ispinaccepted" defined at main.adb:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__ispinaccepted___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pinvaluesaved" defined at passwordmanager.ads:11 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm__pinvaluesaved
 use        "_gnatprove_standard".Main
 use        "int".Int

 val pinvaluesaved [#"passwordmanager.ads" 11 0 0][@model_projected] [@name:PINValueSaved] [@model_trace:113829]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pinvaluesaved" defined at passwordmanager.ads:11 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__pinvaluesaved___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "db" defined at passwordmanager.ads:12 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val db [#"passwordmanager.ads" 12 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at passwordmanager.ads:12 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 20 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pinvaluetocheck" defined at passwordmanager.adb:17 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm__is_pin_correct__B_1__pinvaluetocheck
 use        "_gnatprove_standard".Main
 use        "int".Int

 val pinvaluetocheck [#"passwordmanager.adb" 17 0 0][@model_projected] [@name:PINValueToCheck] [@model_trace:145616]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pinvaluetocheck" defined at passwordmanager.adb:17 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__is_pin_correct__B_1__pinvaluetocheck___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pinvaluetoupdate" defined at passwordmanager.adb:30 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm__update_pin__B_2__pinvaluetoupdate
 use        "_gnatprove_standard".Main
 use        "int".Int

 val pinvaluetoupdate [#"passwordmanager.adb" 30 0 0][@name:PINValueToUpdate] [@model_projected] [@model_trace:145698]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pinvaluetoupdate" defined at passwordmanager.adb:30 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__update_pin__B_2__pinvaluetoupdate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__put__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 27 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__put__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__remove__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 30 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__remove__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "isitemindb" defined at passwordmanager.adb:92 instantiated at main.adb:87, created in Gnat2Why.Decls.Translate_Variable *)
module Main__pm__is_website_registered_already__B_3__isitemindb
 use        "_gnatprove_standard".Main
 use        "int".Int

 val isitemindb [#"passwordmanager.adb" 92 0 0][@name:IsItemInDB] [@model_trace:145953] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "isitemindb" defined at passwordmanager.adb:92 instantiated at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__pm__is_website_registered_already__B_3__isitemindb___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at main.adb:88, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val s__split_fields [#"main.adb" 88 0 0][@model_trace:2402] [@model_projected] [@name:S]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at main.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:89, created in Gnat2Why.Decls.Translate_Variable *)
module Main__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 89 0 0][@model_projected] [@name:T] [@model_trace:2413]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:91, created in Gnat2Why.Decls.Translate_Variable *)
module Main__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 91 0 0][@model_projected] [@model_trace:2439] [@name:NumTokens]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "inputpintext" defined at main.adb:92, created in Gnat2Why.Decls.Translate_Variable *)
module Main__inputpintext
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val inputpintext [#"main.adb" 92 0 0][@model_trace:2448] [@model_projected] [@name:InputPinText]  : Array__Int__Standard__character.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "inputpintext" defined at main.adb:92, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__inputpintext___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "urltext" defined at main.adb:93, created in Gnat2Why.Decls.Translate_Variable *)
module Main__urltext
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val urltext__split_fields [#"main.adb" 93 0 0][@model_projected] [@name:UrlText] [@model_trace:2458]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "urltext" defined at main.adb:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__urltext___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "isitemindb" defined at main.adb:94, created in Gnat2Why.Decls.Translate_Variable *)
module Main__isitemindb
 use        "_gnatprove_standard".Main
 use        "int".Int

 val isitemindb [#"main.adb" 94 0 0][@name:IsItemInDB] [@model_trace:2474] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "isitemindb" defined at main.adb:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__isitemindb___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ispinvalid" defined at main.adb:102, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__ispinvalid
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ispinvalid [#"main.adb" 102 0 0][@model_trace:2487] [@model_projected] [@name:IsPinValid]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ispinvalid" defined at main.adb:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__ispinvalid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "islooprunning" defined at main.adb:103, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__islooprunning
 use        "_gnatprove_standard".Main
 use        "int".Int

 val islooprunning [#"main.adb" 103 0 0][@model_projected] [@model_trace:2497] [@name:IsLoopRunning]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islooprunning" defined at main.adb:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__islooprunning___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:111, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__L_2__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"main.adb" 111 0 0][@model_projected] [@name:I] [@model_trace:2533]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__L_2__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ch" defined at main.adb:113, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__B_3__ch
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ch [#"main.adb" 113 0 0][@model_projected] [@name:Ch] [@model_trace:2548]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ch" defined at main.adb:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__B_3__ch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenstr1" defined at main.adb:139, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__B_4__tokenstr1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val tokenstr1__split_fields [#"main.adb" 139 0 0][@model_trace:2608] [@model_projected] [@name:TokenStr1]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenstr1" defined at main.adb:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__B_4__tokenstr1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenstr2" defined at main.adb:140, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__B_4__tokenstr2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val tokenstr2__split_fields [#"main.adb" 140 0 0][@model_projected] [@name:TokenStr2] [@model_trace:2619]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenstr2" defined at main.adb:140, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__B_4__tokenstr2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenstr3" defined at main.adb:141, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_1__B_4__tokenstr3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val tokenstr3__split_fields [#"main.adb" 141 0 0][@model_trace:2630] [@model_projected] [@name:TokenStr3]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenstr3" defined at main.adb:141, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__B_4__tokenstr3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:70, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 70 0 0][@name:Tokens] [@model_projected] [@model_trace:16652]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 70 0 0][@name:Tokens] [@model_trace:16652'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 70 0 0][@name:Tokens] [@model_trace:16652'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:70, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 70 0 0][@model_trace:16661] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at s-finroo.ads:42, created in Gnat2Why.Decls.Translate_Variable *)
module System__finalization_root__adjust__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled

 val object__split_fields [#"s-finroo.ads" 42 0 0][@name:Object] [@model_projected] [@model_trace:15648]  : System__finalization_root__root_controlled.__split_fields__ref 
 
 val constant object__attr__tag [#"s-finroo.ads" 42 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at s-finroo.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__finalization_root__adjust__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at s-finroo.ads:43, created in Gnat2Why.Decls.Translate_Variable *)
module System__finalization_root__finalize__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled

 val object__split_fields [#"s-finroo.ads" 43 0 0][@name:Object] [@model_projected] [@model_trace:15666]  : System__finalization_root__root_controlled.__split_fields__ref 
 
 val constant object__attr__tag [#"s-finroo.ads" 43 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at s-finroo.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__finalization_root__finalize__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at s-finroo.ads:44, created in Gnat2Why.Decls.Translate_Variable *)
module System__finalization_root__initialize__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled

 val object__split_fields [#"s-finroo.ads" 44 0 0][@name:Object] [@model_trace:15684] [@model_projected]  : System__finalization_root__root_controlled.__split_fields__ref 
 
 val constant object__attr__tag [#"s-finroo.ads" 44 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at s-finroo.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__finalization_root__initialize__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at a-strunb.ads:748, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__adjust__2__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val object [#"a-strunb.ads" 748 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at a-strunb.ads:748, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__adjust__2__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at a-strunb.ads:749, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__finalize__2__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val object [#"a-strunb.ads" 749 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at a-strunb.ads:749, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__finalize__2__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "object" defined at a-strunb.ads:747, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__initialize__2__object
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val object [#"a-strunb.ads" 747 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "object" defined at a-strunb.ads:747, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__initialize__2__object___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "target" defined at a-strunb.ads:121, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__set_unbounded_string__target
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val target [#"a-strunb.ads" 121 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "target" defined at a-strunb.ads:121, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__set_unbounded_string__target___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:128, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__append__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 128 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:136, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__append__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 136 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:136, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:144, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__append__3__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 144 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:144, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__append__3__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:199, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__replace_element__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 199 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_element__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "target" defined at a-strunb.ads:229, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__unbounded_slice__2__target
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val target [#"a-strunb.ads" 229 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "target" defined at a-strunb.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__unbounded_slice__2__target___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "first" defined at a-strunb.ads:438, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__find_token__first
 use        "_gnatprove_standard".Main
 use        "int".Int

 val first [#"a-strunb.ads" 438 0 0][@model_projected] [@model_trace:32087] [@name:First]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "first" defined at a-strunb.ads:438, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__first___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-strunb.ads:439, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__find_token__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-strunb.ads" 439 0 0][@model_trace:32096] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-strunb.ads:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "first" defined at a-strunb.ads:449, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__find_token__2__first
 use        "_gnatprove_standard".Main
 use        "int".Int

 val first [#"a-strunb.ads" 449 0 0][@model_projected] [@model_trace:32165] [@name:First]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "first" defined at a-strunb.ads:449, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__2__first___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-strunb.ads:450, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__find_token__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-strunb.ads" 450 0 0][@model_trace:32174] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-strunb.ads:450, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__find_token__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:466, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__translate__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 466 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:466, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:480, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__translate__4__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 480 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:480, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__translate__4__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:512, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__replace_slice__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 512 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:512, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__replace_slice__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:543, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__insert__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 543 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:543, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__insert__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:567, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__overwrite__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 567 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:567, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__overwrite__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:595, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__delete__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 595 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:595, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__delete__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:615, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__trim__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 615 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:615, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:630, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__trim__4__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 630 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:630, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__trim__4__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:646, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__head__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 646 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:646, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__head__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "source" defined at a-strunb.ads:662, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__strings__unbounded__tail__2__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 val source [#"a-strunb.ads" 662 0 0] : Ada__strings__unbounded__unbounded_string.unbounded_string__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strunb.ads:662, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__unbounded__tail__2__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:82, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init_program" defined at passwordmanager.ads:16 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__init_program
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_pin_correct" defined at passwordmanager.ads:23 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__is_pin_correct
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function is_pin_correct 
   (pinvaluegiven : Standard__string.string) (main__pm__pinvaluesaved : int) : bool
 
 val predicate is_pin_correct__function_guard 
   (temp___result_164 : bool) (pinvaluegiven : Standard__string.string) (main__pm__pinvaluesaved : int)

end

(* Module for possibly declaring a logic function for "update_pin" defined at passwordmanager.ads:30 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__update_pin
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_password" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__put_password
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_password" defined at passwordmanager.ads:56 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__get_password
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database

 val function get_password 
   (u1 : Standard__string.string) (main__pm__db : Passworddatabase__database.database) : Standard__string.string
 
 val predicate get_password__function_guard 
   (temp___result_168 : Standard__string.string) (u1 : Standard__string.string) (main__pm__db : Passworddatabase__database.database)

end

(* Module for possibly declaring a logic function for "remove_password" defined at passwordmanager.ads:60 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__remove_password
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_db_length" defined at passwordmanager.ads:65 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__get_db_length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val function get_db_length 
   (main__pm__db : Passworddatabase__database.database) : int
 
 val predicate get_db_length__function_guard 
   (temp___result_170 : int) (main__pm__db : Passworddatabase__database.database)

end

(* Module for possibly declaring a logic function for "is_website_registered_already" defined at passwordmanager.ads:67 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__pm__is_website_registered_already
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database

 val function is_website_registered_already 
   (u1 : Standard__string.string) (main__pm__db : Passworddatabase__database.database) : bool
 
 val predicate is_website_registered_already__function_guard 
   (temp___result_171 : bool) (u1 : Standard__string.string) (main__pm__db : Passworddatabase__database.database)

end

(* Module for possibly declaring a logic function for "init" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at passworddatabase.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at passworddatabase.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:111, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_1__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "while_loop" defined at main.adb:145, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_1__B_4__while_loop
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception While_loop

end

(* Module giving an empty axiom for the entity "while_loop" defined at main.adb:145, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__B_4__while_loop___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "adjust" defined at s-finroo.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__finalization_root__adjust
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "finalize" defined at s-finroo.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__finalization_root__finalize
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "initialize" defined at s-finroo.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__finalization_root__initialize
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "adjust__2" defined at a-strunb.ads:748, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__adjust__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "finalize__2" defined at a-strunb.ads:749, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__finalize__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "initialize__2" defined at a-strunb.ads:747, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__initialize__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_unbounded_string" defined at a-strunb.ads:120, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__set_unbounded_string
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "append" defined at a-strunb.ads:127, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__append
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "append__2" defined at a-strunb.ads:135, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__append__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "append__3" defined at a-strunb.ads:143, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__append__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "replace_element" defined at a-strunb.ads:198, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__replace_element
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unbounded_slice__2" defined at a-strunb.ads:227, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__unbounded_slice__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "find_token" defined at a-strunb.ads:433, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__find_token
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "find_token__2" defined at a-strunb.ads:445, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__find_token__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "translate__2" defined at a-strunb.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__translate__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "replace_slice__2" defined at a-strunb.ads:511, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__replace_slice__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "insert__2" defined at a-strunb.ads:542, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__insert__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "overwrite__2" defined at a-strunb.ads:566, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__overwrite__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "delete__2" defined at a-strunb.ads:594, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__delete__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trim__2" defined at a-strunb.ads:614, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__trim__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trim__4" defined at a-strunb.ads:629, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__trim__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "head__2" defined at a-strunb.ads:645, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__head__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tail__2" defined at a-strunb.ads:661, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__unbounded__tail__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) =
  (if (( temp___is_init_226 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_230)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_231 : int) (temp___skip_top_level_232 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_231 : int) (temp___skip_top_level_232 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_231 : int) (temp___skip_top_level_232 : bool) }

end

(* Module giving axioms for type "root_controlled" defined at s-finroo.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__finalization_root__root_controlled___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled

 predicate dynamic_invariant [@inline] 
   (temp___expr_237 : System__finalization_root__root_controlled.root_controlled) (temp___is_init_233 : bool) (temp___skip_constant_234 : bool) (temp___do_toplevel_235 : bool) (temp___do_typ_inv_236 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_237 : System__finalization_root__root_controlled.root_controlled) (temp___is_init_233 : bool) (temp___skip_constant_234 : bool) (temp___do_toplevel_235 : bool) (temp___do_typ_inv_236 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_237 : System__finalization_root__root_controlled.root_controlled) (temp___is_init_233 : bool) (temp___skip_constant_234 : bool) (temp___do_toplevel_235 : bool) (temp___do_typ_inv_236 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_238 : System__finalization_root__root_controlled.root_controlled) (temp___skip_top_level_239 : bool) =
  ((System__finalization_root__root_controlled.attr__tag temp___expr_238) = System__finalization_root__root_controlled.__tag)
 val default_initial_assumption [@inline] 
   (temp___expr_238 : System__finalization_root__root_controlled.root_controlled) (temp___skip_top_level_239 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_238 : System__finalization_root__root_controlled.root_controlled) (temp___skip_top_level_239 : bool) }

end

(* Module giving axioms for type "unbounded_string" defined at a-strunb.ads:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__unbounded__unbounded_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_244 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_244 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_244 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : Ada__strings__unbounded__unbounded_string.unbounded_string) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (( temp___is_init_247 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_251)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : int) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) =
  (if (( temp___is_init_254 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_258)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_259 : int) (temp___skip_top_level_260 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) =
  (if (( temp___is_init_261 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_265)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_266 : int) (temp___skip_top_level_267 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_266 : int) (temp___skip_top_level_267 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_266 : int) (temp___skip_top_level_267 : bool) }

end

(* Module giving axioms for type "T13b" defined at mystring.ads:38 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_272 : Array__Int__Standard__character.map) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_272 : Array__Int__Standard__character.map) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_272 : Array__Int__Standard__character.map) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_274 : Array__Int__Standard__character.map) (temp___skip_top_level_275 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_274 : Array__Int__Standard__character.map) (temp___skip_top_level_275 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_274 : Array__Int__Standard__character.map) (temp___skip_top_level_275 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_282 : Main__lines__mystring.mystring) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_282 : Main__lines__mystring.mystring) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_282 : Main__lines__mystring.mystring) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_284 : Main__lines__mystring.mystring) (temp___skip_top_level_285 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_284 : Main__lines__mystring.mystring) (temp___skip_top_level_285 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_284 : Main__lines__mystring.mystring) (temp___skip_top_level_285 : bool) }

end

(* Module giving axioms for type "T10b" defined at mystring.ads:21 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_313 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) =
  (if (temp___skip_constant_310) then (
   true) else (
   ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Main__lines__to_string__TresultS.first temp___expr_313) (Main__lines__to_string__TresultS.last temp___expr_313)) /\ ( ((Main__lines__to_string__TresultS.first temp___expr_313) = (1 : int)) /\ ((Main__lines__to_string__TresultS.last temp___expr_313) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_313 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_313 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_315 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_316 : bool) =
  ( ( true /\ ((Main__lines__to_string__TresultS.first temp___expr_315) = (1 : int)) )/\((Main__lines__to_string__TresultS.last temp___expr_315) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_315 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_316 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_315 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_316 : bool) }

end

(* Module giving axioms for type "T50b" defined at mystring.adb:8 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T51b" defined at mystring.adb:8 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T51b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS53bP1" defined at mystring.adb:12 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__TS53bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S53b" defined at mystring.adb:12 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__S53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__from_string__S53b as Main__lines__from_string__S53b

 predicate dynamic_invariant [@inline] 
   (temp___expr_323 : Main__lines__from_string__S53b.s53b) (temp___is_init_319 : bool) (temp___skip_constant_320 : bool) (temp___do_toplevel_321 : bool) (temp___do_typ_inv_322 : bool) =
  (if (temp___skip_constant_320) then (
   true) else (
   ( (Main__lines__from_string__S53b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) (Main__lines__from_string__S53b.first temp___expr_323) (Main__lines__from_string__S53b.last temp___expr_323)) /\ ( ((Main__lines__from_string__S53b.first temp___expr_323) = (Standard__string.first Main__lines__from_string__s.s)) /\ ((Main__lines__from_string__S53b.last temp___expr_323) = (Standard__string.last Main__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_323 : Main__lines__from_string__S53b.s53b) (temp___is_init_319 : bool) (temp___skip_constant_320 : bool) (temp___do_toplevel_321 : bool) (temp___do_typ_inv_322 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_323 : Main__lines__from_string__S53b.s53b) (temp___is_init_319 : bool) (temp___skip_constant_320 : bool) (temp___do_toplevel_321 : bool) (temp___do_typ_inv_322 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_325 : Main__lines__from_string__S53b.s53b) (temp___skip_top_level_326 : bool) =
  ( ( true /\ ((Main__lines__from_string__S53b.first temp___expr_325) = (Standard__string.first Main__lines__from_string__s.s)) )/\((Main__lines__from_string__S53b.last temp___expr_325) = (Standard__string.last Main__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_325 : Main__lines__from_string__S53b.s53b) (temp___skip_top_level_326 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_325 : Main__lines__from_string__S53b.s53b) (temp___skip_top_level_326 : bool) }

end

(* Module giving axioms for type "T54b" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T56b" defined at mystring.adb:20 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__L_1__T56b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T67b" defined at mystring.adb:60 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L66b__T67b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T65b" defined at mystring.adb:60 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L64b__T65b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T70b" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T70b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T71b" defined at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T71b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T72b" defined at mystring.adb:75 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T72b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_335 : int) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) =
  (if (( temp___is_init_331 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_335)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_335 : int) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_335 : int) (temp___is_init_331 : bool) (temp___skip_constant_332 : bool) (temp___do_toplevel_333 : bool) (temp___do_typ_inv_334 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_336 : int) (temp___skip_top_level_337 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_336 : int) (temp___skip_top_level_337 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_336 : int) (temp___skip_top_level_337 : bool) }

end

(* Module giving axioms for type "database" defined at passworddatabase.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_342 : Passworddatabase__database.database) (temp___is_init_338 : bool) (temp___skip_constant_339 : bool) (temp___do_toplevel_340 : bool) (temp___do_typ_inv_341 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_342 : Passworddatabase__database.database) (temp___is_init_338 : bool) (temp___skip_constant_339 : bool) (temp___do_toplevel_340 : bool) (temp___do_typ_inv_341 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_342 : Passworddatabase__database.database) (temp___is_init_338 : bool) (temp___skip_constant_339 : bool) (temp___do_toplevel_340 : bool) (temp___do_typ_inv_341 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_343 : Passworddatabase__database.database) (temp___skip_top_level_344 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_343 : Passworddatabase__database.database) (temp___skip_top_level_344 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_343 : Passworddatabase__database.database) (temp___skip_top_level_344 : bool) }

end

(* Module giving axioms for type "T24b" defined at passwordmanager.ads:18 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__init_program__L23b__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at passwordmanager.ads:25 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__is_pin_correct__L25b__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at passwordmanager.ads:32 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__update_pin__L27b__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__Tcount_typeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__count_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__containers__count_type as Ada__containers__count_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_349 : int) (temp___is_init_345 : bool) (temp___skip_constant_346 : bool) (temp___do_toplevel_347 : bool) (temp___do_typ_inv_348 : bool) =
  (if (( temp___is_init_345 \/ (Ada__containers__count_type.first <= Ada__containers__count_type.last) )) then (
   (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last temp___expr_349)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_349 : int) (temp___is_init_345 : bool) (temp___skip_constant_346 : bool) (temp___do_toplevel_347 : bool) (temp___do_typ_inv_348 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_349 : int) (temp___is_init_345 : bool) (temp___skip_constant_346 : bool) (temp___do_toplevel_347 : bool) (temp___do_typ_inv_348 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_350 : int) (temp___skip_top_level_351 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_350 : int) (temp___skip_top_level_351 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_350 : int) (temp___skip_top_level_351 : bool) }

end

(* Module giving axioms for type "T28s" defined at mystring.ads:38 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_356 : Array__Int__Standard__character.map) (temp___is_init_352 : bool) (temp___skip_constant_353 : bool) (temp___do_toplevel_354 : bool) (temp___do_typ_inv_355 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_356 : Array__Int__Standard__character.map) (temp___is_init_352 : bool) (temp___skip_constant_353 : bool) (temp___do_toplevel_354 : bool) (temp___do_typ_inv_355 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_356 : Array__Int__Standard__character.map) (temp___is_init_352 : bool) (temp___skip_constant_353 : bool) (temp___do_toplevel_354 : bool) (temp___do_typ_inv_355 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_358 : Array__Int__Standard__character.map) (temp___skip_top_level_359 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_358 : Array__Int__Standard__character.map) (temp___skip_top_level_359 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_358 : Array__Int__Standard__character.map) (temp___skip_top_level_359 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_366 : Passworddatabase__urls__mystring.mystring) (temp___is_init_362 : bool) (temp___skip_constant_363 : bool) (temp___do_toplevel_364 : bool) (temp___do_typ_inv_365 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_366 : Passworddatabase__urls__mystring.mystring) (temp___is_init_362 : bool) (temp___skip_constant_363 : bool) (temp___do_toplevel_364 : bool) (temp___do_typ_inv_365 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_366 : Passworddatabase__urls__mystring.mystring) (temp___is_init_362 : bool) (temp___skip_constant_363 : bool) (temp___do_toplevel_364 : bool) (temp___do_typ_inv_365 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_368 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_369 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_368 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_369 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_368 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_369 : bool) }

end

(* Module giving axioms for type "url" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 predicate dynamic_invariant [@inline] 
   (temp___expr_378 : Passworddatabase__url.url) (temp___is_init_374 : bool) (temp___skip_constant_375 : bool) (temp___do_toplevel_376 : bool) (temp___do_typ_inv_377 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_378 : Passworddatabase__url.url) (temp___is_init_374 : bool) (temp___skip_constant_375 : bool) (temp___do_toplevel_376 : bool) (temp___do_typ_inv_377 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_378 : Passworddatabase__url.url) (temp___is_init_374 : bool) (temp___skip_constant_375 : bool) (temp___do_toplevel_376 : bool) (temp___do_typ_inv_377 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_380 : Passworddatabase__url.url) (temp___skip_top_level_381 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_380 : Passworddatabase__url.url) (temp___skip_top_level_381 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_380 : Passworddatabase__url.url) (temp___skip_top_level_381 : bool) }

end

(* Module giving axioms for type "TS74bP1" defined at passwordmanager.adb:5 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__init_program__TS74bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S74b" defined at passwordmanager.adb:5 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__init_program__S74b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__init_program__initialpin as Main__pm__init_program__initialpin
 use        Main__pm__init_program__S74b as Main__pm__init_program__S74b

 predicate dynamic_invariant [@inline] 
   (temp___expr_396 : Main__pm__init_program__S74b.s74b) (temp___is_init_392 : bool) (temp___skip_constant_393 : bool) (temp___do_toplevel_394 : bool) (temp___do_typ_inv_395 : bool) =
  (if (temp___skip_constant_393) then (
   true) else (
   ( (Main__pm__init_program__S74b.dynamic_property (Standard__string.first Main__pm__init_program__initialpin.initialpin) (Standard__string.last Main__pm__init_program__initialpin.initialpin) (Main__pm__init_program__S74b.first temp___expr_396) (Main__pm__init_program__S74b.last temp___expr_396)) /\ ( ((Main__pm__init_program__S74b.first temp___expr_396) = (Standard__string.first Main__pm__init_program__initialpin.initialpin)) /\ ((Main__pm__init_program__S74b.last temp___expr_396) = (Standard__string.last Main__pm__init_program__initialpin.initialpin)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_396 : Main__pm__init_program__S74b.s74b) (temp___is_init_392 : bool) (temp___skip_constant_393 : bool) (temp___do_toplevel_394 : bool) (temp___do_typ_inv_395 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_396 : Main__pm__init_program__S74b.s74b) (temp___is_init_392 : bool) (temp___skip_constant_393 : bool) (temp___do_toplevel_394 : bool) (temp___do_typ_inv_395 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_398 : Main__pm__init_program__S74b.s74b) (temp___skip_top_level_399 : bool) =
  ( ( true /\ ((Main__pm__init_program__S74b.first temp___expr_398) = (Standard__string.first Main__pm__init_program__initialpin.initialpin)) )/\((Main__pm__init_program__S74b.last temp___expr_398) = (Standard__string.last Main__pm__init_program__initialpin.initialpin)) )
 val default_initial_assumption [@inline] 
   (temp___expr_398 : Main__pm__init_program__S74b.s74b) (temp___skip_top_level_399 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_398 : Main__pm__init_program__S74b.s74b) (temp___skip_top_level_399 : bool) }

end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS75bP1" defined at passwordmanager.adb:14 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__is_pin_correct__TS75bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S75b" defined at passwordmanager.adb:14 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__is_pin_correct__S75b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__is_pin_correct__pinvaluegiven as Main__pm__is_pin_correct__pinvaluegiven
 use        Main__pm__is_pin_correct__S75b as Main__pm__is_pin_correct__S75b

 predicate dynamic_invariant [@inline] 
   (temp___expr_408 : Main__pm__is_pin_correct__S75b.s75b) (temp___is_init_404 : bool) (temp___skip_constant_405 : bool) (temp___do_toplevel_406 : bool) (temp___do_typ_inv_407 : bool) =
  (if (temp___skip_constant_405) then (
   true) else (
   ( (Main__pm__is_pin_correct__S75b.dynamic_property (Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) (Main__pm__is_pin_correct__S75b.first temp___expr_408) (Main__pm__is_pin_correct__S75b.last temp___expr_408)) /\ ( ((Main__pm__is_pin_correct__S75b.first temp___expr_408) = (Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) /\ ((Main__pm__is_pin_correct__S75b.last temp___expr_408) = (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_408 : Main__pm__is_pin_correct__S75b.s75b) (temp___is_init_404 : bool) (temp___skip_constant_405 : bool) (temp___do_toplevel_406 : bool) (temp___do_typ_inv_407 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_408 : Main__pm__is_pin_correct__S75b.s75b) (temp___is_init_404 : bool) (temp___skip_constant_405 : bool) (temp___do_toplevel_406 : bool) (temp___do_typ_inv_407 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_410 : Main__pm__is_pin_correct__S75b.s75b) (temp___skip_top_level_411 : bool) =
  ( ( true /\ ((Main__pm__is_pin_correct__S75b.first temp___expr_410) = (Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) )/\((Main__pm__is_pin_correct__S75b.last temp___expr_410) = (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) )
 val default_initial_assumption [@inline] 
   (temp___expr_410 : Main__pm__is_pin_correct__S75b.s75b) (temp___skip_top_level_411 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_410 : Main__pm__is_pin_correct__S75b.s75b) (temp___skip_top_level_411 : bool) }

end

(* Module giving axioms for type "TS78bP1" defined at passwordmanager.adb:27 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__update_pin__TS78bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S78b" defined at passwordmanager.adb:27 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__update_pin__S78b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__update_pin__pinvaluegiven as Main__pm__update_pin__pinvaluegiven
 use        Main__pm__update_pin__S78b as Main__pm__update_pin__S78b

 predicate dynamic_invariant [@inline] 
   (temp___expr_418 : Main__pm__update_pin__S78b.s78b) (temp___is_init_414 : bool) (temp___skip_constant_415 : bool) (temp___do_toplevel_416 : bool) (temp___do_typ_inv_417 : bool) =
  (if (temp___skip_constant_415) then (
   true) else (
   ( (Main__pm__update_pin__S78b.dynamic_property (Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven) (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven) (Main__pm__update_pin__S78b.first temp___expr_418) (Main__pm__update_pin__S78b.last temp___expr_418)) /\ ( ((Main__pm__update_pin__S78b.first temp___expr_418) = (Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) /\ ((Main__pm__update_pin__S78b.last temp___expr_418) = (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_418 : Main__pm__update_pin__S78b.s78b) (temp___is_init_414 : bool) (temp___skip_constant_415 : bool) (temp___do_toplevel_416 : bool) (temp___do_typ_inv_417 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_418 : Main__pm__update_pin__S78b.s78b) (temp___is_init_414 : bool) (temp___skip_constant_415 : bool) (temp___do_toplevel_416 : bool) (temp___do_typ_inv_417 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_420 : Main__pm__update_pin__S78b.s78b) (temp___skip_top_level_421 : bool) =
  ( ( true /\ ((Main__pm__update_pin__S78b.first temp___expr_420) = (Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) )/\((Main__pm__update_pin__S78b.last temp___expr_420) = (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) )
 val default_initial_assumption [@inline] 
   (temp___expr_420 : Main__pm__update_pin__S78b.s78b) (temp___skip_top_level_421 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_420 : Main__pm__update_pin__S78b.s78b) (temp___skip_top_level_421 : bool) }

end

(* Module giving axioms for type "TS80bP1" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__put_password__TS80bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S80b" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__put_password__S80b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__put_password__p1 as Main__pm__put_password__p1
 use        Main__pm__put_password__S80b as Main__pm__put_password__S80b

 predicate dynamic_invariant [@inline] 
   (temp___expr_428 : Main__pm__put_password__S80b.s80b) (temp___is_init_424 : bool) (temp___skip_constant_425 : bool) (temp___do_toplevel_426 : bool) (temp___do_typ_inv_427 : bool) =
  (if (temp___skip_constant_425) then (
   true) else (
   ( (Main__pm__put_password__S80b.dynamic_property (Standard__string.first Main__pm__put_password__p1.p1) (Standard__string.last Main__pm__put_password__p1.p1) (Main__pm__put_password__S80b.first temp___expr_428) (Main__pm__put_password__S80b.last temp___expr_428)) /\ ( ((Main__pm__put_password__S80b.first temp___expr_428) = (Standard__string.first Main__pm__put_password__p1.p1)) /\ ((Main__pm__put_password__S80b.last temp___expr_428) = (Standard__string.last Main__pm__put_password__p1.p1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_428 : Main__pm__put_password__S80b.s80b) (temp___is_init_424 : bool) (temp___skip_constant_425 : bool) (temp___do_toplevel_426 : bool) (temp___do_typ_inv_427 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_428 : Main__pm__put_password__S80b.s80b) (temp___is_init_424 : bool) (temp___skip_constant_425 : bool) (temp___do_toplevel_426 : bool) (temp___do_typ_inv_427 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_430 : Main__pm__put_password__S80b.s80b) (temp___skip_top_level_431 : bool) =
  ( ( true /\ ((Main__pm__put_password__S80b.first temp___expr_430) = (Standard__string.first Main__pm__put_password__p1.p1)) )/\((Main__pm__put_password__S80b.last temp___expr_430) = (Standard__string.last Main__pm__put_password__p1.p1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_430 : Main__pm__put_password__S80b.s80b) (temp___skip_top_level_431 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_430 : Main__pm__put_password__S80b.s80b) (temp___skip_top_level_431 : bool) }

end

(* Module giving axioms for type "TS79bP1" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__put_password__TS79bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S79b" defined at passwordmanager.adb:38 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__put_password__S79b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__put_password__u1 as Main__pm__put_password__u1
 use        Main__pm__put_password__S79b as Main__pm__put_password__S79b

 predicate dynamic_invariant [@inline] 
   (temp___expr_438 : Main__pm__put_password__S79b.s79b) (temp___is_init_434 : bool) (temp___skip_constant_435 : bool) (temp___do_toplevel_436 : bool) (temp___do_typ_inv_437 : bool) =
  (if (temp___skip_constant_435) then (
   true) else (
   ( (Main__pm__put_password__S79b.dynamic_property (Standard__string.first Main__pm__put_password__u1.u1) (Standard__string.last Main__pm__put_password__u1.u1) (Main__pm__put_password__S79b.first temp___expr_438) (Main__pm__put_password__S79b.last temp___expr_438)) /\ ( ((Main__pm__put_password__S79b.first temp___expr_438) = (Standard__string.first Main__pm__put_password__u1.u1)) /\ ((Main__pm__put_password__S79b.last temp___expr_438) = (Standard__string.last Main__pm__put_password__u1.u1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_438 : Main__pm__put_password__S79b.s79b) (temp___is_init_434 : bool) (temp___skip_constant_435 : bool) (temp___do_toplevel_436 : bool) (temp___do_typ_inv_437 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_438 : Main__pm__put_password__S79b.s79b) (temp___is_init_434 : bool) (temp___skip_constant_435 : bool) (temp___do_toplevel_436 : bool) (temp___do_typ_inv_437 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_440 : Main__pm__put_password__S79b.s79b) (temp___skip_top_level_441 : bool) =
  ( ( true /\ ((Main__pm__put_password__S79b.first temp___expr_440) = (Standard__string.first Main__pm__put_password__u1.u1)) )/\((Main__pm__put_password__S79b.last temp___expr_440) = (Standard__string.last Main__pm__put_password__u1.u1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_440 : Main__pm__put_password__S79b.s79b) (temp___skip_top_level_441 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_440 : Main__pm__put_password__S79b.s79b) (temp___skip_top_level_441 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_448 : Array__Int__Standard__character.map) (temp___is_init_444 : bool) (temp___skip_constant_445 : bool) (temp___do_toplevel_446 : bool) (temp___do_typ_inv_447 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_448 : Array__Int__Standard__character.map) (temp___is_init_444 : bool) (temp___skip_constant_445 : bool) (temp___do_toplevel_446 : bool) (temp___do_typ_inv_447 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_448 : Array__Int__Standard__character.map) (temp___is_init_444 : bool) (temp___skip_constant_445 : bool) (temp___do_toplevel_446 : bool) (temp___do_typ_inv_447 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_450 : Array__Int__Standard__character.map) (temp___skip_top_level_451 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_450 : Array__Int__Standard__character.map) (temp___skip_top_level_451 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_450 : Array__Int__Standard__character.map) (temp___skip_top_level_451 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at passworddatabase.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__passwords__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__passwords__mystring as Passworddatabase__passwords__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_458 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_454 : bool) (temp___skip_constant_455 : bool) (temp___do_toplevel_456 : bool) (temp___do_typ_inv_457 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_458 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_454 : bool) (temp___skip_constant_455 : bool) (temp___do_toplevel_456 : bool) (temp___do_typ_inv_457 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_458 : Passworddatabase__passwords__mystring.mystring) (temp___is_init_454 : bool) (temp___skip_constant_455 : bool) (temp___do_toplevel_456 : bool) (temp___do_typ_inv_457 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_460 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_461 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_460 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_461 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_460 : Passworddatabase__passwords__mystring.mystring) (temp___skip_top_level_461 : bool) }

end

(* Module giving axioms for type "password" defined at passworddatabase.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__password as Passworddatabase__password

 predicate dynamic_invariant [@inline] 
   (temp___expr_470 : Passworddatabase__password.password) (temp___is_init_466 : bool) (temp___skip_constant_467 : bool) (temp___do_toplevel_468 : bool) (temp___do_typ_inv_469 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_470 : Passworddatabase__password.password) (temp___is_init_466 : bool) (temp___skip_constant_467 : bool) (temp___do_toplevel_468 : bool) (temp___do_typ_inv_469 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_470 : Passworddatabase__password.password) (temp___is_init_466 : bool) (temp___skip_constant_467 : bool) (temp___do_toplevel_468 : bool) (temp___do_typ_inv_469 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_472 : Passworddatabase__password.password) (temp___skip_top_level_473 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_472 : Passworddatabase__password.password) (temp___skip_top_level_473 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_472 : Passworddatabase__password.password) (temp___skip_top_level_473 : bool) }

end

(* Module giving axioms for type "TS81bP1" defined at passwordmanager.adb:47 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__get_password__TS81bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S81b" defined at passwordmanager.adb:47 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__get_password__S81b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__get_password__u1 as Main__pm__get_password__u1
 use        Main__pm__get_password__S81b as Main__pm__get_password__S81b

 predicate dynamic_invariant [@inline] 
   (temp___expr_488 : Main__pm__get_password__S81b.s81b) (temp___is_init_484 : bool) (temp___skip_constant_485 : bool) (temp___do_toplevel_486 : bool) (temp___do_typ_inv_487 : bool) =
  (if (temp___skip_constant_485) then (
   true) else (
   ( (Main__pm__get_password__S81b.dynamic_property (Standard__string.first Main__pm__get_password__u1.u1) (Standard__string.last Main__pm__get_password__u1.u1) (Main__pm__get_password__S81b.first temp___expr_488) (Main__pm__get_password__S81b.last temp___expr_488)) /\ ( ((Main__pm__get_password__S81b.first temp___expr_488) = (Standard__string.first Main__pm__get_password__u1.u1)) /\ ((Main__pm__get_password__S81b.last temp___expr_488) = (Standard__string.last Main__pm__get_password__u1.u1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_488 : Main__pm__get_password__S81b.s81b) (temp___is_init_484 : bool) (temp___skip_constant_485 : bool) (temp___do_toplevel_486 : bool) (temp___do_typ_inv_487 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_488 : Main__pm__get_password__S81b.s81b) (temp___is_init_484 : bool) (temp___skip_constant_485 : bool) (temp___do_toplevel_486 : bool) (temp___do_typ_inv_487 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_490 : Main__pm__get_password__S81b.s81b) (temp___skip_top_level_491 : bool) =
  ( ( true /\ ((Main__pm__get_password__S81b.first temp___expr_490) = (Standard__string.first Main__pm__get_password__u1.u1)) )/\((Main__pm__get_password__S81b.last temp___expr_490) = (Standard__string.last Main__pm__get_password__u1.u1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_490 : Main__pm__get_password__S81b.s81b) (temp___skip_top_level_491 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_490 : Main__pm__get_password__S81b.s81b) (temp___skip_top_level_491 : bool) }

end

(* Module giving axioms for type "T84b" defined at passwordmanager.adb:59 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__get_password__T84b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS85bP1" defined at passwordmanager.adb:62 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__remove_password__TS85bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S85b" defined at passwordmanager.adb:62 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__remove_password__S85b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__remove_password__u1 as Main__pm__remove_password__u1
 use        Main__pm__remove_password__S85b as Main__pm__remove_password__S85b

 predicate dynamic_invariant [@inline] 
   (temp___expr_503 : Main__pm__remove_password__S85b.s85b) (temp___is_init_499 : bool) (temp___skip_constant_500 : bool) (temp___do_toplevel_501 : bool) (temp___do_typ_inv_502 : bool) =
  (if (temp___skip_constant_500) then (
   true) else (
   ( (Main__pm__remove_password__S85b.dynamic_property (Standard__string.first Main__pm__remove_password__u1.u1) (Standard__string.last Main__pm__remove_password__u1.u1) (Main__pm__remove_password__S85b.first temp___expr_503) (Main__pm__remove_password__S85b.last temp___expr_503)) /\ ( ((Main__pm__remove_password__S85b.first temp___expr_503) = (Standard__string.first Main__pm__remove_password__u1.u1)) /\ ((Main__pm__remove_password__S85b.last temp___expr_503) = (Standard__string.last Main__pm__remove_password__u1.u1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_503 : Main__pm__remove_password__S85b.s85b) (temp___is_init_499 : bool) (temp___skip_constant_500 : bool) (temp___do_toplevel_501 : bool) (temp___do_typ_inv_502 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_503 : Main__pm__remove_password__S85b.s85b) (temp___is_init_499 : bool) (temp___skip_constant_500 : bool) (temp___do_toplevel_501 : bool) (temp___do_typ_inv_502 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_505 : Main__pm__remove_password__S85b.s85b) (temp___skip_top_level_506 : bool) =
  ( ( true /\ ((Main__pm__remove_password__S85b.first temp___expr_505) = (Standard__string.first Main__pm__remove_password__u1.u1)) )/\((Main__pm__remove_password__S85b.last temp___expr_505) = (Standard__string.last Main__pm__remove_password__u1.u1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_505 : Main__pm__remove_password__S85b.s85b) (temp___skip_top_level_506 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_505 : Main__pm__remove_password__S85b.s85b) (temp___skip_top_level_506 : bool) }

end

(* Module giving axioms for type "TS88bP1" defined at passwordmanager.adb:89 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__is_website_registered_already__TS88bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S88b" defined at passwordmanager.adb:89 instantiated at main.adb:87, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__pm__is_website_registered_already__S88b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__pm__is_website_registered_already__u1 as Main__pm__is_website_registered_already__u1
 use        Main__pm__is_website_registered_already__S88b as Main__pm__is_website_registered_already__S88b

 predicate dynamic_invariant [@inline] 
   (temp___expr_515 : Main__pm__is_website_registered_already__S88b.s88b) (temp___is_init_511 : bool) (temp___skip_constant_512 : bool) (temp___do_toplevel_513 : bool) (temp___do_typ_inv_514 : bool) =
  (if (temp___skip_constant_512) then (
   true) else (
   ( (Main__pm__is_website_registered_already__S88b.dynamic_property (Standard__string.first Main__pm__is_website_registered_already__u1.u1) (Standard__string.last Main__pm__is_website_registered_already__u1.u1) (Main__pm__is_website_registered_already__S88b.first temp___expr_515) (Main__pm__is_website_registered_already__S88b.last temp___expr_515)) /\ ( ((Main__pm__is_website_registered_already__S88b.first temp___expr_515) = (Standard__string.first Main__pm__is_website_registered_already__u1.u1)) /\ ((Main__pm__is_website_registered_already__S88b.last temp___expr_515) = (Standard__string.last Main__pm__is_website_registered_already__u1.u1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_515 : Main__pm__is_website_registered_already__S88b.s88b) (temp___is_init_511 : bool) (temp___skip_constant_512 : bool) (temp___do_toplevel_513 : bool) (temp___do_typ_inv_514 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_515 : Main__pm__is_website_registered_already__S88b.s88b) (temp___is_init_511 : bool) (temp___skip_constant_512 : bool) (temp___do_toplevel_513 : bool) (temp___do_typ_inv_514 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_517 : Main__pm__is_website_registered_already__S88b.s88b) (temp___skip_top_level_518 : bool) =
  ( ( true /\ ((Main__pm__is_website_registered_already__S88b.first temp___expr_517) = (Standard__string.first Main__pm__is_website_registered_already__u1.u1)) )/\((Main__pm__is_website_registered_already__S88b.last temp___expr_517) = (Standard__string.last Main__pm__is_website_registered_already__u1.u1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_517 : Main__pm__is_website_registered_already__S88b.s88b) (temp___skip_top_level_518 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_517 : Main__pm__is_website_registered_already__S88b.s88b) (temp___skip_top_level_518 : bool) }

end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_525 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_521 : bool) (temp___skip_constant_522 : bool) (temp___do_toplevel_523 : bool) (temp___do_typ_inv_524 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_525 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_521 : bool) (temp___skip_constant_522 : bool) (temp___do_toplevel_523 : bool) (temp___do_typ_inv_524 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_525 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_521 : bool) (temp___skip_constant_522 : bool) (temp___do_toplevel_523 : bool) (temp___do_typ_inv_524 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_526 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_527 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_526 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_527 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_526 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_527 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_534 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_530 : bool) (temp___skip_constant_531 : bool) (temp___do_toplevel_532 : bool) (temp___do_typ_inv_533 : bool) =
  (if (temp___skip_constant_531) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_534) (Mystringtokeniser__tokenarray.last temp___expr_534))))
 val dynamic_invariant [@inline] 
   (temp___expr_534 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_530 : bool) (temp___skip_constant_531 : bool) (temp___do_toplevel_532 : bool) (temp___do_typ_inv_533 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_534 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_530 : bool) (temp___skip_constant_531 : bool) (temp___do_toplevel_532 : bool) (temp___do_typ_inv_533 : bool) }

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_540 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_536 : bool) (temp___skip_constant_537 : bool) (temp___do_toplevel_538 : bool) (temp___do_typ_inv_539 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_540 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_536 : bool) (temp___skip_constant_537 : bool) (temp___do_toplevel_538 : bool) (temp___do_typ_inv_539 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_540 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_536 : bool) (temp___skip_constant_537 : bool) (temp___do_toplevel_538 : bool) (temp___do_typ_inv_539 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_542 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_543 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_542 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_543 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_542 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_543 : bool) }

end

(* Module giving axioms for type "T29b" defined at main.adb:90, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at main.adb:90, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTinputpintextSP1" defined at main.adb:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTinputpintextSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TinputpintextS" defined at main.adb:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TinputpintextS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_552 : Array__Int__Standard__character.map) (temp___is_init_548 : bool) (temp___skip_constant_549 : bool) (temp___do_toplevel_550 : bool) (temp___do_typ_inv_551 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_552 : Array__Int__Standard__character.map) (temp___is_init_548 : bool) (temp___skip_constant_549 : bool) (temp___do_toplevel_550 : bool) (temp___do_typ_inv_551 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_552 : Array__Int__Standard__character.map) (temp___is_init_548 : bool) (temp___skip_constant_549 : bool) (temp___do_toplevel_550 : bool) (temp___do_typ_inv_551 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_554 : Array__Int__Standard__character.map) (temp___skip_top_level_555 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_554 : Array__Int__Standard__character.map) (temp___skip_top_level_555 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_554 : Array__Int__Standard__character.map) (temp___skip_top_level_555 : bool) }

end

(* Module giving axioms for type "T31b" defined at main.adb:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at main.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at main.adb:111, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__L_2__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at main.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__L36b__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at main.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__L34b__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at main.adb:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at main.adb:199, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41b" defined at main.adb:206, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__L40b__T41b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at main.adb:231, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T43b" defined at main.adb:269, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T43b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T44b" defined at main.adb:285, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at main.adb:307, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46b" defined at main.adb:328, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__T46b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48b" defined at main.adb:343, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__B_4__while_loop__L47b__T48b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T49b" defined at main.adb:383, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "direction" defined at a-string.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__direction___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__direction as Ada__strings__direction

 predicate dynamic_invariant [@inline] 
   (temp___expr_605 : int) (temp___is_init_601 : bool) (temp___skip_constant_602 : bool) (temp___do_toplevel_603 : bool) (temp___do_typ_inv_604 : bool) =
  (if (( temp___is_init_601 \/ (Ada__strings__direction.first <= Ada__strings__direction.last) )) then (
   (Ada__strings__direction.dynamic_property Ada__strings__direction.first Ada__strings__direction.last temp___expr_605)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_605 : int) (temp___is_init_601 : bool) (temp___skip_constant_602 : bool) (temp___do_toplevel_603 : bool) (temp___do_typ_inv_604 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_605 : int) (temp___is_init_601 : bool) (temp___skip_constant_602 : bool) (temp___do_toplevel_603 : bool) (temp___do_typ_inv_604 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_606 : int) (temp___skip_top_level_607 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_606 : int) (temp___skip_top_level_607 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_606 : int) (temp___skip_top_level_607 : bool) }

end

(* Module giving axioms for type "Tcharacter_mappingB" defined at a-strmap.ads:149, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__maps__Tcharacter_mappingB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "character_mapping" defined at a-strmap.ads:149, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__maps__character_mapping___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_612 : Array__Int__Standard__character.map) (temp___is_init_608 : bool) (temp___skip_constant_609 : bool) (temp___do_toplevel_610 : bool) (temp___do_typ_inv_611 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_612 : Array__Int__Standard__character.map) (temp___is_init_608 : bool) (temp___skip_constant_609 : bool) (temp___do_toplevel_610 : bool) (temp___do_typ_inv_611 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_612 : Array__Int__Standard__character.map) (temp___is_init_608 : bool) (temp___skip_constant_609 : bool) (temp___do_toplevel_610 : bool) (temp___do_typ_inv_611 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_614 : Array__Int__Standard__character.map) (temp___skip_top_level_615 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_614 : Array__Int__Standard__character.map) (temp___skip_top_level_615 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_614 : Array__Int__Standard__character.map) (temp___skip_top_level_615 : bool) }

end

(* Module giving axioms for type "Tcharacter_set_internalB" defined at a-strmap.ads:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__maps__Tcharacter_set_internalB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tcharacter_setB" defined at a-strmap.ads:140, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__maps__Tcharacter_setB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "character_set" defined at a-strmap.ads:140, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__maps__character_set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 predicate dynamic_invariant [@inline] 
   (temp___expr_626 : Array__Int__Bool.map) (temp___is_init_622 : bool) (temp___skip_constant_623 : bool) (temp___do_toplevel_624 : bool) (temp___do_typ_inv_625 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_626 : Array__Int__Bool.map) (temp___is_init_622 : bool) (temp___skip_constant_623 : bool) (temp___do_toplevel_624 : bool) (temp___do_typ_inv_625 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_626 : Array__Int__Bool.map) (temp___is_init_622 : bool) (temp___skip_constant_623 : bool) (temp___do_toplevel_624 : bool) (temp___do_typ_inv_625 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_628 : Array__Int__Bool.map) (temp___skip_top_level_629 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_628 : Array__Int__Bool.map) (temp___skip_top_level_629 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_628 : Array__Int__Bool.map) (temp___skip_top_level_629 : bool) }

end

(* Module giving axioms for type "membership" defined at a-string.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__membership___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__membership as Ada__strings__membership

 predicate dynamic_invariant [@inline] 
   (temp___expr_636 : int) (temp___is_init_632 : bool) (temp___skip_constant_633 : bool) (temp___do_toplevel_634 : bool) (temp___do_typ_inv_635 : bool) =
  (if (( temp___is_init_632 \/ (Ada__strings__membership.first <= Ada__strings__membership.last) )) then (
   (Ada__strings__membership.dynamic_property Ada__strings__membership.first Ada__strings__membership.last temp___expr_636)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_636 : int) (temp___is_init_632 : bool) (temp___skip_constant_633 : bool) (temp___do_toplevel_634 : bool) (temp___do_typ_inv_635 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_636 : int) (temp___is_init_632 : bool) (temp___skip_constant_633 : bool) (temp___do_toplevel_634 : bool) (temp___do_typ_inv_635 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_637 : int) (temp___skip_top_level_638 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_637 : int) (temp___skip_top_level_638 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_637 : int) (temp___skip_top_level_638 : bool) }

end

(* Module giving axioms for type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__trim_end___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__trim_end as Ada__strings__trim_end

 predicate dynamic_invariant [@inline] 
   (temp___expr_671 : int) (temp___is_init_667 : bool) (temp___skip_constant_668 : bool) (temp___do_toplevel_669 : bool) (temp___do_typ_inv_670 : bool) =
  (if (( temp___is_init_667 \/ (Ada__strings__trim_end.first <= Ada__strings__trim_end.last) )) then (
   (Ada__strings__trim_end.dynamic_property Ada__strings__trim_end.first Ada__strings__trim_end.last temp___expr_671)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_671 : int) (temp___is_init_667 : bool) (temp___skip_constant_668 : bool) (temp___do_toplevel_669 : bool) (temp___do_typ_inv_670 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_671 : int) (temp___is_init_667 : bool) (temp___skip_constant_668 : bool) (temp___do_toplevel_669 : bool) (temp___do_typ_inv_670 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_672 : int) (temp___skip_top_level_673 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_672 : int) (temp___skip_top_level_673 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_672 : int) (temp___skip_top_level_673 : bool) }

end

(* Module for declaring an abstract function for the aggregate at main.adb:90, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__t__aggregate_def 
   (temp___685 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:92, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_687
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_687 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_687__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_687 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_687 __void_param) (1 : int))) = (49 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_687 __void_param) (2 : int))) = (50 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_687 __void_param) (3 : int))) = (51 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_687 __void_param) (4 : int))) = (52 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_688
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_688 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_688__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_688 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_688 __void_param) (1 : int))) = (119 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_688 __void_param) (2 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_688 __void_param) (3 : int))) = (119 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:169, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_693
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_693 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_693__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_693 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (6 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (8 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (9 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_693 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:285, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_698
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_698 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_698__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_698 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_698 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_698 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_698 __void_param) (3 : int))) = (109 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:269, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_703
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_703 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_703__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_703 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_703 __void_param) (1 : int))) = (103 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_703 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_703 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:231, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_710
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_710 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_710__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_710 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_710 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_710 __void_param) (2 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_710 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:199, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_715
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_715 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_715__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_715 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_715 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_715 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_715 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_715 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:307, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_720
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_720 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_720__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_720 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (7 : int))) = (62 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_720 __void_param) (8 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:328, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_725
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_725 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_725__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_725 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_725 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:383, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_761
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_761 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_761__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_761 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (9 : int))) = (73 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (10 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (11 : int))) = (112 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (13 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (14 : int))) = (44 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (15 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (16 : int))) = (66 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (17 : int))) = (89 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (18 : int))) = (69 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_761 __void_param) (19 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_773
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_773 
   (temp___775 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_816
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_816 
   (temp___818 : int) : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at passwordmanager.adb:59 instantiated at main.adb:87, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_842
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_842 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_842__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_842 __void_param)].
   true)

end
(* Module for defining the value of constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (31 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:84, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Main__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "max_entries" defined at passworddatabase.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_entries___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_entries as Passworddatabase__max_entries

 axiom max_entries__def_axiom :
  ((Passworddatabase__max_entries.max_entries ) = (1000 : int))

end

(* Module for defining the value of constant "max_url_length" defined at passworddatabase.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_url_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length

 axiom max_url_length__def_axiom :
  ((Passworddatabase__max_url_length.max_url_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_password_length" defined at passworddatabase.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_password_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length

 axiom max_password_length__def_axiom :
  ((Passworddatabase__max_password_length.max_password_length ) = (100 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "length" defined at a-strunb.ads:92, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val length 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__length.length source)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom length__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__length.length source)].
   ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) -> (let result = (Ada__strings__unbounded__length.length source) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:82, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep

 val length 
   (m : Main__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:113526] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__length.length m) in (
    (if ((Main__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:113526] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Main__lines__length.length m) in (
    (Main__lines__length.length__function_guard result m)))
    ) -> ((Main__lines__length.length m) = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Main__lines__to_string.to_string m)) /\ (Main__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:112959] ((Standard__string.length result) = (epsilon temp___result_290 : int.
   ( (temp___result_290 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_290 m) ))) ) /\ ( [@GP_Pretty_Ada:112966] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:112971] ((Standard__string.last result) = (epsilon temp___result_291 : int.
   ( (temp___result_291 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_291 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__to_string.to_string m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__to_string.to_string m) in (
    (if ((Main__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:112959] ((Standard__string.length result) = (epsilon temp___result_292 : int.
      ( (temp___result_292 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_292 m) ))) ) /\ ( [@GP_Pretty_Ada:112966] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:112971] ((Standard__string.last result) = (epsilon temp___result_293 : int.
      ( (temp___result_293 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_293 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__from_string as Main__lines__from_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:113444] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Main__lines__from_string.from_string s)) /\ (Main__lines__from_string.from_string__function_guard result s) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:113458] ((epsilon temp___result_294 : int.
   ( (temp___result_294 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_294 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Main__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:113444] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Main__lines__from_string.from_string s) in (
    (if ((Main__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:113458] ((epsilon temp___result_295 : int.
      ( (temp___result_295 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_295 result) )) = (Standard__string.length s)) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less as Main__lines__less

 val less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__less.less m1 m2)) /\ (Main__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Main__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:113594] (index <= (epsilon temp___result_296 : int.
   ( (temp___result_296 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_296 m) ))) ) }
  ensures {  ( ( (result = (Main__lines__get.get m index)) /\ (Main__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___297 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___297 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:113594] (index <= (epsilon temp___result_298 : int.
    ( (temp___result_298 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_298 m) ))) ) ) -> (let result = (Main__lines__get.get m index) in (
    (if ((Main__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Main__lines__get.get m index) in (
    (Main__lines__get.get__function_guard result m index)))
    ) -> ((Main__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___299 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___299 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__equal as Main__lines__equal

 val equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__equal.equal m1 m2)) /\ (Main__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:113065] ((epsilon temp___result_300 : int.
    ( (temp___result_300 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_300 m1) )) = (epsilon temp___result_301 : int.
    ( (temp___result_301 = (Main__lines__length.length m2)) /\ (Main__lines__length.length__function_guard temp___result_301 m2) ))) ) /\ (forall i   [@model_trace:113083] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_302 : int.
     ( (temp___result_302 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_302 m1) ))) ) -> ( [@GP_Pretty_Ada:113073] ((epsilon temp___result_303 : int.
     ( (temp___result_303 = (Main__lines__get.get m1 i)) /\ (Main__lines__get.get__function_guard temp___result_303 m1 i) )) = (epsilon temp___result_304 : int.
     ( (temp___result_304 = (Main__lines__get.get m2 i)) /\ (Main__lines__get.get__function_guard temp___result_304 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:113672] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__substring as Main__lines__substring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:113151] (from <= to__) ) /\ ( [@GP_Pretty_Ada:113154] (to__ <= (epsilon temp___result_305 : int.
   ( (temp___result_305 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_305 m) ))) ) ) }
  ensures {  ( ( (result = (Main__lines__substring.substring m from to__)) /\ (Main__lines__substring.substring__function_guard result m from to__) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:113567] ((epsilon temp___result_306 : int.
   ( (temp___result_306 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_306 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall from   to__   : int [(Main__lines__substring.substring m from to__)].
   ( ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:113151] (from <= to__) ) /\ ( [@GP_Pretty_Ada:113154] (to__ <= (epsilon temp___result_307 : int.
    ( (temp___result_307 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_307 m) ))) ) ) ) -> (let result = (Main__lines__substring.substring m from to__) in (
    (if ((Main__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:113567] ((epsilon temp___result_308 : int.
      ( (temp___result_308 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_308 result) )) = ((to__ - from) + (1 : int))) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Main__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:23345] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:23351] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:23360] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:23371] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "init_program" defined at passwordmanager.ads:16 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__init_program___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val init_program 
   (initialpin : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:113854] ((Standard__string.length initialpin) = (4 : int)) ) /\ (forall i   [@model_trace:113879] [@name:I]  : int.
   ( ( ((Standard__string.first initialpin) <= i) /\ (i <= (Standard__string.last initialpin)) ) -> ( ( [@GP_Pretty_Ada:113860] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array initialpin) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113869] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array initialpin) i))) ) ) )) ) }
  ensures {  ( (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content True True True True) /\ (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True True True True) ) }
  writes {Main__pm__pinvaluesaved.pinvaluesaved, Main__pm__db.db}

end

(* Module for declaring a program function (and possibly an axiom) for "is_pin_correct" defined at passwordmanager.ads:23 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__is_pin_correct___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Main__pm__is_pin_correct as Main__pm__is_pin_correct
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val is_pin_correct 
   (pinvaluegiven : Standard__string.string) : bool
  requires {  ( ( [@GP_Pretty_Ada:113909] ((Standard__string.length pinvaluegiven) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:113934]  : int.
   ( ( ((Standard__string.first pinvaluegiven) <= i) /\ (i <= (Standard__string.last pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113915] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113924] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i))) ) ) )) ) }
  ensures {  ( ( (result = (Main__pm__is_pin_correct.is_pin_correct pinvaluegiven Main__pm__pinvaluesaved.pinvaluesaved.int__content)) /\ (Main__pm__is_pin_correct.is_pin_correct__function_guard result pinvaluegiven Main__pm__pinvaluesaved.pinvaluesaved.int__content) )/\true ) }
  reads {Main__pm__pinvaluesaved.pinvaluesaved}
 
 axiom is_pin_correct__post_axiom :
  (forall pinvaluegiven   : Standard__string.string.
  (forall main__pm__pinvaluesaved   : int [(Main__pm__is_pin_correct.is_pin_correct pinvaluegiven main__pm__pinvaluesaved)].
   ( ( ( (Standard__string___axiom.dynamic_invariant pinvaluegiven True True True True) /\ (Pin__pin___axiom.dynamic_invariant main__pm__pinvaluesaved True True True True) ) /\ ( ( [@GP_Pretty_Ada:113909] ((Standard__string.length pinvaluegiven) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:113934]  : int.
    ( ( ((Standard__string.first pinvaluegiven) <= i) /\ (i <= (Standard__string.last pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113915] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113924] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i))) ) ) )) ) ) -> (let result = (Main__pm__is_pin_correct.is_pin_correct pinvaluegiven main__pm__pinvaluesaved) in (
    (if ((Main__pm__is_pin_correct.is_pin_correct__function_guard result pinvaluegiven main__pm__pinvaluesaved)) then (
     ( ( true /\ true )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "update_pin" defined at passwordmanager.ads:30 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__update_pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val update_pin 
   (pinvaluegiven : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:113965] ((Standard__string.length pinvaluegiven) = (4 : int)) ) /\ (forall i   [@model_trace:113990] [@name:I]  : int.
   ( ( ((Standard__string.first pinvaluegiven) <= i) /\ (i <= (Standard__string.last pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113971] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113980] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array pinvaluegiven) i))) ) ) )) ) }
  ensures {  (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content True True True True) }
  writes {Main__pm__pinvaluesaved.pinvaluesaved}

end

(* Module for declaring a program function (and possibly an axiom) for "length__3" defined at passworddatabase.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Ada__containers__count_type as Ada__containers__count_type
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val length__3 
   (d : Passworddatabase__database.database) : int
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__length__3.length__3 d)) /\ (Passworddatabase__length__3.length__3__function_guard result d) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom length__3__post_axiom :
  (forall d   : Passworddatabase__database.database [(Passworddatabase__length__3.length__3 d)].
   (let result = (Passworddatabase__length__3.length__3 d) in (
    (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "from_string__2" defined at passworddatabase.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
  requires {  ( [@GP_Pretty_Ada:74910] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard result s) )/\(Passworddatabase__url___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "has_password_for" defined at passworddatabase.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__has_password_for___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for

 val has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__has_password_for.has_password_for d u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard result d u) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "put_password" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__put_password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val put_password 
   (u1 : Standard__string.string) (p1 : Standard__string.string) : unit
  requires {  ( ( (if (((Standard__string.length u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114027] ((Standard__string.first u1) <= (Standard__string.last u1)) ) /\ ( [@GP_Pretty_Ada:114032] ((Standard__string.length u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114716] true ))) /\ (if (((Standard__string.length p1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114042] ((Standard__string.first p1) <= (Standard__string.last p1)) ) /\ ( [@GP_Pretty_Ada:114047] ((Standard__string.length p1) <= (100 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114722] true ))) ) /\ ( [@GP_Pretty_Ada:114051] ( ((epsilon temp___result_389 : int.
   ( (temp___result_389 = (Passworddatabase__length__3.length__3 Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_389 Main__pm__db.db.Passworddatabase__database.database__content) )) < (1000 : int)) \/ (if ((if (((Standard__string.length u1) > (0 : int))) then (
   ( ((Standard__string.first u1) <= (Standard__string.last u1)) /\ ((Standard__string.length u1) <= (1024 : int)) )) else (
   true))) then (
   ((epsilon temp___result_391 : bool.
    ( (temp___result_391 = (Passworddatabase__has_password_for.has_password_for Main__pm__db.db.Passworddatabase__database.database__content (epsilon temp___result_390 : Passworddatabase__url.url.
     ( (temp___result_390 = (Passworddatabase__from_string__2.from_string__2 u1)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_390 u1) )))) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_391 Main__pm__db.db.Passworddatabase__database.database__content (epsilon temp___result_390 : Passworddatabase__url.url.
     ( (temp___result_390 = (Passworddatabase__from_string__2.from_string__2 u1)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_390 u1) ))) )) = True)) else (
   true)) ) ) ) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True True True True) }
  reads {Main__pm__db.db}
  writes {Main__pm__db.db}

end

(* Module for declaring a program function (and possibly an axiom) for "get_password" defined at passwordmanager.ads:56 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__get_password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__get_password as Main__pm__get_password

 val get_password 
   (u1 : Standard__string.string) : Standard__string.string
  requires {  (if (((Standard__string.length u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114122] ((Standard__string.first u1) <= (Standard__string.last u1)) ) /\ ( [@GP_Pretty_Ada:114127] ((Standard__string.length u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114734] true ))) }
  ensures {  ( ( (result = (Main__pm__get_password.get_password u1 Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Main__pm__get_password.get_password__function_guard result u1 Main__pm__db.db.Passworddatabase__database.database__content) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
  reads {Main__pm__db.db}

end

(* Module for declaring a program function (and possibly an axiom) for "remove_password" defined at passwordmanager.ads:60 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__remove_password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val remove_password 
   (u1 : Standard__string.string) : unit
  requires {  (if (((Standard__string.length u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114158] ((Standard__string.first u1) <= (Standard__string.last u1)) ) /\ ( [@GP_Pretty_Ada:114163] ((Standard__string.length u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114744] true ))) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True True True True) }
  reads {Main__pm__db.db}
  writes {Main__pm__db.db}

end

(* Module for declaring a program function (and possibly an axiom) for "get_db_size" defined at passwordmanager.ads:63 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__get_db_size___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__pm__get_db_size as Main__pm__get_db_size
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val get_db_size 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Main__pm__get_db_size.get_db_size ())) /\ (Main__pm__get_db_size.get_db_size__function_guard result ()) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_db_size__post_axiom :
  (forall __void_param   : unit [(Main__pm__get_db_size.get_db_size __void_param)].
   ( true -> (let result = (Main__pm__get_db_size.get_db_size __void_param) in (
    (if ((Main__pm__get_db_size.get_db_size__function_guard result __void_param)) then (
     ( ( true /\ (Ada__containers__count_type___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_db_length" defined at passwordmanager.ads:65 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__get_db_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__get_db_length as Main__pm__get_db_length
 use        Ada__containers__count_type as Ada__containers__count_type
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val get_db_length 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Main__pm__get_db_length.get_db_length Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Main__pm__get_db_length.get_db_length__function_guard result Main__pm__db.db.Passworddatabase__database.database__content) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
  reads {Main__pm__db.db}
 
 axiom get_db_length__post_axiom :
  (forall main__pm__db   : Passworddatabase__database.database [(Main__pm__get_db_length.get_db_length main__pm__db)].
   (let result = (Main__pm__get_db_length.get_db_length main__pm__db) in (
    (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "is_website_registered_already" defined at passwordmanager.ads:67 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__pm__is_website_registered_already___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__is_website_registered_already as Main__pm__is_website_registered_already

 val is_website_registered_already 
   (u1 : Standard__string.string) : bool
  requires {  (if (((Standard__string.length u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114221] ((Standard__string.first u1) <= (Standard__string.last u1)) ) /\ ( [@GP_Pretty_Ada:114226] ((Standard__string.length u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114754] true ))) }
  ensures {  ( ( (result = (Main__pm__is_website_registered_already.is_website_registered_already u1 Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Main__pm__is_website_registered_already.is_website_registered_already__function_guard result u1 Main__pm__db.db.Passworddatabase__database.database__content) )/\true ) }
  reads {Main__pm__db.db}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:19628] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:19631] [@name:I]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19645] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19651] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:19628] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:19631] [@name:I]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19645] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19651] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val init 
   (d : Passworddatabase__database.database__ref) : unit
  requires {  true }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string as Passworddatabase__from_string
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val from_string 
   (s : Standard__string.string) : Passworddatabase__password.password
  requires {  ( [@GP_Pretty_Ada:74891] ((Standard__string.length s) <= (100 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string.from_string s)) /\ (Passworddatabase__from_string.from_string__function_guard result s) )/\(Passworddatabase__password___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at passworddatabase.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val put 
   (d : Passworddatabase__database.database__ref) (u : Passworddatabase__url.url) (p : Passworddatabase__password.password) : unit
  requires {  ( [@GP_Pretty_Ada:74853] ( ((epsilon temp___result_480 : int.
   ( (temp___result_480 = (Passworddatabase__length__3.length__3 d.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_480 d.Passworddatabase__database.database__content) )) < (1000 : int)) \/ ((epsilon temp___result_481 : bool.
   ( (temp___result_481 = (Passworddatabase__has_password_for.has_password_for d.Passworddatabase__database.database__content u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_481 d.Passworddatabase__database.database__content u) )) = True) ) ) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at passworddatabase.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__get__3 as Passworddatabase__get__3
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom

 val get__3 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : Passworddatabase__password.password
  requires {  ( [@GP_Pretty_Ada:74828] ((epsilon temp___result_494 : bool.
   ( (temp___result_494 = (Passworddatabase__has_password_for.has_password_for d u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_494 d u) )) = True) ) }
  ensures {  ( ( (result = (Passworddatabase__get__3.get__3 d u)) /\ (Passworddatabase__get__3.get__3__function_guard result d u) )/\(Passworddatabase__password___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at passworddatabase.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__to_string as Passworddatabase__to_string

 val to_string 
   (p : Passworddatabase__password.password) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__to_string.to_string p)) /\ (Passworddatabase__to_string.to_string__function_guard result p) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at passworddatabase.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val remove 
   (d : Passworddatabase__database.database__ref) (u : Passworddatabase__url.url) : unit
  requires {  ( [@GP_Pretty_Ada:74872] ((epsilon temp___result_509 : bool.
   ( (temp___result_509 = (Passworddatabase__has_password_for.has_password_for d.Passworddatabase__database.database__content u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_509 d.Passworddatabase__database.database__content u) )) = True) ) }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:99539] (number <= (epsilon temp___result_558 : int.
   ( (temp___result_558 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_558 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:23214] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:23220] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:16685] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:100045] true ))) /\ ( [@GP_Pretty_Ada:16694] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:16702] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@model_trace:16707] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:16732] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first s)) ) /\ ( [@GP_Pretty_Ada:16742] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:16752] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___562   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___562) /\ (temp___562 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___562) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:23526] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:23532] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "adjust" defined at s-finroo.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__finalization_root__adjust___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled
 use        System__finalization_root__root_controlled___axiom as System__finalization_root__root_controlled___axiom

 val adjust 
   (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
  requires {  true }
  ensures {  (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) }
  writes {object__split_fields}
 
 scope Dispatch
  val predicate adjust__specific_post 
    (attr__tag : int) (system__finalization_root__adjust__object__fields : System__finalization_root__root_controlled.__split_fields) (object__attr__tag : int) (system__finalization_root__adjust__object__old__fields : System__finalization_root__root_controlled.__split_fields)
  
  val adjust 
    (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) )/\(adjust__specific_post object__attr__tag object__split_fields.System__finalization_root__root_controlled.__split_fields__content object__attr__tag (old object__split_fields.System__finalization_root__root_controlled.__split_fields__content )) ) }
   writes {object__split_fields}

 end
 
 axiom system__finalization_root__root_controlled__compat_axiom :
  (forall system__finalization_root__adjust__object__fields   system__finalization_root__adjust__object__old__fields   : System__finalization_root__root_controlled.__split_fields.
  (forall object__attr__tag   : int [(Dispatch.adjust__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__adjust__object__fields object__attr__tag system__finalization_root__adjust__object__old__fields)].
   ( (Dispatch.adjust__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__adjust__object__fields object__attr__tag system__finalization_root__adjust__object__old__fields) -> (let temp___object_566 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__adjust__object__old__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
   (let temp___object_566 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__adjust__object__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
    true))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "finalize" defined at s-finroo.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__finalization_root__finalize___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled
 use        System__finalization_root__root_controlled___axiom as System__finalization_root__root_controlled___axiom

 val finalize 
   (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
  requires {  true }
  ensures {  (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) }
  writes {object__split_fields}
 
 scope Dispatch
  val predicate finalize__specific_post 
    (attr__tag : int) (system__finalization_root__finalize__object__fields : System__finalization_root__root_controlled.__split_fields) (object__attr__tag : int) (system__finalization_root__finalize__object__old__fields : System__finalization_root__root_controlled.__split_fields)
  
  val finalize 
    (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) )/\(finalize__specific_post object__attr__tag object__split_fields.System__finalization_root__root_controlled.__split_fields__content object__attr__tag (old object__split_fields.System__finalization_root__root_controlled.__split_fields__content )) ) }
   writes {object__split_fields}

 end
 
 axiom system__finalization_root__root_controlled__compat_axiom :
  (forall system__finalization_root__finalize__object__fields   system__finalization_root__finalize__object__old__fields   : System__finalization_root__root_controlled.__split_fields.
  (forall object__attr__tag   : int [(Dispatch.finalize__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__finalize__object__fields object__attr__tag system__finalization_root__finalize__object__old__fields)].
   ( (Dispatch.finalize__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__finalize__object__fields object__attr__tag system__finalization_root__finalize__object__old__fields) -> (let temp___object_567 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__finalize__object__old__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
   (let temp___object_567 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__finalize__object__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
    true))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "initialize" defined at s-finroo.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__finalization_root__initialize___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        System__finalization_root__root_controlled as System__finalization_root__root_controlled
 use        System__finalization_root__root_controlled___axiom as System__finalization_root__root_controlled___axiom

 val initialize 
   (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
  requires {  true }
  ensures {  (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) }
  writes {object__split_fields}
 
 scope Dispatch
  val predicate initialize__specific_post 
    (attr__tag : int) (system__finalization_root__initialize__object__fields : System__finalization_root__root_controlled.__split_fields) (object__attr__tag : int) (system__finalization_root__initialize__object__old__fields : System__finalization_root__root_controlled.__split_fields)
  
  val initialize 
    (object__split_fields : System__finalization_root__root_controlled.__split_fields__ref) (object__attr__tag : int) : unit
   requires {  true }
   ensures {  ( ( true /\ (System__finalization_root__root_controlled___axiom.dynamic_invariant { System__finalization_root__root_controlled.__split_fields = object__split_fields.System__finalization_root__root_controlled.__split_fields__content; System__finalization_root__root_controlled.attr__tag = object__attr__tag } True True True True) )/\(initialize__specific_post object__attr__tag object__split_fields.System__finalization_root__root_controlled.__split_fields__content object__attr__tag (old object__split_fields.System__finalization_root__root_controlled.__split_fields__content )) ) }
   writes {object__split_fields}

 end
 
 axiom system__finalization_root__root_controlled__compat_axiom :
  (forall system__finalization_root__initialize__object__fields   system__finalization_root__initialize__object__old__fields   : System__finalization_root__root_controlled.__split_fields.
  (forall object__attr__tag   : int [(Dispatch.initialize__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__initialize__object__fields object__attr__tag system__finalization_root__initialize__object__old__fields)].
   ( (Dispatch.initialize__specific_post System__finalization_root__root_controlled.__tag system__finalization_root__initialize__object__fields object__attr__tag system__finalization_root__initialize__object__old__fields) -> (let temp___object_568 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__initialize__object__old__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
   (let temp___object_568 [@mlw:proxy_symbol] [@introduced] = { System__finalization_root__root_controlled.__split_fields = system__finalization_root__initialize__object__fields; System__finalization_root__root_controlled.attr__tag = object__attr__tag } in (
    true))
   ))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "adjust__2" defined at a-strunb.ads:748, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__adjust__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val adjust__2 
   (object : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) : unit
  requires {  true }
  ensures {  (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant object.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True False) }
  writes {object}

end

(* Module for declaring a program function (and possibly an axiom) for "finalize__2" defined at a-strunb.ads:749, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__finalize__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val finalize__2 
   (object : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) : unit
  requires {  true }
  ensures {  (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant object.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True False) }
  writes {object}

end

(* Module for declaring a program function (and possibly an axiom) for "initialize__2" defined at a-strunb.ads:747, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__initialize__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val initialize__2 
   (object : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) : unit
  requires {  true }
  ensures {  (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant object.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True False) }
  writes {object}

end

(* Module for declaring a program function (and possibly an axiom) for "to_unbounded_string" defined at a-strunb.ads:103, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__to_unbounded_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__to_unbounded_string as Ada__strings__unbounded__to_unbounded_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val to_unbounded_string 
   (source : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__to_unbounded_string.to_unbounded_string source)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110010] ((Ada__strings__unbounded__length.length result) = (Standard__string.length source)) ) ) ) }
 
 axiom to_unbounded_string__post_axiom :
  (forall source   : Standard__string.string [(Ada__strings__unbounded__to_unbounded_string.to_unbounded_string source)].
   ( (Standard__string___axiom.dynamic_invariant source True True True True) -> (let result = (Ada__strings__unbounded__to_unbounded_string.to_unbounded_string source) in (
    ( ( ( [@GP_Pretty_Ada:110010] ((Ada__strings__unbounded__length.length result) = (Standard__string.length source)) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_unbounded_string__2" defined at a-strunb.ads:109, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__to_unbounded_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__to_unbounded_string__2 as Ada__strings__unbounded__to_unbounded_string__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val to_unbounded_string__2 
   (length : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__to_unbounded_string__2.to_unbounded_string__2 length)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110043] ((Ada__strings__unbounded__length.length result) = length) ) ) ) }
 
 axiom to_unbounded_string__2__post_axiom :
  (forall length   : int [(Ada__strings__unbounded__to_unbounded_string__2.to_unbounded_string__2 length)].
   ( (Standard__natural___axiom.dynamic_invariant length True True True True) -> (let result = (Ada__strings__unbounded__to_unbounded_string__2.to_unbounded_string__2 length) in (
    ( ( ( [@GP_Pretty_Ada:110043] ((Ada__strings__unbounded__length.length result) = length) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at a-strunb.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__to_string as Ada__strings__unbounded__to_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val to_string 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__to_string.to_string source)) /\ true )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110071] ((Standard__string.length result) = (Ada__strings__unbounded__length.length source)) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__to_string.to_string source)].
   ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) -> (let result = (Ada__strings__unbounded__to_string.to_string source) in (
    ( ( ( [@GP_Pretty_Ada:110071] ((Standard__string.length result) = (Ada__strings__unbounded__length.length source)) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_unbounded_string" defined at a-strunb.ads:120, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__set_unbounded_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val set_unbounded_string 
   (target : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (source : Standard__string.string) : unit
  requires {  true }
  ensures {  (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant target.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) }
  writes {target}

end

(* Module for declaring a program function (and possibly an axiom) for "append" defined at a-strunb.ads:127, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__append___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val append 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (new_item : Ada__strings__unbounded__unbounded_string.unbounded_string) : unit
  requires {  ( [@GP_Pretty_Ada:110109] ((Ada__strings__unbounded__length.length new_item) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content))) ) }
  ensures {  ( ( [@GP_Pretty_Ada:110128] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) + (Ada__strings__unbounded__length.length new_item))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "append__2" defined at a-strunb.ads:135, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__append__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val append__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (new_item : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:110165] ((Standard__string.length new_item) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content))) ) }
  ensures {  ( ( [@GP_Pretty_Ada:110183] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) + (Standard__string.length new_item))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "append__3" defined at a-strunb.ads:143, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__append__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val append__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (new_item : int) : unit
  requires {  ( [@GP_Pretty_Ada:110217] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) < (2147483647 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:110234] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) + (1 : int))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "Oconcat" defined at a-strunb.ads:151, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oconcat___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Oconcat as Ada__strings__unbounded__Oconcat
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oconcat 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:110272] ((Ada__strings__unbounded__length.length right) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length left))) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oconcat.oconcat left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110291] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (Ada__strings__unbounded__length.length right))) ) ) ) }
 
 axiom oconcat__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oconcat.oconcat left right)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:110272] ((Ada__strings__unbounded__length.length right) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length left))) ) ) -> (let result = (Ada__strings__unbounded__Oconcat.oconcat left right) in (
    ( ( ( [@GP_Pretty_Ada:110291] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (Ada__strings__unbounded__length.length right))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oconcat__2" defined at a-strunb.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oconcat__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Oconcat__2 as Ada__strings__unbounded__Oconcat__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oconcat__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:110328] ((Standard__string.length right) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length left))) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oconcat__2.oconcat__2 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110346] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (Standard__string.length right))) ) ) ) }
 
 axiom oconcat__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Oconcat__2.oconcat__2 left right)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:110328] ((Standard__string.length right) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length left))) ) ) -> (let result = (Ada__strings__unbounded__Oconcat__2.oconcat__2 left right) in (
    ( ( ( [@GP_Pretty_Ada:110346] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (Standard__string.length right))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oconcat__3" defined at a-strunb.ads:167, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oconcat__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Oconcat__3 as Ada__strings__unbounded__Oconcat__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oconcat__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:110383] ((Standard__string.length left) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length right))) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oconcat__3.oconcat__3 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110401] ((Ada__strings__unbounded__length.length result) = ((Standard__string.length left) + (Ada__strings__unbounded__length.length right))) ) ) ) }
 
 axiom oconcat__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oconcat__3.oconcat__3 left right)].
   ( ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:110383] ((Standard__string.length left) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length right))) ) ) -> (let result = (Ada__strings__unbounded__Oconcat__3.oconcat__3 left right) in (
    ( ( ( [@GP_Pretty_Ada:110401] ((Ada__strings__unbounded__length.length result) = ((Standard__string.length left) + (Ada__strings__unbounded__length.length right))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oconcat__4" defined at a-strunb.ads:175, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oconcat__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Oconcat__4 as Ada__strings__unbounded__Oconcat__4
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oconcat__4 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:110435] ((Ada__strings__unbounded__length.length left) < (2147483647 : int)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oconcat__4.oconcat__4 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110452] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (1 : int))) ) ) ) }
 
 axiom oconcat__4__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : int [(Ada__strings__unbounded__Oconcat__4.oconcat__4 left right)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__character___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:110435] ((Ada__strings__unbounded__length.length left) < (2147483647 : int)) ) ) -> (let result = (Ada__strings__unbounded__Oconcat__4.oconcat__4 left right) in (
    ( ( ( [@GP_Pretty_Ada:110452] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length left) + (1 : int))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oconcat__5" defined at a-strunb.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oconcat__5___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Oconcat__5 as Ada__strings__unbounded__Oconcat__5
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oconcat__5 
   (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:110486] ((Ada__strings__unbounded__length.length right) < (2147483647 : int)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oconcat__5.oconcat__5 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110503] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length right) + (1 : int))) ) ) ) }
 
 axiom oconcat__5__post_axiom :
  (forall left   : int.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oconcat__5.oconcat__5 left right)].
   ( ( ( (Standard__character___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:110486] ((Ada__strings__unbounded__length.length right) < (2147483647 : int)) ) ) -> (let result = (Ada__strings__unbounded__Oconcat__5.oconcat__5 left right) in (
    ( ( ( [@GP_Pretty_Ada:110503] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length right) + (1 : int))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "element" defined at a-strunb.ads:191, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__element___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__element as Ada__strings__unbounded__element
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val element 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:110536] (index <= (Ada__strings__unbounded__length.length source)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__element.element source index)) /\ true )/\(Standard__character___axiom.dynamic_invariant result True False True True) ) }
 
 axiom element__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall index   : int [(Ada__strings__unbounded__element.element source index)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:110536] (index <= (Ada__strings__unbounded__length.length source)) ) ) -> (let result = (Ada__strings__unbounded__element.element source index) in (
    ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "replace_element" defined at a-strunb.ads:198, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__replace_element___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val replace_element 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (index : int) (by__ : int) : unit
  requires {  ( [@GP_Pretty_Ada:110562] (index <= (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:110577] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) )) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "slice" defined at a-strunb.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__slice___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__slice as Ada__strings__unbounded__slice
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) : Standard__string.string
  requires {  ( ( [@GP_Pretty_Ada:30681] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:30687] (high <= (Ada__strings__unbounded__length.length source)) ) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__slice.slice source low high)) /\ true )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110637] ((Standard__string.length result) = (Int_Minmax.int_max (0 : int) ((high - low) + (1 : int)))) ) ) ) }
 
 axiom slice__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall low   high   : int [(Ada__strings__unbounded__slice.slice source low high)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant low True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant high True True True True) ) /\ ( ( [@GP_Pretty_Ada:30681] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:30687] (high <= (Ada__strings__unbounded__length.length source)) ) ) ) -> (let result = (Ada__strings__unbounded__slice.slice source low high) in (
    ( ( ( [@GP_Pretty_Ada:110637] ((Standard__string.length result) = (Int_Minmax.int_max (0 : int) ((high - low) + (1 : int)))) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unbounded_slice" defined at a-strunb.ads:216, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__unbounded_slice___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_slice as Ada__strings__unbounded__unbounded_slice
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val unbounded_slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( ( [@GP_Pretty_Ada:30756] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:30762] (high <= (Ada__strings__unbounded__length.length source)) ) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__unbounded_slice.unbounded_slice source low high)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110698] ((Ada__strings__unbounded__length.length result) = (Int_Minmax.int_max (0 : int) ((high - low) + (1 : int)))) ) ) ) }
 
 axiom unbounded_slice__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall low   high   : int [(Ada__strings__unbounded__unbounded_slice.unbounded_slice source low high)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant low True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant high True True True True) ) /\ ( ( [@GP_Pretty_Ada:30756] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:30762] (high <= (Ada__strings__unbounded__length.length source)) ) ) ) -> (let result = (Ada__strings__unbounded__unbounded_slice.unbounded_slice source low high) in (
    ( ( ( [@GP_Pretty_Ada:110698] ((Ada__strings__unbounded__length.length result) = (Int_Minmax.int_max (0 : int) ((high - low) + (1 : int)))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unbounded_slice__2" defined at a-strunb.ads:227, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__unbounded_slice__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val unbounded_slice__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (target : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (low : int) (high : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:30843] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:30849] (high <= (Ada__strings__unbounded__length.length source)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:110758] ((Ada__strings__unbounded__length.length target.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (Int_Minmax.int_max (0 : int) ((high - low) + (1 : int)))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant target.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {target}

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at a-strunb.ads:238, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oeq___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oeq as Ada__strings__unbounded__Oeq
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oeq 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oeq.oeq left right)) /\ true )/\true ) }
 
 axiom oeq__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oeq.oeq left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oeq.oeq left right) in (
    ( ( true /\ true )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq__2" defined at a-strunb.ads:244, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oeq__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oeq__2 as Ada__strings__unbounded__Oeq__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oeq__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oeq__2.oeq__2 left right)) /\ true )/\true ) }
 
 axiom oeq__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Oeq__2.oeq__2 left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oeq__2.oeq__2 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq__3" defined at a-strunb.ads:250, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oeq__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oeq__3 as Ada__strings__unbounded__Oeq__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oeq__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oeq__3.oeq__3 left right)) /\ true )/\true ) }
 
 axiom oeq__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oeq__3.oeq__3 left right)].
   ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oeq__3.oeq__3 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at a-strunb.ads:256, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Olt___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Olt as Ada__strings__unbounded__Olt
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val olt 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Olt.olt left right)) /\ true )/\true ) }
 
 axiom olt__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Olt.olt left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Olt.olt left right) in (
    ( ( true /\ true )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt__2" defined at a-strunb.ads:262, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Olt__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Olt__2 as Ada__strings__unbounded__Olt__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val olt__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Olt__2.olt__2 left right)) /\ true )/\true ) }
 
 axiom olt__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Olt__2.olt__2 left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Olt__2.olt__2 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt__3" defined at a-strunb.ads:268, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Olt__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Olt__3 as Ada__strings__unbounded__Olt__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val olt__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Olt__3.olt__3 left right)) /\ true )/\true ) }
 
 axiom olt__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Olt__3.olt__3 left right)].
   ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Olt__3.olt__3 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at a-strunb.ads:274, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ole___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ole as Ada__strings__unbounded__Ole
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ole 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ole.ole left right)) /\ true )/\true ) }
 
 axiom ole__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Ole.ole left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ole.ole left right) in (
    ( ( true /\ true )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole__2" defined at a-strunb.ads:280, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ole__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ole__2 as Ada__strings__unbounded__Ole__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ole__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ole__2.ole__2 left right)) /\ true )/\true ) }
 
 axiom ole__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Ole__2.ole__2 left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ole__2.ole__2 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole__3" defined at a-strunb.ads:286, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ole__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ole__3 as Ada__strings__unbounded__Ole__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ole__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ole__3.ole__3 left right)) /\ true )/\true ) }
 
 axiom ole__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Ole__3.ole__3 left right)].
   ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ole__3.ole__3 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at a-strunb.ads:292, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ogt___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ogt as Ada__strings__unbounded__Ogt
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ogt 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ogt.ogt left right)) /\ true )/\true ) }
 
 axiom ogt__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Ogt.ogt left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ogt.ogt left right) in (
    ( ( true /\ true )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt__2" defined at a-strunb.ads:298, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ogt__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ogt__2 as Ada__strings__unbounded__Ogt__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ogt__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ogt__2.ogt__2 left right)) /\ true )/\true ) }
 
 axiom ogt__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Ogt__2.ogt__2 left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ogt__2.ogt__2 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt__3" defined at a-strunb.ads:304, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Ogt__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Ogt__3 as Ada__strings__unbounded__Ogt__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val ogt__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Ogt__3.ogt__3 left right)) /\ true )/\true ) }
 
 axiom ogt__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Ogt__3.ogt__3 left right)].
   ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Ogt__3.ogt__3 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at a-strunb.ads:310, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oge___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oge as Ada__strings__unbounded__Oge
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oge 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oge.oge left right)) /\ true )/\true ) }
 
 axiom oge__post_axiom :
  (forall left   right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oge.oge left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oge.oge left right) in (
    ( ( true /\ true )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge__2" defined at a-strunb.ads:316, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oge__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oge__2 as Ada__strings__unbounded__Oge__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oge__2 
   (left : Ada__strings__unbounded__unbounded_string.unbounded_string) (right : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oge__2.oge__2 left right)) /\ true )/\true ) }
 
 axiom oge__2__post_axiom :
  (forall left   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Oge__2.oge__2 left right)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oge__2.oge__2 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge__3" defined at a-strunb.ads:322, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Oge__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__Oge__3 as Ada__strings__unbounded__Oge__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val oge__3 
   (left : Standard__string.string) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : bool
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__Oge__3.oge__3 left right)) /\ true )/\true ) }
 
 axiom oge__3__post_axiom :
  (forall left   : Standard__string.string.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Oge__3.oge__3 left right)].
   ( ( (Standard__string___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__Oge__3.oge__3 left right) in (
    ( ( true /\ true )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "index" defined at a-strunb.ads:332, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__index as Ada__strings__unbounded__index
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom
 use        Ada__strings__maps__character_mapping___axiom as Ada__strings__maps__character_mapping___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val index 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (going : int) (mapping : Array__Int__Standard__character.map) : int
  requires {  ( [@GP_Pretty_Ada:110979] ((Standard__string.length pattern) <> (0 : int)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__index.index source pattern going mapping)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall pattern   : Standard__string.string.
  (forall going   : int.
  (forall mapping   : Array__Int__Standard__character.map [(Ada__strings__unbounded__index.index source pattern going mapping)].
   ( ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__string___axiom.dynamic_invariant pattern True True True True) ) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) /\ (Ada__strings__maps__character_mapping___axiom.dynamic_invariant mapping True True True True) ) /\ ( [@GP_Pretty_Ada:110979] ((Standard__string.length pattern) <> (0 : int)) ) ) -> (let result = (Ada__strings__unbounded__index.index source pattern going mapping) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "index__3" defined at a-strunb.ads:350, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__index__3 as Ada__strings__unbounded__index__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom
 use        Ada__strings__maps__character_set___axiom as Ada__strings__maps__character_set___axiom
 use        Ada__strings__membership___axiom as Ada__strings__membership___axiom
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val index__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (test : int) (going : int) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__index__3.index__3 source set test going)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index__3__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall set   : Array__Int__Bool.map.
  (forall test   going   : int [(Ada__strings__unbounded__index__3.index__3 source set test going)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__maps__character_set___axiom.dynamic_invariant set True True True True) ) /\ (Ada__strings__membership___axiom.dynamic_invariant test True True True True) ) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) -> (let result = (Ada__strings__unbounded__index__3.index__3 source set test going) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "index__4" defined at a-strunb.ads:358, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__index__4 as Ada__strings__unbounded__index__4
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom
 use        Ada__strings__maps__character_mapping___axiom as Ada__strings__maps__character_mapping___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val index__4 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (from : int) (going : int) (mapping : Array__Int__Standard__character.map) : int
  requires {  ( (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:31622] (from <= (Ada__strings__unbounded__length.length source)) )) else (
   ( [@GP_Pretty_Ada:112440] true ))) /\ ( [@GP_Pretty_Ada:31631] ((Standard__string.length pattern) <> (0 : int)) ) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__index__4.index__4 source pattern from going mapping)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index__4__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall pattern   : Standard__string.string.
  (forall from   going   : int.
  (forall mapping   : Array__Int__Standard__character.map [(Ada__strings__unbounded__index__4.index__4 source pattern from going mapping)].
   ( ( ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__string___axiom.dynamic_invariant pattern True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) /\ (Ada__strings__maps__character_mapping___axiom.dynamic_invariant mapping True True True True) ) /\ ( (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
    ( [@GP_Pretty_Ada:31622] (from <= (Ada__strings__unbounded__length.length source)) )) else (
    ( [@GP_Pretty_Ada:112440] true ))) /\ ( [@GP_Pretty_Ada:31631] ((Standard__string.length pattern) <> (0 : int)) ) ) ) -> (let result = (Ada__strings__unbounded__index__4.index__4 source pattern from going mapping) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "index__6" defined at a-strunb.ads:385, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index__6___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__index__6 as Ada__strings__unbounded__index__6
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom
 use        Ada__strings__maps__character_set___axiom as Ada__strings__maps__character_set___axiom
 use        Ada__strings__membership___axiom as Ada__strings__membership___axiom
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val index__6 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (from : int) (test : int) (going : int) : int
  requires {  (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:31797] (from <= (Ada__strings__unbounded__length.length source)) )) else (
   ( [@GP_Pretty_Ada:112452] true ))) }
  ensures {  ( ( (result = (Ada__strings__unbounded__index__6.index__6 source set from test going)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index__6__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall set   : Array__Int__Bool.map.
  (forall from   test   going   : int [(Ada__strings__unbounded__index__6.index__6 source set from test going)].
   ( ( ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__maps__character_set___axiom.dynamic_invariant set True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Ada__strings__membership___axiom.dynamic_invariant test True True True True) ) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) /\ (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
    ( [@GP_Pretty_Ada:31797] (from <= (Ada__strings__unbounded__length.length source)) )) else (
    ( [@GP_Pretty_Ada:112452] true ))) ) -> (let result = (Ada__strings__unbounded__index__6.index__6 source set from test going) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "index_non_blank" defined at a-strunb.ads:396, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index_non_blank___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__index_non_blank as Ada__strings__unbounded__index_non_blank
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom

 val index_non_blank 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (going : int) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__index_non_blank.index_non_blank source going)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index_non_blank__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall going   : int [(Ada__strings__unbounded__index_non_blank.index_non_blank source going)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) -> (let result = (Ada__strings__unbounded__index_non_blank.index_non_blank source going) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "index_non_blank__2" defined at a-strunb.ads:402, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__index_non_blank__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__index_non_blank__2 as Ada__strings__unbounded__index_non_blank__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__direction___axiom as Ada__strings__direction___axiom

 val index_non_blank__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (going : int) : int
  requires {  (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:31891] (from <= (Ada__strings__unbounded__length.length source)) )) else (
   ( [@GP_Pretty_Ada:112454] true ))) }
  ensures {  ( ( (result = (Ada__strings__unbounded__index_non_blank__2.index_non_blank__2 source from going)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom index_non_blank__2__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall from   going   : int [(Ada__strings__unbounded__index_non_blank__2.index_non_blank__2 source from going)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Ada__strings__direction___axiom.dynamic_invariant going True True True True) ) /\ (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
    ( [@GP_Pretty_Ada:31891] (from <= (Ada__strings__unbounded__length.length source)) )) else (
    ( [@GP_Pretty_Ada:112454] true ))) ) -> (let result = (Ada__strings__unbounded__index_non_blank__2.index_non_blank__2 source from going) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "count" defined at a-strunb.ads:411, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__count as Ada__strings__unbounded__count
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__maps__character_mapping___axiom as Ada__strings__maps__character_mapping___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val count 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (pattern : Standard__string.string) (mapping : Array__Int__Standard__character.map) : int
  requires {  ( [@GP_Pretty_Ada:111181] ((Standard__string.length pattern) <> (0 : int)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__count.count source pattern mapping)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom count__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall pattern   : Standard__string.string.
  (forall mapping   : Array__Int__Standard__character.map [(Ada__strings__unbounded__count.count source pattern mapping)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__string___axiom.dynamic_invariant pattern True True True True) ) /\ (Ada__strings__maps__character_mapping___axiom.dynamic_invariant mapping True True True True) ) /\ ( [@GP_Pretty_Ada:111181] ((Standard__string.length pattern) <> (0 : int)) ) ) -> (let result = (Ada__strings__unbounded__count.count source pattern mapping) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "count__3" defined at a-strunb.ads:427, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__count__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__count__3 as Ada__strings__unbounded__count__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__maps__character_set___axiom as Ada__strings__maps__character_set___axiom
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val count__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__count__3.count__3 source set)) /\ true )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom count__3__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall set   : Array__Int__Bool.map [(Ada__strings__unbounded__count__3.count__3 source set)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__maps__character_set___axiom.dynamic_invariant set True True True True) ) -> (let result = (Ada__strings__unbounded__count__3.count__3 source set) in (
    ( ( true /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "find_token" defined at a-strunb.ads:433, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__find_token___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Array__Int__Bool as Array__Int__Bool

 val find_token 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (from : int) (test : int) (first : int__ref) (last : int__ref) : unit
  requires {  (if (((Ada__strings__unbounded__length.length source) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:32118] (from <= (Ada__strings__unbounded__length.length source)) )) else (
   ( [@GP_Pretty_Ada:112464] true ))) }
  ensures {  ( (Standard__positive___axiom.dynamic_invariant first.int__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) }
  writes {first, last}

end

(* Module for declaring a program function (and possibly an axiom) for "find_token__2" defined at a-strunb.ads:445, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__find_token__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Array__Int__Bool as Array__Int__Bool

 val find_token__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (set : Array__Int__Bool.map) (test : int) (first : int__ref) (last : int__ref) : unit
  requires {  true }
  ensures {  ( (Standard__positive___axiom.dynamic_invariant first.int__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) }
  writes {first, last}

end

(* Module for declaring a program function (and possibly an axiom) for "translate" defined at a-strunb.ads:458, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__translate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__translate as Ada__strings__unbounded__translate
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__maps__character_mapping___axiom as Ada__strings__maps__character_mapping___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val translate 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (mapping : Array__Int__Standard__character.map) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__translate.translate source mapping)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:111281] ((Ada__strings__unbounded__length.length result) = (Ada__strings__unbounded__length.length source)) ) ) ) }
 
 axiom translate__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall mapping   : Array__Int__Standard__character.map [(Ada__strings__unbounded__translate.translate source mapping)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__maps__character_mapping___axiom.dynamic_invariant mapping True True True True) ) -> (let result = (Ada__strings__unbounded__translate.translate source mapping) in (
    ( ( ( [@GP_Pretty_Ada:111281] ((Ada__strings__unbounded__length.length result) = (Ada__strings__unbounded__length.length source)) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "translate__2" defined at a-strunb.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__translate__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val translate__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (mapping : Array__Int__Standard__character.map) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:111310] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) )) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "replace_slice" defined at a-strunb.ads:490, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__replace_slice___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__replace_slice as Ada__strings__unbounded__replace_slice
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val replace_slice 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (low : int) (high : int) (by__ : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( ( [@GP_Pretty_Ada:32426] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ (if ((high >= low)) then (
   ( [@GP_Pretty_Ada:32437] ((low - (1 : int)) <= (((2147483647 : int) - (Standard__string.length by__)) - (Int_Minmax.int_max ((Ada__strings__unbounded__length.length source) - high) (0 : int)))) )) else (
   ( [@GP_Pretty_Ada:32458] ((Ada__strings__unbounded__length.length source) <= ((2147483647 : int) - (Standard__string.length by__))) ))) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__replace_slice.replace_slice source low high by__)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ (if (((old (Integer.bool_ge high low) ) = True)) then (
   ((Ada__strings__unbounded__length.length result) = (((low - (1 : int)) + (Standard__string.length by__)) + (Int_Minmax.int_max ((old (Ada__strings__unbounded__length.length source) ) - high) (0 : int))))) else (
   ((Ada__strings__unbounded__length.length result) = ((old (Ada__strings__unbounded__length.length source) ) + (Standard__string.length by__))))) ) ) }
 
 axiom replace_slice__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall low   high   : int.
  (forall by__   : Standard__string.string [(Ada__strings__unbounded__replace_slice.replace_slice source low high by__)].
   ( ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant low True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant high True True True True) ) /\ (Standard__string___axiom.dynamic_invariant by__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:32426] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ (if ((high >= low)) then (
    ( [@GP_Pretty_Ada:32437] ((low - (1 : int)) <= (((2147483647 : int) - (Standard__string.length by__)) - (Int_Minmax.int_max ((Ada__strings__unbounded__length.length source) - high) (0 : int)))) )) else (
    ( [@GP_Pretty_Ada:32458] ((Ada__strings__unbounded__length.length source) <= ((2147483647 : int) - (Standard__string.length by__))) ))) ) ) -> (let result = (Ada__strings__unbounded__replace_slice.replace_slice source low high by__) in (
    ( ( (if ((high >= low)) then (
     ((Ada__strings__unbounded__length.length result) = (((low - (1 : int)) + (Standard__string.length by__)) + (Int_Minmax.int_max ((Ada__strings__unbounded__length.length source) - high) (0 : int))))) else (
     ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length source) + (Standard__string.length by__))))) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "replace_slice__2" defined at a-strunb.ads:511, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__replace_slice__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val replace_slice__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (low : int) (high : int) (by__ : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:32574] ((low - (1 : int)) <= (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content)) ) /\ (if ((high >= low)) then (
   ( [@GP_Pretty_Ada:32585] ((low - (1 : int)) <= (((2147483647 : int) - (Standard__string.length by__)) - (Int_Minmax.int_max ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) - high) (0 : int)))) )) else (
   ( [@GP_Pretty_Ada:32606] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) <= ((2147483647 : int) - (Standard__string.length by__))) ))) ) }
  ensures {  ( (if (((old (Integer.bool_ge high low) ) = True)) then (
   ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (((low - (1 : int)) + (Standard__string.length by__)) + (Int_Minmax.int_max ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) - high) (0 : int))))) else (
   ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) + (Standard__string.length by__))))) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "insert" defined at a-strunb.ads:532, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__insert___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__insert as Ada__strings__unbounded__insert
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val insert 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (before : int) (new_item : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( ( [@GP_Pretty_Ada:32710] ((before - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:32718] ((Standard__string.length new_item) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length source))) ) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__insert.insert source before new_item)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:111632] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length source) + (Standard__string.length new_item))) ) ) ) }
 
 axiom insert__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall before   : int.
  (forall new_item   : Standard__string.string [(Ada__strings__unbounded__insert.insert source before new_item)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant before True True True True) ) /\ (Standard__string___axiom.dynamic_invariant new_item True True True True) ) /\ ( ( [@GP_Pretty_Ada:32710] ((before - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ ( [@GP_Pretty_Ada:32718] ((Standard__string.length new_item) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length source))) ) ) ) -> (let result = (Ada__strings__unbounded__insert.insert source before new_item) in (
    ( ( ( [@GP_Pretty_Ada:111632] ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length source) + (Standard__string.length new_item))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "insert__2" defined at a-strunb.ads:542, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__insert__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val insert__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (before : int) (new_item : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:32788] ((before - (1 : int)) <= (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content)) ) /\ ( [@GP_Pretty_Ada:32796] ((Standard__string.length new_item) <= ((2147483647 : int) - (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content))) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:111695] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) + (Standard__string.length new_item))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "overwrite" defined at a-strunb.ads:552, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__overwrite___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__overwrite as Ada__strings__unbounded__overwrite
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val overwrite 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (position : int) (new_item : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( ( [@GP_Pretty_Ada:32867] ((position - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ (if (((Standard__string.length new_item) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:32880] ((Standard__string.length new_item) <= ((2147483647 : int) - (position - (1 : int)))) )) else (
   ( [@GP_Pretty_Ada:112536] true ))) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__overwrite.overwrite source position new_item)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:111768] ((Ada__strings__unbounded__length.length result) = (Int_Minmax.int_max (Ada__strings__unbounded__length.length source) ((position - (1 : int)) + (Standard__string.length new_item)))) ) ) ) }
 
 axiom overwrite__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall position   : int.
  (forall new_item   : Standard__string.string [(Ada__strings__unbounded__overwrite.overwrite source position new_item)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant position True True True True) ) /\ (Standard__string___axiom.dynamic_invariant new_item True True True True) ) /\ ( ( [@GP_Pretty_Ada:32867] ((position - (1 : int)) <= (Ada__strings__unbounded__length.length source)) ) /\ (if (((Standard__string.length new_item) <> (0 : int))) then (
    ( [@GP_Pretty_Ada:32880] ((Standard__string.length new_item) <= ((2147483647 : int) - (position - (1 : int)))) )) else (
    ( [@GP_Pretty_Ada:112536] true ))) ) ) -> (let result = (Ada__strings__unbounded__overwrite.overwrite source position new_item) in (
    ( ( ( [@GP_Pretty_Ada:111768] ((Ada__strings__unbounded__length.length result) = (Int_Minmax.int_max (Ada__strings__unbounded__length.length source) ((position - (1 : int)) + (Standard__string.length new_item)))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "overwrite__2" defined at a-strunb.ads:566, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__overwrite__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Minmax as Int_Minmax
 use        Standard__string as Standard__string
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val overwrite__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (position : int) (new_item : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:32957] ((position - (1 : int)) <= (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content)) ) /\ (if (((Standard__string.length new_item) <> (0 : int))) then (
   ( [@GP_Pretty_Ada:32970] ((Standard__string.length new_item) <= ((2147483647 : int) - (position - (1 : int)))) )) else (
   ( [@GP_Pretty_Ada:112552] true ))) ) }
  ensures {  ( ( [@GP_Pretty_Ada:111841] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (Int_Minmax.int_max (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) ((position - (1 : int)) + (Standard__string.length new_item)))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "delete" defined at a-strunb.ads:581, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__delete___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__delete as Ada__strings__unbounded__delete
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val delete 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (from : int) (through : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  (if ((through <= from)) then (
   ( [@GP_Pretty_Ada:33051] ((from - (1 : int)) <= (Ada__strings__unbounded__length.length source)) )) else (
   ( [@GP_Pretty_Ada:112558] true ))) }
  ensures {  ( ( (result = (Ada__strings__unbounded__delete.delete source from through)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ (if (((old (Integer.bool_ge through from) ) = True)) then (
   ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length source) - ((through - from) + (1 : int))))) else (
   ((Ada__strings__unbounded__length.length result) = (Ada__strings__unbounded__length.length source)))) ) ) }
 
 axiom delete__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall from   through   : int [(Ada__strings__unbounded__delete.delete source from through)].
   ( ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__natural___axiom.dynamic_invariant through True True True True) ) /\ (if ((through <= from)) then (
    ( [@GP_Pretty_Ada:33051] ((from - (1 : int)) <= (Ada__strings__unbounded__length.length source)) )) else (
    ( [@GP_Pretty_Ada:112558] true ))) ) -> (let result = (Ada__strings__unbounded__delete.delete source from through) in (
    ( ( (if ((through >= from)) then (
     ((Ada__strings__unbounded__length.length result) = ((Ada__strings__unbounded__length.length source) - ((through - from) + (1 : int))))) else (
     ((Ada__strings__unbounded__length.length result) = (Ada__strings__unbounded__length.length source)))) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "delete__2" defined at a-strunb.ads:594, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__delete__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val delete__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (from : int) (through : int) : unit
  requires {  (if ((through <= from)) then (
   ( [@GP_Pretty_Ada:33140] ((from - (1 : int)) <= (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content)) )) else (
   ( [@GP_Pretty_Ada:112560] true ))) }
  ensures {  ( (if (((old (Integer.bool_ge through from) ) = True)) then (
   ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = ((old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) ) - ((through - from) + (1 : int))))) else (
   ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) )))) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "trim" defined at a-strunb.ads:607, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__trim___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__trim as Ada__strings__unbounded__trim
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__trim_end___axiom as Ada__strings__trim_end___axiom

 val trim 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (side : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__trim.trim source side)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112009] ((Ada__strings__unbounded__length.length result) <= (Ada__strings__unbounded__length.length source)) ) ) ) }
 
 axiom trim__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall side   : int [(Ada__strings__unbounded__trim.trim source side)].
   ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__trim_end___axiom.dynamic_invariant side True True True True) ) -> (let result = (Ada__strings__unbounded__trim.trim source side) in (
    ( ( ( [@GP_Pretty_Ada:112009] ((Ada__strings__unbounded__length.length result) <= (Ada__strings__unbounded__length.length source)) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "trim__2" defined at a-strunb.ads:614, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__trim__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val trim__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (side : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:112038] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) <= (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) )) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "trim__3" defined at a-strunb.ads:621, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__trim__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__trim__3 as Ada__strings__unbounded__trim__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Ada__strings__maps__character_set___axiom as Ada__strings__maps__character_set___axiom
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val trim__3 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (left : Array__Int__Bool.map) (right : Array__Int__Bool.map) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__trim__3.trim__3 source left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112067] ((Ada__strings__unbounded__length.length result) <= (Ada__strings__unbounded__length.length source)) ) ) ) }
 
 axiom trim__3__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall left   right   : Array__Int__Bool.map [(Ada__strings__unbounded__trim__3.trim__3 source left right)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__maps__character_set___axiom.dynamic_invariant left True True True True) ) /\ (Ada__strings__maps__character_set___axiom.dynamic_invariant right True True True True) ) -> (let result = (Ada__strings__unbounded__trim__3.trim__3 source left right) in (
    ( ( ( [@GP_Pretty_Ada:112067] ((Ada__strings__unbounded__length.length result) <= (Ada__strings__unbounded__length.length source)) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "trim__4" defined at a-strunb.ads:629, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__trim__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom
 use        Array__Int__Bool as Array__Int__Bool
 use        Array__Int__Bool as Array__Int__Bool

 val trim__4 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (left : Array__Int__Bool.map) (right : Array__Int__Bool.map) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:112096] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) <= (old (Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) )) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "head" defined at a-strunb.ads:637, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__head___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__head as Ada__strings__unbounded__head
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val head 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__head.head source count pad)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112123] ((Ada__strings__unbounded__length.length result) = count) ) ) ) }
 
 axiom head__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall count   pad   : int [(Ada__strings__unbounded__head.head source count pad)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__natural___axiom.dynamic_invariant count True True True True) ) /\ (Standard__character___axiom.dynamic_invariant pad True True True True) ) -> (let result = (Ada__strings__unbounded__head.head source count pad) in (
    ( ( ( [@GP_Pretty_Ada:112123] ((Ada__strings__unbounded__length.length result) = count) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "head__2" defined at a-strunb.ads:645, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__head__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val head__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (count : int) (pad : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:112149] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = count) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "tail" defined at a-strunb.ads:653, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__tail___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__tail as Ada__strings__unbounded__tail
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val tail 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string) (count : int) (pad : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__unbounded__tail.tail source count pad)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112176] ((Ada__strings__unbounded__length.length result) = count) ) ) ) }
 
 axiom tail__post_axiom :
  (forall source   : Ada__strings__unbounded__unbounded_string.unbounded_string.
  (forall count   pad   : int [(Ada__strings__unbounded__tail.tail source count pad)].
   ( ( ( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source True True True True) /\ (Standard__natural___axiom.dynamic_invariant count True True True True) ) /\ (Standard__character___axiom.dynamic_invariant pad True True True True) ) -> (let result = (Ada__strings__unbounded__tail.tail source count pad) in (
    ( ( ( [@GP_Pretty_Ada:112176] ((Ada__strings__unbounded__length.length result) = count) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tail__2" defined at a-strunb.ads:661, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__tail__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val tail__2 
   (source : Ada__strings__unbounded__unbounded_string.unbounded_string__ref) (count : int) (pad : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:112202] ((Ada__strings__unbounded__length.length source.Ada__strings__unbounded__unbounded_string.unbounded_string__content) = count) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant source.Ada__strings__unbounded__unbounded_string.unbounded_string__content True True True True) ) }
  writes {source}

end

(* Module for declaring a program function (and possibly an axiom) for "Omultiply" defined at a-strunb.ads:669, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Omultiply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Omultiply as Ada__strings__unbounded__Omultiply
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val omultiply 
   (left : int) (right : int) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  ( [@GP_Pretty_Ada:112227] (left <= (2147483647 : int)) ) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Omultiply.omultiply left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112240] ((Ada__strings__unbounded__length.length result) = left) ) ) ) }
 
 axiom omultiply__post_axiom :
  (forall left   right   : int [(Ada__strings__unbounded__Omultiply.omultiply left right)].
   ( ( ( (Standard__natural___axiom.dynamic_invariant left True True True True) /\ (Standard__character___axiom.dynamic_invariant right True True True True) ) /\ ( [@GP_Pretty_Ada:112227] (left <= (2147483647 : int)) ) ) -> (let result = (Ada__strings__unbounded__Omultiply.omultiply left right) in (
    ( ( ( [@GP_Pretty_Ada:112240] ((Ada__strings__unbounded__length.length result) = left) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Omultiply__2" defined at a-strunb.ads:677, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Omultiply__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Omultiply__2 as Ada__strings__unbounded__Omultiply__2
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val omultiply__2 
   (left : int) (right : Standard__string.string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  (if ((left <> (0 : int))) then (
   ( [@GP_Pretty_Ada:33672] ((Standard__string.length right) <= (Int_Division.div (2147483647 : int) left)) )) else (
   ( [@GP_Pretty_Ada:112570] true ))) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Omultiply__2.omultiply__2 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112295] ((Ada__strings__unbounded__length.length result) = (left * (Standard__string.length right))) ) ) ) }
 
 axiom omultiply__2__post_axiom :
  (forall left   : int.
  (forall right   : Standard__string.string [(Ada__strings__unbounded__Omultiply__2.omultiply__2 left right)].
   ( ( ( (Standard__natural___axiom.dynamic_invariant left True True True True) /\ (Standard__string___axiom.dynamic_invariant right True True True True) ) /\ (if ((left <> (0 : int))) then (
    ( [@GP_Pretty_Ada:33672] ((Standard__string.length right) <= (Int_Division.div (2147483647 : int) left)) )) else (
    ( [@GP_Pretty_Ada:112570] true ))) ) -> (let result = (Ada__strings__unbounded__Omultiply__2.omultiply__2 left right) in (
    ( ( ( [@GP_Pretty_Ada:112295] ((Ada__strings__unbounded__length.length result) = (left * (Standard__string.length right))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "Omultiply__3" defined at a-strunb.ads:685, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__unbounded__Omultiply__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__strings__unbounded__unbounded_string as Ada__strings__unbounded__unbounded_string
 use        Ada__strings__unbounded__length as Ada__strings__unbounded__length
 use        Ada__strings__unbounded__Omultiply__3 as Ada__strings__unbounded__Omultiply__3
 use        Ada__strings__unbounded__unbounded_string___axiom as Ada__strings__unbounded__unbounded_string___axiom

 val omultiply__3 
   (left : int) (right : Ada__strings__unbounded__unbounded_string.unbounded_string) : Ada__strings__unbounded__unbounded_string.unbounded_string
  requires {  (if ((left <> (0 : int))) then (
   ( [@GP_Pretty_Ada:33733] ((Ada__strings__unbounded__length.length right) <= (Int_Division.div (2147483647 : int) left)) )) else (
   ( [@GP_Pretty_Ada:112578] true ))) }
  ensures {  ( ( (result = (Ada__strings__unbounded__Omultiply__3.omultiply__3 left right)) /\ true )/\( (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:112352] ((Ada__strings__unbounded__length.length result) = (left * (Ada__strings__unbounded__length.length right))) ) ) ) }
 
 axiom omultiply__3__post_axiom :
  (forall left   : int.
  (forall right   : Ada__strings__unbounded__unbounded_string.unbounded_string [(Ada__strings__unbounded__Omultiply__3.omultiply__3 left right)].
   ( ( ( (Standard__natural___axiom.dynamic_invariant left True True True True) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant right True True True True) ) /\ (if ((left <> (0 : int))) then (
    ( [@GP_Pretty_Ada:33733] ((Ada__strings__unbounded__length.length right) <= (Int_Division.div (2147483647 : int) left)) )) else (
    ( [@GP_Pretty_Ada:112578] true ))) ) -> (let result = (Ada__strings__unbounded__Omultiply__3.omultiply__3 left right) in (
    ( ( ( [@GP_Pretty_Ada:112352] ((Ada__strings__unbounded__length.length result) = (left * (Ada__strings__unbounded__length.length right))) ) /\ (Ada__strings__unbounded__unbounded_string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for defining the value of the aggregate at main.adb:90, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t__aggregate_def as Main__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___685   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___684 [@mlw:proxy_symbol] [@introduced] = (Main__t__aggregate_def.main__t__aggregate_def temp___685) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___685 True True True True)) then (
     (forall temp___686   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___684 temp___686) = temp___685))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:82, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__isunlocked as Main__isunlocked
 use        Main__ispinaccepted as Main__ispinaccepted
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__init_program___axiom as Main__pm__init_program___axiom
 use        Main__pm__is_pin_correct___axiom as Main__pm__is_pin_correct___axiom
 use        Main__pm__update_pin___axiom as Main__pm__update_pin___axiom
 use        Main__pm__put_password___axiom as Main__pm__put_password___axiom
 use        Main__pm__get_password___axiom as Main__pm__get_password___axiom
 use        Main__pm__remove_password___axiom as Main__pm__remove_password___axiom
 use        Main__pm__get_db_size as Main__pm__get_db_size
 use        Main__pm__get_db_size___axiom as Main__pm__get_db_size___axiom
 use        Main__pm__get_db_length as Main__pm__get_db_length
 use        Main__pm__get_db_length___axiom as Main__pm__get_db_length___axiom
 use        Main__pm__is_website_registered_already___axiom as Main__pm__is_website_registered_already___axiom
 use        Main__s as Main__s
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t as Main__t
 use        Main__numtokens as Main__numtokens
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__inputpintext as Main__inputpintext
 use        Main__urltext as Main__urltext
 use        Main__isitemindb as Main__isitemindb
 use        Main__B_1__ispinvalid as Main__B_1__ispinvalid
 use        Main__B_1__islooprunning as Main__B_1__islooprunning
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Main__B_1__L_2__i as Main__B_1__L_2__i
 use        Main__B_1__B_3__ch as Main__B_1__B_3__ch
 use        Main__B_1__B_4__tokenstr1 as Main__B_1__B_4__tokenstr1
 use        Main__B_1__B_4__tokenstr2 as Main__B_1__B_4__tokenstr2
 use        Main__B_1__B_4__tokenstr3 as Main__B_1__B_4__tokenstr3
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Main__TTtSP1 as Main__TTtSP1
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Main__TTinputpintextSP1 as Main__TTinputpintextSP1
 use        Main__TinputpintextS___axiom as Main__TinputpintextS___axiom
 use        Main__B_1__L_2 as Main__B_1__L_2
 use        Main__B_1__B_4__while_loop as Main__B_1__B_4__while_loop
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t__aggregate_def as Main__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_687 as Temp___String_Literal_687
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_688 as Temp___String_Literal_688
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_693 as Temp___String_Literal_693
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_698 as Temp___String_Literal_698
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_703 as Temp___String_Literal_703
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_710 as Temp___String_Literal_710
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_715 as Temp___String_Literal_715
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_720 as Temp___String_Literal_720
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_725 as Temp___String_Literal_725
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_761 as Temp___String_Literal_761
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__isunlocked___axiom as Main__isunlocked___axiom
 use        Main__ispinaccepted___axiom as Main__ispinaccepted___axiom
 use        Main__s___axiom as Main__s___axiom
 use        Main__t___axiom as Main__t___axiom
 use        Main__t__aggregate_def___axiom as Main__t__aggregate_def___axiom
 use        Main__numtokens___axiom as Main__numtokens___axiom
 use        Main__inputpintext___axiom as Main__inputpintext___axiom
 use        Main__urltext___axiom as Main__urltext___axiom
 use        Main__isitemindb___axiom as Main__isitemindb___axiom
 use        Main__B_1__ispinvalid___axiom as Main__B_1__ispinvalid___axiom
 use        Main__B_1__islooprunning___axiom as Main__B_1__islooprunning___axiom
 use        Main__B_1__L_2__i___axiom as Main__B_1__L_2__i___axiom
 use        Main__B_1__B_3__ch___axiom as Main__B_1__B_3__ch___axiom
 use        Main__B_1__B_4__tokenstr1___axiom as Main__B_1__B_4__tokenstr1___axiom
 use        Main__B_1__B_4__tokenstr2___axiom as Main__B_1__B_4__tokenstr2___axiom
 use        Main__B_1__B_4__tokenstr3___axiom as Main__B_1__B_4__tokenstr3___axiom
 use        Main__B_1__L_2___axiom as Main__B_1__L_2___axiom
 use        Main__B_1__B_4__while_loop___axiom as Main__B_1__B_4__while_loop___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__pm__pinvaluesaved___axiom as Main__pm__pinvaluesaved___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__init_program___axiom as Main__pm__init_program___axiom
 use        Main__pm__is_pin_correct___axiom as Main__pm__is_pin_correct___axiom
 use        Main__pm__update_pin___axiom as Main__pm__update_pin___axiom
 use        Main__pm__put_password___axiom as Main__pm__put_password___axiom
 use        Main__pm__get_password___axiom as Main__pm__get_password___axiom
 use        Main__pm__remove_password___axiom as Main__pm__remove_password___axiom
 use        Main__pm__get_db_size___axiom as Main__pm__get_db_size___axiom
 use        Main__pm__get_db_length___axiom as Main__pm__get_db_length___axiom
 use        Main__pm__is_website_registered_already___axiom as Main__pm__is_website_registered_already___axiom
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Main__TTtSP1___axiom as Main__TTtSP1___axiom
 use        Main__TinputpintextS___axiom as Main__TinputpintextS___axiom
 use        Main__TTinputpintextSP1___axiom as Main__TTinputpintextSP1___axiom

 let def [#"main.adb" 82 0 0][@GP_Subp:main.adb:82] 
   (__void_param : unit)
  requires { [#"main.adb" 82 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:82 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:82 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:82 *)
  ;
  [#"main.adb" 82 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:82 *)
  ;
  [#"main.adb" 82 0 0] try
   ( ();
   ([#"main.adb" 84 0 0] ());
   ([#"mystring.adb" 3 0 0] ());
   ([#"main.adb" 84 0 0] ());
   ([#"main.adb" 85 0 0] ());
   ([#"main.adb" 86 0 0] ());
   ([#"main.adb" 87 0 0] ());
   ([#"passwordmanager.adb" 1 0 0] ( [#"passwordmanager.adb" 1 0 0] assume { [#"passwordmanager.adb" 1 0 0] (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content False False True True) };
   [#"passwordmanager.adb" 1 0 0] assume { [#"passwordmanager.adb" 1 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content False False True True) } ));
   ([#"main.adb" 87 0 0] ());
   ([#"main.adb" 88 0 0] ( [#"main.adb" 88 0 0] begin ensures {true} let _ = (let _ = (let temp___682 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 88 0 0] (val _f : Main__lines__mystring.mystring
   ensures {[#"main.adb" 88 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 88 0 0] assume { [#"main.adb" 88 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 88 0 0] assume { [#"main.adb" 88 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 89 0 0] ());
   ([#"main.adb" 89 0 0] ( [#"main.adb" 89 0 0] (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__t__aggregate_def.main__t__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
   [#"main.adb" 89 0 0] assume { [#"main.adb" 89 0 0] (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ));
   ([#"main.adb" 91 0 0] ( [#"main.adb" 91 0 0] assume { [#"main.adb" 91 0 0] (Standard__natural___axiom.default_initial_assumption Main__numtokens.numtokens.int__content False) };
   [#"main.adb" 91 0 0] assume { [#"main.adb" 91 0 0] (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False False True True) } ));
   ([#"main.adb" 92 0 0] ());
   ([#"main.adb" 92 0 0] ( [#"main.adb" 92 0 0] (Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content <- ( (Temp___String_Literal_687.temp___String_Literal_687(())) ));
   [#"main.adb" 92 0 0] assume { [#"main.adb" 92 0 0] (Main__TinputpintextS___axiom.dynamic_invariant Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content True False True True) } ));
   ([#"main.adb" 93 0 0] ());
   ([#"main.adb" 93 0 0] ( (let main__urltext__assume = ([#"main.adb" 93 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:   UrlText      : Lines.MyString := Lines.From_String ("www");                                          ^ main.adb:93:42:VC_PRECONDITION] [@GP_Sloc:main.adb:93:42] [@GP_Shape:urltext_decl__call_from_string] [@GP_Id:0] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_688.temp___String_Literal_688(()))) ((1 : int)) ((3 : int))))) )) in (
     (Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content <- ( main__urltext__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"main.adb" 94 0 0] ());
   ([#"main.adb" 101 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:101:4] ([#"main.adb" 101 0 0] ( ();
   ([#"main.adb" 102 0 0] [#"main.adb" 102 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((1 : int))) )));
   ([#"main.adb" 103 0 0] [#"main.adb" 103 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((1 : int))) )));
   ([#"main.adb" 112 0 0] ());
   ([#"main.adb" 111 0 0] ());
   ([#"main.adb" 136 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:107:24] ([#"main.adb" 107 0 0] ()) );
   ( [@GP_Sloc:main.adb:107:7] ([#"main.adb" 107 0 0] (if (( ([#"main.adb" 107 0 0] [#"main.adb" 107 0 0] (([@branch_id=2508] Main.spark__branch).bool__content <- ( ((Mycommandline__argument_count___axiom.argument_count(())) = (1 : int)) )));
   ( [@branch_id=2508] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:108:27] ([#"main.adb" 108 0 0] ()) );
    ( [@GP_Sloc:main.adb:108:10] ([#"main.adb" 108 0 0] (if (( ([#"main.adb" 108 0 0] [#"main.adb" 108 0 0] (([@branch_id=2514] Main.spark__branch).bool__content <- ( (( [#"main.adb" 108 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 108 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:108:27] [@comment:         if (MyCommandLine.Argument (1)'Length = 4) then                           ^ main.adb:108:27:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:B_1_declblk__if__if__cmp__typeconv__length_ref__call_argument] [@GP_Id:3] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     ()))
     in () end ;
    (Standard__string.length(([#"main.adb" 108 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:108:27] [@comment:         if (MyCommandLine.Argument (1)'Length = 4) then                           ^ main.adb:108:27:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:B_1_declblk__if__if__cmp__typeconv__length_ref__call_argument] [@GP_Id:3] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) = (4 : int)) )));
    ( [@branch_id=2514] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:main.adb:109:13] ([#"main.adb" 109 0 0] ()) );
     ( [@GP_Sloc:main.adb:109:42] ([#"main.adb" 109 0 0] ()) );
     ( [@GP_Sloc:main.adb:109:26] ([#"main.adb" 109 0 0] [#"main.adb" 109 0 0] (Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content <- ( (let temp___689 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 109 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:            InputPinText := MyCommandLine.Argument (1);                                          ^ main.adb:109:42:VC_PRECONDITION] [@GP_Id:1] [@GP_Shape:B_1_declblk__if__if__inputpintext_assign__call_argument] [@GP_Sloc:main.adb:109:42] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
      (  assert {  ([#"main.adb" 109 0 0] ( [@comment:            InputPinText := MyCommandLine.Argument (1);                                          ^ main.adb:109:42:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:B_1_declblk__if__if__inputpintext_assign__call_argument] [@GP_Id:2] [@GP_Sloc:main.adb:109:42] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___689) <= (Standard__string.last temp___689))) then (
       ( (Main__TTinputpintextSP1.first <= Main__TTinputpintextSP1.last) /\ (((Standard__string.last temp___689) - (Standard__string.first temp___689)) = (Main__TTinputpintextSP1.last - Main__TTinputpintextSP1.first)) )) else (
       (Main__TTinputpintextSP1.last < Main__TTinputpintextSP1.first))) ) )) };
      (Array__Int__Standard__character.slide((Standard__string.to_array(temp___689))) ((Standard__string.first(temp___689))) (Main__TTinputpintextSP1.first)) )))
      ))) );
     ( [@GP_Sloc:main.adb:111:22] ([#"main.adb" 111 0 0] ()) );
     ( [@GP_Sloc:main.adb:111:41] ([#"main.adb" 111 0 0] (let temp___690 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
     (let temp___691 [@mlw:proxy_symbol] [@introduced] = (4 : int) in (
      ( () (* Translation of an Ada loop from main.adb:111 *)
      ;
      [#"main.adb" 111 0 0] try
       ( [#"main.adb" 111 0 0] begin ensures {true} let _ = (let _ = Main__B_1__ispinvalid.ispinvalid.bool__content in (
        ()))
        in () end ;
       (let temp___692 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 111 0 0] (val _f : bool
       ensures {[#"main.adb" 111 0 0] (result = Main__B_1__ispinvalid.ispinvalid.bool__content)} 
       in _f) in (
        ( () (* Unrolling of the loop statements of loop main.adb:111 *)
        ;
        [#"main.adb" 111 0 0] (Main__B_1__L_2__i.i.int__content <- ( (1 : int) ));
        ();
        ( [@GP_Sloc:main.adb:113:37] ([#"main.adb" 113 0 0] ()) );
        ( [@GP_Sloc:main.adb:113:19] ([#"main.adb" 113 0 0] ([#"main.adb" 113 0 0] ( [#"main.adb" 113 0 0] (Main__B_1__B_3__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__B_1__L_2__i.i.int__content)))) ));
        [#"main.adb" 113 0 0] assume { [#"main.adb" 113 0 0] (Standard__character___axiom.dynamic_invariant Main__B_1__B_3__ch.ch.int__content True False True True) } ))) );
        ( [@GP_Sloc:main.adb:115:38] ([#"main.adb" 115 0 0] ()) );
        ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] (if (( ([#"main.adb" 115 0 0] [#"main.adb" 115 0 0] (([@branch_id=2561] Main.spark__branch).bool__content <- ( (Main__B_1__B_3__ch.ch.int__content < (48 : int)) )));
        ( [@branch_id=2561] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:main.adb:116:22] ([#"main.adb" 116 0 0] ()) );
         ( [@GP_Sloc:main.adb:116:33] ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
         ( [@GP_Sloc:main.adb:117:19] (if (( ([#"main.adb" 117 0 0] [#"main.adb" 117 0 0] (([@branch_id=2574] Main.spark__branch).bool__content <- ( ((57 : int) < Main__B_1__B_3__ch.ch.int__content) )));
         ( [@branch_id=2574] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:118:22] ([#"main.adb" 118 0 0] ()) );
          ( [@GP_Sloc:main.adb:118:33] ([#"main.adb" 118 0 0] [#"main.adb" 118 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
          ())) )))) );
         (Main__B_1__L_2__i.i.int__content <- ( (2 : int) ));
        ();
        ( [@GP_Sloc:main.adb:113:37] ([#"main.adb" 113 0 0] ()) );
        ( [@GP_Sloc:main.adb:113:19] ([#"main.adb" 113 0 0] ([#"main.adb" 113 0 0] ( [#"main.adb" 113 0 0] (Main__B_1__B_3__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__B_1__L_2__i.i.int__content)))) ));
        [#"main.adb" 113 0 0] assume { [#"main.adb" 113 0 0] (Standard__character___axiom.dynamic_invariant Main__B_1__B_3__ch.ch.int__content True False True True) } ))) );
        ( [@GP_Sloc:main.adb:115:38] ([#"main.adb" 115 0 0] ()) );
        ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] (if (( ([#"main.adb" 115 0 0] [#"main.adb" 115 0 0] (([@branch_id=2561] Main.spark__branch).bool__content <- ( (Main__B_1__B_3__ch.ch.int__content < (48 : int)) )));
        ( [@branch_id=2561] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:main.adb:116:22] ([#"main.adb" 116 0 0] ()) );
         ( [@GP_Sloc:main.adb:116:33] ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
         ( [@GP_Sloc:main.adb:117:19] (if (( ([#"main.adb" 117 0 0] [#"main.adb" 117 0 0] (([@branch_id=2574] Main.spark__branch).bool__content <- ( ((57 : int) < Main__B_1__B_3__ch.ch.int__content) )));
         ( [@branch_id=2574] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:118:22] ([#"main.adb" 118 0 0] ()) );
          ( [@GP_Sloc:main.adb:118:33] ([#"main.adb" 118 0 0] [#"main.adb" 118 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
          ())) )))) );
         (Main__B_1__L_2__i.i.int__content <- ( (3 : int) ));
        ();
        ( [@GP_Sloc:main.adb:113:37] ([#"main.adb" 113 0 0] ()) );
        ( [@GP_Sloc:main.adb:113:19] ([#"main.adb" 113 0 0] ([#"main.adb" 113 0 0] ( [#"main.adb" 113 0 0] (Main__B_1__B_3__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__B_1__L_2__i.i.int__content)))) ));
        [#"main.adb" 113 0 0] assume { [#"main.adb" 113 0 0] (Standard__character___axiom.dynamic_invariant Main__B_1__B_3__ch.ch.int__content True False True True) } ))) );
        ( [@GP_Sloc:main.adb:115:38] ([#"main.adb" 115 0 0] ()) );
        ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] (if (( ([#"main.adb" 115 0 0] [#"main.adb" 115 0 0] (([@branch_id=2561] Main.spark__branch).bool__content <- ( (Main__B_1__B_3__ch.ch.int__content < (48 : int)) )));
        ( [@branch_id=2561] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:main.adb:116:22] ([#"main.adb" 116 0 0] ()) );
         ( [@GP_Sloc:main.adb:116:33] ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
         ( [@GP_Sloc:main.adb:117:19] (if (( ([#"main.adb" 117 0 0] [#"main.adb" 117 0 0] (([@branch_id=2574] Main.spark__branch).bool__content <- ( ((57 : int) < Main__B_1__B_3__ch.ch.int__content) )));
         ( [@branch_id=2574] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:118:22] ([#"main.adb" 118 0 0] ()) );
          ( [@GP_Sloc:main.adb:118:33] ([#"main.adb" 118 0 0] [#"main.adb" 118 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
          ())) )))) );
         (Main__B_1__L_2__i.i.int__content <- ( (4 : int) ));
        ();
        ( [@GP_Sloc:main.adb:113:37] ([#"main.adb" 113 0 0] ()) );
        ( [@GP_Sloc:main.adb:113:19] ([#"main.adb" 113 0 0] ([#"main.adb" 113 0 0] ( [#"main.adb" 113 0 0] (Main__B_1__B_3__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__B_1__L_2__i.i.int__content)))) ));
        [#"main.adb" 113 0 0] assume { [#"main.adb" 113 0 0] (Standard__character___axiom.dynamic_invariant Main__B_1__B_3__ch.ch.int__content True False True True) } ))) );
        ( [@GP_Sloc:main.adb:115:38] ([#"main.adb" 115 0 0] ()) );
        ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] (if (( ([#"main.adb" 115 0 0] [#"main.adb" 115 0 0] (([@branch_id=2561] Main.spark__branch).bool__content <- ( (Main__B_1__B_3__ch.ch.int__content < (48 : int)) )));
        ( [@branch_id=2561] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:main.adb:116:22] ([#"main.adb" 116 0 0] ()) );
         ( [@GP_Sloc:main.adb:116:33] ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
         ( [@GP_Sloc:main.adb:117:19] (if (( ([#"main.adb" 117 0 0] [#"main.adb" 117 0 0] (([@branch_id=2574] Main.spark__branch).bool__content <- ( ((57 : int) < Main__B_1__B_3__ch.ch.int__content) )));
         ( [@branch_id=2574] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:118:22] ([#"main.adb" 118 0 0] ()) );
          ( [@GP_Sloc:main.adb:118:33] ([#"main.adb" 118 0 0] [#"main.adb" 118 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
          ())) )))) ) )))
        )
      with
       Main__B_1__L_2.L_2 -> ()
      end )))
     ))
     ) ) )) else (
     ( ();
     ( [@GP_Sloc:main.adb:123:13] ([#"main.adb" 123 0 0] ()) );
     ( [@GP_Sloc:main.adb:123:24] ([#"main.adb" 123 0 0] [#"main.adb" 123 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
    ( ();
    ( [@GP_Sloc:main.adb:126:10] ([#"main.adb" 126 0 0] ()) );
    ( [@GP_Sloc:main.adb:126:21] ([#"main.adb" 126 0 0] [#"main.adb" 126 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) );
   ( [@GP_Sloc:main.adb:129:11] ([#"main.adb" 129 0 0] ()) );
   ( [@GP_Sloc:main.adb:129:7] ([#"main.adb" 129 0 0] (if (( ([#"main.adb" 129 0 0] [#"main.adb" 129 0 0] (([@branch_id=2595] Main.spark__branch).bool__content <- ( Main__B_1__ispinvalid.ispinvalid.bool__content )));
   ( [@branch_id=2595] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:131:27] ([#"main.adb" 131 0 0] ()) );
    ( [@GP_Sloc:main.adb:131:12] ([#"main.adb" 131 0 0] ()) );
    ( [@GP_Sloc:main.adb:131:12] ([#"main.adb" 131 0 0] ( ([#"main.adb" 131 0 0] ( [@GP_Shape:B_1_declblk__if__call_init_program] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:4] [@GP_Sloc:main.adb:131:12] [@comment:         PM.Init_Program (InputPinText);            ^ main.adb:131:12:VC_PRECONDITION] (Main__pm__init_program___axiom.init_program((Standard__string.of_array(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__TTinputpintextSP1.first) (Main__TTinputpintextSP1.last)))) )) )) );
    ( [@GP_Sloc:main.adb:134:10] ([#"main.adb" 134 0 0] ()) );
    ( [@GP_Sloc:main.adb:134:21] ([#"main.adb" 134 0 0] [#"main.adb" 134 0 0] (Main__isunlocked.isunlocked.bool__content <- ( (Boolean.of_int((0 : int))) ))) );
    ( [@GP_Sloc:main.adb:136:10] ([#"main.adb" 136 0 0] ( ();
    ([#"main.adb" 139 0 0] ( [#"main.adb" 139 0 0] begin ensures {true} let _ = (let _ = (let temp___755 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 139 0 0] (val _f : Main__lines__mystring.mystring
    ensures {[#"main.adb" 139 0 0] true} 
    in _f) in (
     ( () )))
     in (
     ()))
     in () end ;
    [#"main.adb" 139 0 0] assume { [#"main.adb" 139 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content } False) };
    [#"main.adb" 139 0 0] assume { [#"main.adb" 139 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
    ([#"main.adb" 140 0 0] ( [#"main.adb" 140 0 0] begin ensures {true} let _ = (let _ = (let temp___757 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 140 0 0] (val _f : Main__lines__mystring.mystring
    ensures {[#"main.adb" 140 0 0] true} 
    in _f) in (
     ( () )))
     in (
     ()))
     in () end ;
    [#"main.adb" 140 0 0] assume { [#"main.adb" 140 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content } False) };
    [#"main.adb" 140 0 0] assume { [#"main.adb" 140 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
    ([#"main.adb" 141 0 0] ( [#"main.adb" 141 0 0] begin ensures {true} let _ = (let _ = (let temp___759 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 141 0 0] (val _f : Main__lines__mystring.mystring
    ensures {[#"main.adb" 141 0 0] true} 
    in _f) in (
     ( () )))
     in (
     ()))
     in () end ;
    [#"main.adb" 141 0 0] assume { [#"main.adb" 141 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content } False) };
    [#"main.adb" 141 0 0] assume { [#"main.adb" 141 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
    ([#"main.adb" 146 0 0] ());
    ();
    ( [@GP_Sloc:main.adb:146:35] ([#"main.adb" 146 0 0] ( () (* Translation of an Ada loop from main.adb:145 *)
    ;
    (if (Main__B_1__islooprunning.islooprunning.bool__content) then (
     [#"main.adb" 146 0 0] try
      ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__ispinaccepted.ispinaccepted.bool__content in (
       ()))
       in () end ;
      (let temp___744 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : bool
      ensures {[#"main.adb" 146 0 0] (result = Main__ispinaccepted.ispinaccepted.bool__content)} 
      in _f) in (
       ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__pm__db.db.Passworddatabase__database.database__content in (
        ()))
        in () end ;
       (let temp___742 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Passworddatabase__database.database
       ensures {[#"main.adb" 146 0 0] (result = Main__pm__db.db.Passworddatabase__database.database__content)} 
       in _f) in (
        ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__B_1__ispinvalid.ispinvalid.bool__content in (
         ()))
         in () end ;
        (let temp___743 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : bool
        ensures {[#"main.adb" 146 0 0] (result = Main__B_1__ispinvalid.ispinvalid.bool__content)} 
        in _f) in (
         ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__isunlocked.isunlocked.bool__content in (
          ()))
          in () end ;
         (let temp___741 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : bool
         ensures {[#"main.adb" 146 0 0] (result = Main__isunlocked.isunlocked.bool__content)} 
         in _f) in (
          ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__pm__pinvaluesaved.pinvaluesaved.int__content in (
           ()))
           in () end ;
          (let temp___740 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : int
          ensures {[#"main.adb" 146 0 0] (result = Main__pm__pinvaluesaved.pinvaluesaved.int__content)} 
          in _f) in (
           ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__isitemindb.isitemindb.bool__content in (
            ()))
            in () end ;
           (let temp___739 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : bool
           ensures {[#"main.adb" 146 0 0] (result = Main__isitemindb.isitemindb.bool__content)} 
           in _f) in (
            ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content } in (
             ()))
             in () end ;
            (let temp___738 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Main__lines__mystring.mystring
            ensures {[#"main.adb" 146 0 0] (result = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content })} 
            in _f) in (
             ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
              ()))
              in () end ;
             (let temp___737 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Array__Int__Mystringtokeniser__tokenextent.map
             ensures {[#"main.adb" 146 0 0] (result = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content)} 
             in _f) in (
              ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content } in (
               ()))
               in () end ;
              (let temp___736 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Main__lines__mystring.mystring
              ensures {[#"main.adb" 146 0 0] (result = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })} 
              in _f) in (
               ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content } in (
                ()))
                in () end ;
               (let temp___735 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Main__lines__mystring.mystring
               ensures {[#"main.adb" 146 0 0] (result = { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })} 
               in _f) in (
                ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } in (
                 ()))
                 in () end ;
                (let temp___734 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Main__lines__mystring.mystring
                ensures {[#"main.adb" 146 0 0] (result = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })} 
                in _f) in (
                 ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content } in (
                  ()))
                  in () end ;
                 (let temp___733 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Main__lines__mystring.mystring
                 ensures {[#"main.adb" 146 0 0] (result = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })} 
                 in _f) in (
                  ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  (let temp___732 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : Array__Int__Standard__character.map
                  ensures {[#"main.adb" 146 0 0] (result = Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content)} 
                  in _f) in (
                   ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__B_1__islooprunning.islooprunning.bool__content in (
                    ()))
                    in () end ;
                   (let temp___731 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : bool
                   ensures {[#"main.adb" 146 0 0] (result = Main__B_1__islooprunning.islooprunning.bool__content)} 
                   in _f) in (
                    ( [#"main.adb" 146 0 0] begin ensures {true} let _ = (let _ = Main__numtokens.numtokens.int__content in (
                     ()))
                     in () end ;
                    (let temp___730 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 146 0 0] (val _f : int
                    ensures {[#"main.adb" 146 0 0] (result = Main__numtokens.numtokens.int__content)} 
                    in _f) in (
                     ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:145 *)
                     ;
                     ();
                     ( [@GP_Sloc:main.adb:157:25] ([#"main.adb" 157 0 0] ()) );
                     ( [@GP_Sloc:main.adb:158:25] ([#"main.adb" 158 0 0] ()) );
                     ( [@GP_Sloc:main.adb:162:22] ([#"main.adb" 162 0 0] ()) );
                     ( [@GP_Sloc:main.adb:162:41] ([#"main.adb" 162 0 0] ()) );
                     ( [@GP_Sloc:main.adb:163:22] ([#"main.adb" 163 0 0] ()) );
                     ( [@GP_Sloc:main.adb:163:42] ([#"main.adb" 163 0 0] ()) );
                     () (* While loop translating the Ada loop from main.adb:145 *)
                     ;
                     (let temp___inv_754 [@mlw:proxy_symbol] [@introduced] = ( (let i =  (val _f : int
                     in _f) in (
                      (if ((Boolean.andb(((1 : int) <= i)) ((i <= (4 : int))))) then (
                        begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i)))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i))))))) in (
                        ()))
                        in () end ))))
                     ;
                      (val _f : bool
                     ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2650]  : int.
                      ( ( ((1 : int) <= i) /\ (i <= (4 : int)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i))) ) )) )} 
                     in _f) ) in (
                       begin ensures {true} let _ = (let _ = (let temp___inv_750 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                       ()))
                       in () end ;
                      (Standard__string.first((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                       ()))
                       in () end ;
                      (Standard__string.last((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ))) (((  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                       ()))
                       in () end ;
                      (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ) > (0 : int)))) in (
                        begin ensures {true} let _ = (let _ = (let temp___inv_745 [@mlw:proxy_symbol] [@introduced] = (Boolean.orb(((Main__pm__get_db_length___axiom.get_db_length(())) < (Main__pm__get_db_size___axiom.get_db_size(())))) (((Main__pm__get_db_length___axiom.get_db_length(())) >= (Main__pm__get_db_size___axiom.get_db_size(()))))) in (
                         begin ensures {true} let _ = (let _ = () in (
                         ()))
                         in () end ))
                        in (
                        ()))
                        in () end ))
                       in (
                       ()))
                       in () end ))
                     ;
                      while True do
                      invariant { 
                       ([#"main.adb" 150 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:33] [@GP_Sloc:main.adb:150:19] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__pragargs__forall] [@comment:                 (for all I in InputPinText'Range =>                   ^ main.adb:150:19:VC_LOOP_INVARIANT] (forall i [#"main.adb" 150 0 0]  [@name:I] [@model_trace:2650]  : int.
                        ( ( ((1 : int) <= i) /\ (i <= (4 : int)) ) -> ( ( [@GP_Pretty_Ada:2667] [@GP_Sloc:main.adb:151:22] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:2677] [@GP_Sloc:main.adb:153:22] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i))) ) ) )) ))
                       }
                      invariant { 
                       ([#"main.adb" 157 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__pragargs__and] [@GP_Sloc:main.adb:157:19] [@GP_Id:32] [@comment:                 ((Lines.To_String (UrlText)'First <=                   ^ main.adb:157:19:VC_LOOP_INVARIANT] ( ( [@GP_Sloc:main.adb:157:19] [@GP_Pretty_Ada:2694] ((Standard__string.first (epsilon temp___result_751 : Standard__string.string.
                        ( (temp___result_751 = (Main__lines__to_string.to_string { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) /\ (Main__lines__to_string.to_string__function_guard temp___result_751 { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content }) ))) <= (Standard__string.last (epsilon temp___result_752 : Standard__string.string.
                        ( (temp___result_752 = (Main__lines__to_string.to_string { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) /\ (Main__lines__to_string.to_string__function_guard temp___result_752 { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content }) )))) ) /\ ( [@GP_Sloc:main.adb:159:19] [@GP_Pretty_Ada:2710] ((Standard__string.length (epsilon temp___result_753 : Standard__string.string.
                        ( (temp___result_753 = (Main__lines__to_string.to_string { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) /\ (Main__lines__to_string.to_string__function_guard temp___result_753 { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content }) ))) > (0 : int)) ) ) ))
                       }
                      invariant { 
                       ([#"main.adb" 162 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:                 ((PM.Get_DB_Length < PM.Get_DB_Size) or                   ^ main.adb:162:19:VC_LOOP_INVARIANT] [@GP_Id:31] [@GP_Sloc:main.adb:162:19] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__pragargs__or] ( [@GP_Pretty_Ada:2721] [@GP_Sloc:main.adb:162:19] ( ((epsilon temp___result_746 : int.
                        ( (temp___result_746 = (Main__pm__get_db_length.get_db_length Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Main__pm__get_db_length.get_db_length__function_guard temp___result_746 Main__pm__db.db.Passworddatabase__database.database__content) )) < (epsilon temp___result_747 : int.
                        ( (temp___result_747 = (Main__pm__get_db_size.get_db_size ())) /\ (Main__pm__get_db_size.get_db_size__function_guard temp___result_747 ()) ))) \/ ((epsilon temp___result_748 : int.
                        ( (temp___result_748 = (Main__pm__get_db_length.get_db_length Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Main__pm__get_db_length.get_db_length__function_guard temp___result_748 Main__pm__db.db.Passworddatabase__database.database__content) )) >= (epsilon temp___result_749 : int.
                        ( (temp___result_749 = (Main__pm__get_db_size.get_db_size ())) /\ (Main__pm__get_db_size.get_db_size__function_guard temp___result_749 ()) ))) ) ) ))
                       }
                      ( () (* Assume implicit invariants from the loop main.adb:145 *)
                      ;
                       assume {  (Boolean.andb(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False True True True) )/\true ) /\ true )/\true ) /\ (Main__TinputpintextS___axiom.dynamic_invariant Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ true )/\true ) /\ (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content False True True True) )/\true ) /\ true )/\true ) /\ (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content False True True True) )/\true ) /\ true )/\true ) /\ true )/\true )) ((Main__B_1__islooprunning.islooprunning.bool__content = True))) };
                      () (* Check for absence of RTE in the invariant of loop main.adb:145 *)
                      ;
                      () (* Loop statements appearing after the loop invariant of loop main.adb:145 *)
                      ;
                      ();
                      ( [@GP_Sloc:main.adb:168:20] ([#"main.adb" 168 0 0] ()) );
                      ( [@GP_Sloc:main.adb:168:16] ([#"main.adb" 168 0 0] (if (( ([#"main.adb" 168 0 0] [#"main.adb" 168 0 0] (([@branch_id=2729] Main.spark__branch).bool__content <- ( Main__isunlocked.isunlocked.bool__content )));
                      ( [@branch_id=2729] Main.spark__branch ).bool__content )) then (
                       ( ();
                       ( [@GP_Sloc:main.adb:169:19] ([#"main.adb" 169 0 0] ()) );
                       ( [@GP_Sloc:main.adb:169:19] ([#"main.adb" 169 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_693.temp___String_Literal_693(()))) ((1 : int)) ((10 : int))))) )) );
                       ( [@GP_Sloc:main.adb:170:35] ([#"main.adb" 170 0 0] ()) );
                       ( [@GP_Sloc:main.adb:170:24] ([#"main.adb" 170 0 0] ()) );
                       ( [@GP_Sloc:main.adb:170:24] ([#"main.adb" 170 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) );
                       ( [@GP_Sloc:main.adb:173:39] ([#"main.adb" 173 0 0] ()) );
                       ( [@GP_Sloc:main.adb:173:27] ([#"main.adb" 173 0 0] ()) );
                       ( [@GP_Sloc:main.adb:173:43] ([#"main.adb" 173 0 0] ()) );
                       ( [@GP_Sloc:main.adb:173:46] ([#"main.adb" 173 0 0] ()) );
                       ( [@GP_Sloc:main.adb:172:36] ([#"main.adb" 172 0 0] ()) );
                       ( [@GP_Sloc:main.adb:172:36] ([#"main.adb" 172 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
                        [#"main.adb" 172 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
                         ( ([#"main.adb" 172 0 0] ( [@GP_Sloc:main.adb:172:36] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                  MyStringTokeniser.Tokenise                                    ^ main.adb:172:36:VC_PRECONDITION] [@GP_Id:5] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__call_tokenise] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__TTtSP1.last))) (Main__numtokens.numtokens)) ));
                          (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___694 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last)) in (
                          (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___694) (Mystringtokeniser__tokenarray.first temp___694) Main__TTtSP1.first)))
                          )) )))
                       ) );
                       ( [@GP_Sloc:main.adb:175:22] ([#"main.adb" 175 0 0] ()) );
                       ( [@GP_Sloc:main.adb:176:25] ([#"main.adb" 176 0 0] ()) );
                       ( [@GP_Sloc:main.adb:176:64] ([#"main.adb" 176 0 0] ()) );
                       ( [@GP_Sloc:main.adb:177:25] ([#"main.adb" 177 0 0] ()) );
                       ( [@GP_Sloc:main.adb:178:25] ([#"main.adb" 178 0 0] ()) );
                       ( [@GP_Sloc:main.adb:179:44] ([#"main.adb" 179 0 0] ()) );
                       ( [@GP_Sloc:main.adb:180:24] ([#"main.adb" 180 0 0] ()) );
                       ( [@GP_Sloc:main.adb:176:59] ([#"main.adb" 176 0 0] ()) );
                       ( [@GP_Sloc:main.adb:176:50] ([#"main.adb" 176 0 0] ()) );
                       ( [@GP_Sloc:main.adb:179:39] ([#"main.adb" 179 0 0] ()) );
                       ( [@GP_Sloc:main.adb:179:30] ([#"main.adb" 179 0 0] ()) );
                       ( [@GP_Sloc:main.adb:174:19] ([#"main.adb" 174 0 0] (if (( ([#"main.adb" 174 0 0] [#"main.adb" 174 0 0] (([@branch_id=2750] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__numtokens.numtokens.int__content >= (2 : int))) ((Boolean.andb((Boolean.andb((Boolean.andb((((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) - (1 : int)) <= ((Main__lines__length___axiom.length({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) - (Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) > (1 : int))))) ((((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) - (1 : int)) <= ((Main__lines__length___axiom.length({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) - (Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) > (1 : int)))))) )));
                       ( [@branch_id=2750] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:185:22] ([#"main.adb" 185 0 0] ()) );
                        ( [@GP_Sloc:main.adb:187:28] ([#"main.adb" 187 0 0] ()) );
                        ( [@GP_Sloc:main.adb:186:30] ([#"main.adb" 186 0 0] ()) );
                        ( [@GP_Sloc:main.adb:185:32] ([#"main.adb" 185 0 0] (let temp___695 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 186 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                       (Lines.Substring                              ^ main.adb:186:30:VC_PRECONDITION] [@GP_Sloc:main.adb:186:30] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring] [@GP_Id:8] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 187 0 0] ( [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:                          (S, T (1).Start, T (1).Start + T (1).Length - 1));                                                                       ^ main.adb:187:71:VC_RANGE_CHECK] [@GP_Sloc:main.adb:187:71] [@GP_Id:7] (Standard__positive.range_check_((([#"main.adb" 187 0 0] ( [@comment:                          (S, T (1).Start, T (1).Start + T (1).Length - 1));                                                        ^ main.adb:187:56:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:187:56] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring__sub__add] [@GP_Id:6] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )) in (
                          (Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___695.Main__lines__mystring.__split_fields ))))
                        ) );
                        ( [@GP_Sloc:main.adb:190:22] ([#"main.adb" 190 0 0] ()) );
                        ( [@GP_Sloc:main.adb:192:28] ([#"main.adb" 192 0 0] ()) );
                        ( [@GP_Sloc:main.adb:191:30] ([#"main.adb" 191 0 0] ()) );
                        ( [@GP_Sloc:main.adb:190:32] ([#"main.adb" 190 0 0] (let temp___696 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 191 0 0] ( [@GP_Id:11] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr2_assign__call_substring] [@GP_Sloc:main.adb:191:30] [@comment:                       (Lines.Substring                              ^ main.adb:191:30:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 192 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr2_assign__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:192:71] [@comment:                          (S, T (2).Start, T (2).Start + T (2).Length - 1));                                                                       ^ main.adb:192:71:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 192 0 0] ( [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr2_assign__call_substring__sub__add] [@comment:                          (S, T (2).Start, T (2).Start + T (2).Length - 1));                                                        ^ main.adb:192:56:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:192:56] [@GP_Id:9] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )) in (
                          (Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___696.Main__lines__mystring.__split_fields ))))
                        ) );
                        ( [@GP_Sloc:main.adb:200:25] ([#"main.adb" 200 0 0] ()) );
                        ( [@GP_Sloc:main.adb:201:42] ([#"main.adb" 201 0 0] ()) );
                        ( [@GP_Sloc:main.adb:201:30] ([#"main.adb" 201 0 0] ()) );
                        ( [@GP_Sloc:main.adb:199:42] ([#"main.adb" 199 0 0] ()) );
                        ( [@GP_Sloc:main.adb:199:30] ([#"main.adb" 199 0 0] ()) );
                        ( [@GP_Sloc:main.adb:198:22] ([#"main.adb" 198 0 0] (if (( ([#"main.adb" 198 0 0] [#"main.adb" 198 0 0] (([@branch_id=2860] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((let temp___719 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_715.temp___String_Literal_715(())) in (
                        (let temp___718 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })) in (
                         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___718))) ((Standard__string.first(temp___718))) ((Standard__string.last(temp___718))) (temp___719) ((1 : int)) ((4 : int)))))
                        ))
                        ) ((Main__numtokens.numtokens.int__content = (2 : int))))) ((( [#"main.adb" 198 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                         ()))
                         in () end ;
                        (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) ) = (4 : int)))) )));
                        ( [@branch_id=2860] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:main.adb:203:25] ([#"main.adb" 203 0 0] ()) );
                         ( [@GP_Sloc:main.adb:203:58] ([#"main.adb" 203 0 0] ()) );
                         ( [@GP_Sloc:main.adb:203:46] ([#"main.adb" 203 0 0] ()) );
                         ( [@GP_Sloc:main.adb:203:38] ([#"main.adb" 203 0 0] [#"main.adb" 203 0 0] (Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content <- ( (let temp___697 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                          ( [#"main.adb" 203 0 0] assert { [#"main.adb" 203 0 0] ([#"main.adb" 203 0 0] ( [@GP_Sloc:main.adb:203:46] [@GP_Id:12] [@vc:annotation] [@comment:                        InputPinText := Lines.To_String (TokenStr2);                                              ^ main.adb:203:46:VC_LENGTH_CHECK] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__inputpintext_assign__call_to_string] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___697) <= (Standard__string.last temp___697))) then (
                           ( (Main__TTinputpintextSP1.first <= Main__TTinputpintextSP1.last) /\ (((Standard__string.last temp___697) - (Standard__string.first temp___697)) = (Main__TTinputpintextSP1.last - Main__TTinputpintextSP1.first)) )) else (
                           (Main__TTinputpintextSP1.last < Main__TTinputpintextSP1.first))) ) )) };
                          (Array__Int__Standard__character.slide((Standard__string.to_array(temp___697))) ((Standard__string.first(temp___697))) (Main__TTinputpintextSP1.first)) )))
                          ))) );
                         ( [@GP_Sloc:main.adb:205:25] ([#"main.adb" 205 0 0] (if (( ([#"main.adb" 205 0 0] [#"main.adb" 205 0 0] (([@branch_id=2889] Main.spark__branch).bool__content <- ( ((Boolean.to_int(( (let i = [#"main.adb" 205 0 0] (val _f : int
                         in _f) in (
                          (if ((Boolean.andb(((1 : int) <= i)) ((i <= (4 : int))))) then (
                           [#"main.adb" 205 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i)))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i))))))) in (
                            ()))
                            in () end ))))
                         ;
                         [#"main.adb" 205 0 0] (val _f : bool
                         ensures {[#"main.adb" 205 0 0] ( (result = True) <-> (forall i [#"main.adb" 205 0 0]  [@model_trace:2891] [@name:I]  : int.
                          ( ( ((1 : int) <= i) /\ (i <= (4 : int)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i))) ) )) )} 
                         in _f) ))) <> (Boolean.to_int((Boolean.of_int((1 : int)))))) )));
                         ( [@branch_id=2889] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:213:28] ([#"main.adb" 213 0 0] ()) );
                          ( [@GP_Sloc:main.adb:213:39] ([#"main.adb" 213 0 0] [#"main.adb" 213 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
                          ()))) );
                         ( [@GP_Sloc:main.adb:216:29] ([#"main.adb" 216 0 0] ()) );
                         ( [@GP_Sloc:main.adb:216:25] ([#"main.adb" 216 0 0] (if (( ([#"main.adb" 216 0 0] [#"main.adb" 216 0 0] (([@branch_id=2929] Main.spark__branch).bool__content <- ( Main__B_1__ispinvalid.ispinvalid.bool__content )));
                         ( [@branch_id=2929] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:222:43] ([#"main.adb" 222 0 0] ()) );
                          ( [@GP_Sloc:main.adb:222:30] ([#"main.adb" 222 0 0] ()) );
                          ( [@GP_Sloc:main.adb:222:30] ([#"main.adb" 222 0 0] ( ([#"main.adb" 222 0 0] ( [@GP_Sloc:main.adb:222:30] [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@comment:                           PM.Update_Pin (InputPinText);                              ^ main.adb:222:30:VC_PRECONDITION] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__call_update_pin] [@vc:annotation] (Main__pm__update_pin___axiom.update_pin((Standard__string.of_array(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__TTinputpintextSP1.first) (Main__TTinputpintextSP1.last)))) )) )) );
                          ( [@GP_Sloc:main.adb:223:28] ([#"main.adb" 223 0 0] ()) );
                          ( [@GP_Sloc:main.adb:223:39] ([#"main.adb" 223 0 0] [#"main.adb" 223 0 0] (Main__isunlocked.isunlocked.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
                          ( ();
                          ( [@GP_Sloc:main.adb:225:28] ([#"main.adb" 225 0 0] ()) );
                          ( [@GP_Sloc:main.adb:225:42] ([#"main.adb" 225 0 0] [#"main.adb" 225 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                         ( [@GP_Sloc:main.adb:230:22] (if (( ([#"main.adb" 230 0 0] [#"main.adb" 230 0 0] (([@branch_id=2942] Main.spark__branch).bool__content <- ( (Boolean.andb((let temp___714 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_710.temp___String_Literal_710(())) in (
                         (let temp___713 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })) in (
                          (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___713))) ((Standard__string.first(temp___713))) ((Standard__string.last(temp___713))) (temp___714) ((1 : int)) ((3 : int)))))
                         ))
                         ) ((Main__numtokens.numtokens.int__content = (3 : int)))) )));
                         ( [@branch_id=2942] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:236:25] ([#"main.adb" 236 0 0] ()) );
                          ( [@GP_Sloc:main.adb:238:30] ([#"main.adb" 238 0 0] ()) );
                          ( [@GP_Sloc:main.adb:237:32] ([#"main.adb" 237 0 0] ()) );
                          ( [@GP_Sloc:main.adb:236:35] ([#"main.adb" 236 0 0] (let temp___708 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 237 0 0] ( [@GP_Sloc:main.adb:237:32] [@GP_Reason:VC_PRECONDITION] [@GP_Id:19] [@comment:                          Lines.Substring                                ^ main.adb:237:32:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr3_assign__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 238 0 0] ( [@GP_Id:18] [@GP_Sloc:main.adb:238:73] [@vc:annotation] [@comment:                            (S, T (3).Start, T (3).Start + T (3).Length - 1);                                                                         ^ main.adb:238:73:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr3_assign__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 238 0 0] ( [@GP_Id:17] [@comment:                            (S, T (3).Start, T (3).Start + T (3).Length - 1);                                                          ^ main.adb:238:58:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr3_assign__call_substring__sub__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:238:58] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )) in (
                            (Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___708.Main__lines__mystring.__split_fields ))))
                          ) );
                          ( [@GP_Sloc:main.adb:240:25] ([#"main.adb" 240 0 0] ()) );
                          ( [@GP_Sloc:main.adb:240:36] ([#"main.adb" 240 0 0] ()) );
                          ( [@GP_Sloc:main.adb:240:33] ([#"main.adb" 240 0 0] (let temp___709 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content } in (
                           [#"main.adb" 240 0 0] (Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___709.Main__lines__mystring.__split_fields ))))
                          ) );
                          ( [@GP_Sloc:main.adb:242:46] ([#"main.adb" 242 0 0] ()) );
                          ( [@GP_Sloc:main.adb:242:34] ([#"main.adb" 242 0 0] ()) );
                          ( [@GP_Sloc:main.adb:242:25] ([#"main.adb" 242 0 0] (if (( ([#"main.adb" 242 0 0] [#"main.adb" 242 0 0] (([@branch_id=2982] Main.spark__branch).bool__content <- ( (( [#"main.adb" 242 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                           ()))
                           in () end ;
                          (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (1024 : int)) )));
                          ( [@branch_id=2982] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:243:28] ([#"main.adb" 243 0 0] ()) );
                           ( [@GP_Sloc:main.adb:245:50] ([#"main.adb" 245 0 0] ()) );
                           ( [@GP_Sloc:main.adb:245:38] ([#"main.adb" 245 0 0] ()) );
                           ( [@GP_Sloc:main.adb:244:32] ([#"main.adb" 244 0 0] ()) );
                           ( [@GP_Sloc:main.adb:243:39] ([#"main.adb" 243 0 0] [#"main.adb" 243 0 0] (Main__isitemindb.isitemindb.bool__content <- ( ([#"main.adb" 244 0 0] ( [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__isitemindb_assign__call_is_website_registered_already] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:20] [@comment:                             PM.Is_Website_Registered_Already                                ^ main.adb:244:32:VC_PRECONDITION] [@GP_Sloc:main.adb:244:32] (Main__pm__is_website_registered_already___axiom.is_website_registered_already((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) )) ))) );
                           ( [@GP_Sloc:main.adb:249:49] ([#"main.adb" 249 0 0] ()) );
                           ( [@GP_Sloc:main.adb:249:37] ([#"main.adb" 249 0 0] ()) );
                           ( [@GP_Sloc:main.adb:250:49] ([#"main.adb" 250 0 0] ()) );
                           ( [@GP_Sloc:main.adb:250:37] ([#"main.adb" 250 0 0] ()) );
                           ( [@GP_Sloc:main.adb:254:33] ([#"main.adb" 254 0 0] ()) );
                           ( [@GP_Sloc:main.adb:252:35] ([#"main.adb" 252 0 0] ()) );
                           ( [@GP_Sloc:main.adb:252:55] ([#"main.adb" 252 0 0] ()) );
                           ( [@GP_Sloc:main.adb:248:28] ([#"main.adb" 248 0 0] (if (( ([#"main.adb" 248 0 0] [#"main.adb" 248 0 0] (([@branch_id=3003] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((( [#"main.adb" 248 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                            ()))
                            in () end ;
                           (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (1024 : int))) ((( [#"main.adb" 248 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content })) in (
                            ()))
                            in () end ;
                           (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (100 : int))))) ((Boolean.orb(((Main__pm__get_db_length___axiom.get_db_length(())) <= (Main__pm__get_db_size___axiom.get_db_size(())))) (Main__isitemindb.isitemindb.bool__content)))) )));
                           ( [@branch_id=3003] Main.spark__branch ).bool__content )) then (
                            ( ();
                            ( [@GP_Sloc:main.adb:257:51] ([#"main.adb" 257 0 0] ()) );
                            ( [@GP_Sloc:main.adb:257:39] ([#"main.adb" 257 0 0] ()) );
                            ( [@GP_Sloc:main.adb:258:51] ([#"main.adb" 258 0 0] ()) );
                            ( [@GP_Sloc:main.adb:258:39] ([#"main.adb" 258 0 0] ()) );
                            ( [@GP_Sloc:main.adb:256:33] ([#"main.adb" 256 0 0] ()) );
                            ( [@GP_Sloc:main.adb:256:33] ([#"main.adb" 256 0 0] ( ([#"main.adb" 256 0 0] ( [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__if__call_put_password] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                              PM.Put_Password                                 ^ main.adb:256:33:VC_PRECONDITION] [@GP_Sloc:main.adb:256:33] [@GP_Id:21] (Main__pm__put_password___axiom.put_password((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content }))) ((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr3.tokenstr3__split_fields.Main__lines__mystring.__split_fields__content })))) )) )) ) )) else (
                            ( ();
                            ( [@GP_Sloc:main.adb:261:31] ([#"main.adb" 261 0 0] ()) );
                            ( [@GP_Sloc:main.adb:261:45] ([#"main.adb" 261 0 0] [#"main.adb" 261 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                           ( ();
                           ( [@GP_Sloc:main.adb:264:28] ([#"main.adb" 264 0 0] ()) );
                           ( [@GP_Sloc:main.adb:264:42] ([#"main.adb" 264 0 0] [#"main.adb" 264 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                          ( [@GP_Sloc:main.adb:268:22] (if (( ([#"main.adb" 268 0 0] [#"main.adb" 268 0 0] (([@branch_id=3053] Main.spark__branch).bool__content <- ( (Boolean.andb((let temp___707 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_703.temp___String_Literal_703(())) in (
                          (let temp___706 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })) in (
                           (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___706))) ((Standard__string.first(temp___706))) ((Standard__string.last(temp___706))) (temp___707) ((1 : int)) ((3 : int)))))
                          ))
                          ) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
                          ( [@branch_id=3053] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:271:46] ([#"main.adb" 271 0 0] ()) );
                           ( [@GP_Sloc:main.adb:271:34] ([#"main.adb" 271 0 0] ()) );
                           ( [@GP_Sloc:main.adb:271:25] ([#"main.adb" 271 0 0] (if (( ([#"main.adb" 271 0 0] [#"main.adb" 271 0 0] (([@branch_id=3065] Main.spark__branch).bool__content <- ( (( [#"main.adb" 271 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                            ()))
                            in () end ;
                           (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (1024 : int)) )));
                           ( [@branch_id=3065] Main.spark__branch ).bool__content )) then (
                            ( ();
                            ( [@GP_Sloc:main.adb:273:83] ([#"main.adb" 273 0 0] ()) );
                            ( [@GP_Sloc:main.adb:273:71] ([#"main.adb" 273 0 0] ()) );
                            ( [@GP_Sloc:main.adb:273:34] ([#"main.adb" 273 0 0] ()) );
                            ( [@GP_Sloc:main.adb:273:28] ([#"main.adb" 273 0 0] (if (( ([#"main.adb" 273 0 0] [#"main.adb" 273 0 0] (([@branch_id=3075] Main.spark__branch).bool__content <- ( ([#"main.adb" 273 0 0] ( [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__if__call_is_website_registered_already] [@GP_Reason:VC_PRECONDITION] [@GP_Id:16] [@vc:annotation] [@comment:                           if( PM.Is_Website_Registered_Already (Lines.To_String (TokenStr2))) then                                  ^ main.adb:273:34:VC_PRECONDITION] [@GP_Sloc:main.adb:273:34] (Main__pm__is_website_registered_already___axiom.is_website_registered_already((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) )) )));
                            ( [@branch_id=3075] Main.spark__branch ).bool__content )) then (
                             ( ();
                             ( [@GP_Sloc:main.adb:275:68] ([#"main.adb" 275 0 0] ()) );
                             ( [@GP_Sloc:main.adb:275:56] ([#"main.adb" 275 0 0] ()) );
                             ( [@GP_Sloc:main.adb:275:36] ([#"main.adb" 275 0 0] ()) );
                             ( [@GP_Sloc:main.adb:274:31] ([#"main.adb" 274 0 0] ()) );
                             ( [@GP_Sloc:main.adb:274:31] ([#"main.adb" 274 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2(([#"main.adb" 275 0 0] ( [@comment:                                (PM.Get_Password (Lines.To_String (TokenStr2)));                                    ^ main.adb:275:36:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__if__call_put_line__2__call_get_password] [@GP_Sloc:main.adb:275:36] (Main__pm__get_password___axiom.get_password((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) )))) )) ) )) else (
                             ()))) ) )) else (
                            ( ();
                            ( [@GP_Sloc:main.adb:279:28] ([#"main.adb" 279 0 0] ()) );
                            ( [@GP_Sloc:main.adb:279:42] ([#"main.adb" 279 0 0] [#"main.adb" 279 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                           ( [@GP_Sloc:main.adb:284:22] (if (( ([#"main.adb" 284 0 0] [#"main.adb" 284 0 0] (([@branch_id=3099] Main.spark__branch).bool__content <- ( (Boolean.andb((let temp___702 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_698.temp___String_Literal_698(())) in (
                           (let temp___701 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })) in (
                            (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___701))) ((Standard__string.first(temp___701))) ((Standard__string.last(temp___701))) (temp___702) ((1 : int)) ((3 : int)))))
                           ))
                           ) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
                           ( [@branch_id=3099] Main.spark__branch ).bool__content )) then (
                            ( ();
                            ( [@GP_Sloc:main.adb:288:46] ([#"main.adb" 288 0 0] ()) );
                            ( [@GP_Sloc:main.adb:288:34] ([#"main.adb" 288 0 0] ()) );
                            ( [@GP_Sloc:main.adb:288:25] ([#"main.adb" 288 0 0] (if (( ([#"main.adb" 288 0 0] [#"main.adb" 288 0 0] (([@branch_id=3111] Main.spark__branch).bool__content <- ( (( [#"main.adb" 288 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                             ()))
                             in () end ;
                            (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (1024 : int)) )));
                            ( [@branch_id=3111] Main.spark__branch ).bool__content )) then (
                             ( ();
                             ( [@GP_Sloc:main.adb:290:65] ([#"main.adb" 290 0 0] ()) );
                             ( [@GP_Sloc:main.adb:290:53] ([#"main.adb" 290 0 0] ()) );
                             ( [@GP_Sloc:main.adb:290:30] ([#"main.adb" 290 0 0] ()) );
                             ( [@GP_Sloc:main.adb:290:30] ([#"main.adb" 290 0 0] ( ([#"main.adb" 290 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:14] [@vc:annotation] [@GP_Sloc:main.adb:290:30] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__call_remove_password] [@comment:                           PM.Remove_Password (Lines.To_String (TokenStr2));                              ^ main.adb:290:30:VC_PRECONDITION] (Main__pm__remove_password___axiom.remove_password((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })))) )) )) ) )) else (
                             ( ();
                             ( [@GP_Sloc:main.adb:292:28] ([#"main.adb" 292 0 0] ()) );
                             ( [@GP_Sloc:main.adb:292:42] ([#"main.adb" 292 0 0] [#"main.adb" 292 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                            ( ();
                            ( [@GP_Sloc:main.adb:295:25] ([#"main.adb" 295 0 0] ()) );
                            ( [@GP_Sloc:main.adb:295:39] ([#"main.adb" 295 0 0] [#"main.adb" 295 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) ))) ))) ))) )))) ) )) else (
                        ( ();
                        ( [@GP_Sloc:main.adb:299:22] ([#"main.adb" 299 0 0] ()) );
                        ( [@GP_Sloc:main.adb:299:36] ([#"main.adb" 299 0 0] [#"main.adb" 299 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                       ( ();
                       ( [@GP_Sloc:main.adb:307:19] ([#"main.adb" 307 0 0] ()) );
                       ( [@GP_Sloc:main.adb:307:19] ([#"main.adb" 307 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_720.temp___String_Literal_720(()))) ((1 : int)) ((8 : int))))) )) );
                       ( [@GP_Sloc:main.adb:308:35] ([#"main.adb" 308 0 0] ()) );
                       ( [@GP_Sloc:main.adb:308:24] ([#"main.adb" 308 0 0] ()) );
                       ( [@GP_Sloc:main.adb:308:24] ([#"main.adb" 308 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) );
                       ( [@GP_Sloc:main.adb:310:39] ([#"main.adb" 310 0 0] ()) );
                       ( [@GP_Sloc:main.adb:310:27] ([#"main.adb" 310 0 0] ()) );
                       ( [@GP_Sloc:main.adb:310:43] ([#"main.adb" 310 0 0] ()) );
                       ( [@GP_Sloc:main.adb:310:46] ([#"main.adb" 310 0 0] ()) );
                       ( [@GP_Sloc:main.adb:309:36] ([#"main.adb" 309 0 0] ()) );
                       ( [@GP_Sloc:main.adb:309:36] ([#"main.adb" 309 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
                        [#"main.adb" 309 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
                         ( ([#"main.adb" 309 0 0] ( [@GP_Sloc:main.adb:309:36] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                  MyStringTokeniser.Tokenise                                    ^ main.adb:309:36:VC_PRECONDITION] [@GP_Id:22] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__call_tokenise] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__TTtSP1.last))) (Main__numtokens.numtokens)) ));
                          (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___721 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last)) in (
                          (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___721) (Mystringtokeniser__tokenarray.first temp___721) Main__TTtSP1.first)))
                          )) )))
                       ) );
                       ( [@GP_Sloc:main.adb:313:22] ([#"main.adb" 313 0 0] ()) );
                       ( [@GP_Sloc:main.adb:314:25] ([#"main.adb" 314 0 0] ()) );
                       ( [@GP_Sloc:main.adb:314:64] ([#"main.adb" 314 0 0] ()) );
                       ( [@GP_Sloc:main.adb:315:25] ([#"main.adb" 315 0 0] ()) );
                       ( [@GP_Sloc:main.adb:316:25] ([#"main.adb" 316 0 0] ()) );
                       ( [@GP_Sloc:main.adb:317:44] ([#"main.adb" 317 0 0] ()) );
                       ( [@GP_Sloc:main.adb:318:24] ([#"main.adb" 318 0 0] ()) );
                       ( [@GP_Sloc:main.adb:314:59] ([#"main.adb" 314 0 0] ()) );
                       ( [@GP_Sloc:main.adb:314:50] ([#"main.adb" 314 0 0] ()) );
                       ( [@GP_Sloc:main.adb:317:39] ([#"main.adb" 317 0 0] ()) );
                       ( [@GP_Sloc:main.adb:317:30] ([#"main.adb" 317 0 0] ()) );
                       ( [@GP_Sloc:main.adb:312:19] ([#"main.adb" 312 0 0] (if (( ([#"main.adb" 312 0 0] [#"main.adb" 312 0 0] (([@branch_id=3158] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__numtokens.numtokens.int__content >= (2 : int))) ((Boolean.andb((Boolean.andb((Boolean.andb((((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) - (1 : int)) <= ((Main__lines__length___axiom.length({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) - (Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) > (1 : int))))) ((((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) - (1 : int)) <= ((Main__lines__length___axiom.length({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })) - (Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) > (1 : int)))))) )));
                       ( [@branch_id=3158] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:322:22] ([#"main.adb" 322 0 0] ()) );
                        ( [@GP_Sloc:main.adb:324:28] ([#"main.adb" 324 0 0] ()) );
                        ( [@GP_Sloc:main.adb:323:30] ([#"main.adb" 323 0 0] ()) );
                        ( [@GP_Sloc:main.adb:322:32] ([#"main.adb" 322 0 0] (let temp___722 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 323 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                       (Lines.Substring                              ^ main.adb:323:30:VC_PRECONDITION] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring] [@GP_Sloc:main.adb:323:30] [@GP_Id:25] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 324 0 0] ( [@GP_Sloc:main.adb:324:71] [@comment:                          (S, T (1).Start, T (1).Start + T (1).Length - 1));                                                                       ^ main.adb:324:71:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:24] (Standard__positive.range_check_((([#"main.adb" 324 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:324:56] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__tokenstr1_assign__call_substring__sub__add] [@comment:                          (S, T (1).Start, T (1).Start + T (1).Length - 1));                                                        ^ main.adb:324:56:VC_OVERFLOW_CHECK] [@GP_Id:23] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )) in (
                          (Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___722.Main__lines__mystring.__split_fields ))))
                        ) );
                        ( [@GP_Sloc:main.adb:329:25] ([#"main.adb" 329 0 0] ()) );
                        ( [@GP_Sloc:main.adb:329:43] ([#"main.adb" 329 0 0] ()) );
                        ( [@GP_Sloc:main.adb:328:42] ([#"main.adb" 328 0 0] ()) );
                        ( [@GP_Sloc:main.adb:328:30] ([#"main.adb" 328 0 0] ()) );
                        ( [@GP_Sloc:main.adb:327:22] ([#"main.adb" 327 0 0] (if (( ([#"main.adb" 327 0 0] [#"main.adb" 327 0 0] (([@branch_id=3243] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((let temp___729 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_725.temp___String_Literal_725(())) in (
                        (let temp___728 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr1.tokenstr1__split_fields.Main__lines__mystring.__split_fields__content })) in (
                         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___728))) ((Standard__string.first(temp___728))) ((Standard__string.last(temp___728))) (temp___729) ((1 : int)) ((6 : int)))))
                        ))
                        ) ((Main__numtokens.numtokens.int__content = (2 : int))))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) = (4 : int)))) )));
                        ( [@branch_id=3243] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:main.adb:334:25] ([#"main.adb" 334 0 0] ()) );
                         ( [@GP_Sloc:main.adb:336:31] ([#"main.adb" 336 0 0] ()) );
                         ( [@GP_Sloc:main.adb:335:33] ([#"main.adb" 335 0 0] ()) );
                         ( [@GP_Sloc:main.adb:334:35] ([#"main.adb" 334 0 0] (let temp___723 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 335 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                          (Lines.Substring                                 ^ main.adb:335:33:VC_PRECONDITION] [@GP_Sloc:main.adb:335:33] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr2_assign__call_substring] [@GP_Id:28] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 336 0 0] ( [@vc:annotation] [@comment:                             (S, T (2).Start, T (2).Start + T (2).Length - 1));                                                                          ^ main.adb:336:74:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr2_assign__call_substring__sub] [@GP_Id:27] [@GP_Sloc:main.adb:336:74] (Standard__positive.range_check_((([#"main.adb" 336 0 0] ( [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__tokenstr2_assign__call_substring__sub__add] [@comment:                             (S, T (2).Start, T (2).Start + T (2).Length - 1));                                                           ^ main.adb:336:59:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:336:59] [@GP_Id:26] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )) in (
                           (Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___723.Main__lines__mystring.__split_fields ))))
                         ) );
                         ( [@GP_Sloc:main.adb:340:25] ([#"main.adb" 340 0 0] ()) );
                         ( [@GP_Sloc:main.adb:340:58] ([#"main.adb" 340 0 0] ()) );
                         ( [@GP_Sloc:main.adb:340:46] ([#"main.adb" 340 0 0] ()) );
                         ( [@GP_Sloc:main.adb:340:38] ([#"main.adb" 340 0 0] [#"main.adb" 340 0 0] (Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content <- ( (let temp___724 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__B_1__B_4__tokenstr2.tokenstr2__split_fields.Main__lines__mystring.__split_fields__content })) in (
                          ( [#"main.adb" 340 0 0] assert { [#"main.adb" 340 0 0] ([#"main.adb" 340 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:340:46] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__inputpintext_assign__call_to_string] [@comment:                        InputPinText := Lines.To_String (TokenStr2);                                              ^ main.adb:340:46:VC_LENGTH_CHECK] [@GP_Id:29] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___724) <= (Standard__string.last temp___724))) then (
                           ( (Main__TTinputpintextSP1.first <= Main__TTinputpintextSP1.last) /\ (((Standard__string.last temp___724) - (Standard__string.first temp___724)) = (Main__TTinputpintextSP1.last - Main__TTinputpintextSP1.first)) )) else (
                           (Main__TTinputpintextSP1.last < Main__TTinputpintextSP1.first))) ) )) };
                          (Array__Int__Standard__character.slide((Standard__string.to_array(temp___724))) ((Standard__string.first(temp___724))) (Main__TTinputpintextSP1.first)) )))
                          ))) );
                         ( [@GP_Sloc:main.adb:342:25] ([#"main.adb" 342 0 0] (if (( ([#"main.adb" 342 0 0] [#"main.adb" 342 0 0] (([@branch_id=3295] Main.spark__branch).bool__content <- ( ((Boolean.to_int(( (let i = [#"main.adb" 342 0 0] (val _f : int
                         in _f) in (
                          (if ((Boolean.andb(((1 : int) <= i)) ((i <= (4 : int))))) then (
                           [#"main.adb" 342 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i)))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i))))))) in (
                            ()))
                            in () end ))))
                         ;
                         [#"main.adb" 342 0 0] (val _f : bool
                         ensures {[#"main.adb" 342 0 0] ( (result = True) <-> (forall i [#"main.adb" 342 0 0]  [@model_trace:3297] [@name:I]  : int.
                          ( ( ((1 : int) <= i) /\ (i <= (4 : int)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i))) ) )) )} 
                         in _f) ))) <> (Boolean.to_int((Boolean.of_int((1 : int)))))) )));
                         ( [@branch_id=3295] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:350:28] ([#"main.adb" 350 0 0] ()) );
                          ( [@GP_Sloc:main.adb:350:39] ([#"main.adb" 350 0 0] [#"main.adb" 350 0 0] (Main__B_1__ispinvalid.ispinvalid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
                          ()))) );
                         ( [@GP_Sloc:main.adb:353:29] ([#"main.adb" 353 0 0] ()) );
                         ( [@GP_Sloc:main.adb:353:25] ([#"main.adb" 353 0 0] (if (( ([#"main.adb" 353 0 0] [#"main.adb" 353 0 0] (([@branch_id=3335] Main.spark__branch).bool__content <- ( Main__B_1__ispinvalid.ispinvalid.bool__content )));
                         ( [@branch_id=3335] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:359:28] ([#"main.adb" 359 0 0] ()) );
                          ( [@GP_Sloc:main.adb:359:64] ([#"main.adb" 359 0 0] ()) );
                          ( [@GP_Sloc:main.adb:359:47] ([#"main.adb" 359 0 0] ()) );
                          ( [@GP_Sloc:main.adb:359:42] ([#"main.adb" 359 0 0] [#"main.adb" 359 0 0] (Main__ispinaccepted.ispinaccepted.bool__content <- ( ([#"main.adb" 359 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:359:47] [@vc:annotation] [@comment:                           IsPinAccepted := PM.Is_Pin_Correct (InputPinText);                                               ^ main.adb:359:47:VC_PRECONDITION] [@GP_Id:30] [@GP_Shape:B_1_declblk__if__B_4_declblk__while_loop_while__if__if__if__if__ispinaccepted_assign__call_is_pin_correct] (Main__pm__is_pin_correct___axiom.is_pin_correct((Standard__string.of_array(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (Main__TTinputpintextSP1.first) (Main__TTinputpintextSP1.last)))) )) ))) );
                          ( [@GP_Sloc:main.adb:361:32] ([#"main.adb" 361 0 0] ()) );
                          ( [@GP_Sloc:main.adb:361:28] ([#"main.adb" 361 0 0] (if (( ([#"main.adb" 361 0 0] [#"main.adb" 361 0 0] (([@branch_id=3344] Main.spark__branch).bool__content <- ( Main__ispinaccepted.ispinaccepted.bool__content )));
                          ( [@branch_id=3344] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:362:31] ([#"main.adb" 362 0 0] ()) );
                           ( [@GP_Sloc:main.adb:362:42] ([#"main.adb" 362 0 0] [#"main.adb" 362 0 0] (Main__isunlocked.isunlocked.bool__content <- ( (Boolean.of_int((1 : int))) ))) ) )) else (
                           ()))) ) )) else (
                          ( ();
                          ( [@GP_Sloc:main.adb:365:28] ([#"main.adb" 365 0 0] ()) );
                          ( [@GP_Sloc:main.adb:365:42] ([#"main.adb" 365 0 0] [#"main.adb" 365 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                         ( ();
                         ( [@GP_Sloc:main.adb:369:25] ([#"main.adb" 369 0 0] ()) );
                         ( [@GP_Sloc:main.adb:369:39] ([#"main.adb" 369 0 0] [#"main.adb" 369 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )) else (
                        ( ();
                        ( [@GP_Sloc:main.adb:373:22] ([#"main.adb" 373 0 0] ()) );
                        ( [@GP_Sloc:main.adb:373:36] ([#"main.adb" 373 0 0] [#"main.adb" 373 0 0] (Main__B_1__islooprunning.islooprunning.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )))) ) )))) );
                      () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:145 *)
                      ;
                      (if (not ( Main__B_1__islooprunning.islooprunning.bool__content )) then (
                        raise Main__B_1__B_4__while_loop.While_loop));
                      ();
                      ( [@GP_Sloc:main.adb:157:25] ([#"main.adb" 157 0 0] ()) );
                      ( [@GP_Sloc:main.adb:158:25] ([#"main.adb" 158 0 0] ()) );
                      ( [@GP_Sloc:main.adb:162:22] ([#"main.adb" 162 0 0] ()) );
                      ( [@GP_Sloc:main.adb:162:41] ([#"main.adb" 162 0 0] ()) );
                      ( [@GP_Sloc:main.adb:163:22] ([#"main.adb" 163 0 0] ()) );
                      ( [@GP_Sloc:main.adb:163:42] ([#"main.adb" 163 0 0] ()) );
                      (let temp___inv_754 [@mlw:proxy_symbol] [@introduced] = ( (let i =  (val _f : int
                      in _f) in (
                       (if ((Boolean.andb(((1 : int) <= i)) ((i <= (4 : int))))) then (
                         begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i)))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content) (i))))))) in (
                         ()))
                         in () end ))))
                      ;
                       (val _f : bool
                      ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2650]  : int.
                       ( ( ((1 : int) <= i) /\ (i <= (4 : int)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i)) >= (48 : int)) /\ ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__inputpintext.inputpintext.Array__Int__Standard__character.map__content i))) ) )) )} 
                      in _f) ) in (
                        begin ensures {true} let _ = (let _ = (let temp___inv_750 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                        ()))
                        in () end ;
                       (Standard__string.first((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ) <= (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                        ()))
                        in () end ;
                       (Standard__string.last((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ))) (((  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })) in (
                        ()))
                        in () end ;
                       (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__urltext.urltext__split_fields.Main__lines__mystring.__split_fields__content })))) ) > (0 : int)))) in (
                         begin ensures {true} let _ = (let _ = (let temp___inv_745 [@mlw:proxy_symbol] [@introduced] = (Boolean.orb(((Main__pm__get_db_length___axiom.get_db_length(())) < (Main__pm__get_db_size___axiom.get_db_size(())))) (((Main__pm__get_db_length___axiom.get_db_length(())) >= (Main__pm__get_db_size___axiom.get_db_size(()))))) in (
                          begin ensures {true} let _ = (let _ = () in (
                          ()))
                          in () end ))
                         in (
                         ()))
                         in () end ))
                        in (
                        ()))
                        in () end ))
                       )
                     done )))
                     )))
                    )))
                   )))
                  )))
                 )))
                )))
               )))
              )))
             )))
            )))
           )))
          )))
         )))
        )))
       )
     with
      Main__B_1__B_4__while_loop.While_loop -> ()
     end)) )) ) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:main.adb:383:7] ([#"main.adb" 383 0 0] ()) );
   ( [@GP_Sloc:main.adb:383:7] ([#"main.adb" 383 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_761.temp___String_Literal_761(()))) ((1 : int)) ((19 : int))))) )) ) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length___axiom as Main__lines__max_mystring_length___axiom

 let def [#"main.adb" 84 0 0][@GP_Subp:main.adb:84] 
   (__void_param : unit)
  requires { [#"main.adb" 84 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"main.adb" 84 0 0] ( [#"main.adb" 84 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"main.adb" 84 0 0] assume { [#"main.adb" 84 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"main.adb" 84 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:main.adb:84:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at main.adb:84, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Main__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___762 [@mlw:proxy_symbol] [@introduced] =  (val _f : Main__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length__m as Main__lines__length__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length__m___axiom as Main__lines__length__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__length__result [@model_trace:113130@result] [@model_projected] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:main.adb:84:4:VC_POSTCONDITION] [@GP_Id:34] [@model_vc_post] [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:84:4] ( [@GP_Pretty_Ada:113526] [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:84:4] (main__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:84 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:84 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:84 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:main.adb:84:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (main__lines__length__result.int__content <- ( (Main__lines__mystring__T13b__rep.to_rep(Main__lines__length__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (main__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  main__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__to_string__result as Main__lines__to_string__result
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
 use        Main__lines__to_string__T51b as Main__lines__to_string__T51b
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Main__lines__to_string__T51b___axiom as Main__lines__to_string__T51b___axiom

 val main__lines__to_string__result [@name:To_String] [@model_trace:112979@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:41] [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:84:4] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:main.adb:84:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] ( ( ( [@GP_Pretty_Ada:112959] [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:84:4] ((Standard__string.length main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_771 : int.
   ( (temp___result_771 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_771 Main__lines__to_string__m.m) ))) ) /\ ( [@GP_Pretty_Ada:112966] [@GP_Sloc:mystring.ads:10:14:instantiated:main.adb:84:4] ((Standard__string.first main__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Sloc:mystring.ads:10:45:instantiated:main.adb:84:4] [@GP_Pretty_Ada:112971] ((Standard__string.last main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_772 : int.
   ( (temp___result_772 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_772 Main__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at main.adb:84 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at main.adb:84 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at main.adb:84 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@GP_Sloc:mystring.adb:6:7:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:35] [@GP_Reason:VC_RANGE_CHECK] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:main.adb:84:4:VC_RANGE_CHECK] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Main__lines__to_string__TresultS___axiom.default_initial_assumption (Main__lines__to_string__TresultS.of_array Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:main.adb:84:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:84:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Main__lines__to_string__TresultS.to_array (let temp___770 [@mlw:proxy_symbol] [@introduced] = (let temp___769 [@mlw:proxy_symbol] [@introduced] = (let temp___768 [@mlw:proxy_symbol] [@introduced] = (let temp___766 [@mlw:proxy_symbol] [@introduced] = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
   (let temp___765 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___767 [@mlw:proxy_symbol] [@introduced] = Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Main__lines__to_string__T51b.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Id:36] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:84:4] ( (temp___765 <= temp___766) -> ( ( (Main__lines__TmystringstrD1.first <= temp___765) /\ (temp___765 <= Main__lines__TmystringstrD1.last) ) /\ ( (Main__lines__TmystringstrD1.first <= temp___766) /\ (temp___766 <= Main__lines__TmystringstrD1.last) ) ) ) )) };
    temp___767 )) (temp___765) (temp___766))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:84:4] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Main__lines__to_string__T51b.first(temp___768))) ((Main__lines__to_string__T51b.last(temp___768)))) )) };
    (Standard__string.of_array((Main__lines__to_string__T51b.to_array(temp___768))) ((Main__lines__to_string__T51b.first(temp___768))) ((Main__lines__to_string__T51b.last(temp___768)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:main.adb:84:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Id:38] [@GP_Shape:result_assign__typeconv] [@GP_Reason:VC_LENGTH_CHECK] [@GP_Sloc:mystring.adb:8:17:instantiated:main.adb:84:4] ( true /\ (if (((Standard__string.first temp___769) <= (Standard__string.last temp___769))) then (
     ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ (((Standard__string.last temp___769) - (Standard__string.first temp___769)) = ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) - (1 : int))) )) else (
     ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) < (1 : int)))) ) )) };
    (Main__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___769))) ((Standard__string.first(temp___769))) ((1 : int)))) ((1 : int)) ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Shape:result_assign] [@GP_Id:39] [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:84:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:main.adb:84:4:VC_LENGTH_CHECK] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Main__lines__to_string__TresultS.first temp___770) <= (Main__lines__to_string__TresultS.last temp___770))) then (
     ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ (((Main__lines__to_string__TresultS.last temp___770) - (Main__lines__to_string__TresultS.first temp___770)) = ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first)))) ) )) };
    temp___770 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:main.adb:84:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:main.adb:84:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (main__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@GP_Id:40] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:9:30:instantiated:main.adb:84:4] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(main__lines__to_string__result.Standard__string.string__content)) ))) )) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(main__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(main__lines__to_string__result.Standard__string.string__content)) ) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  main__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at main.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_773___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_773 as Temp_____aggregate_def_773
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___775   : int.
   (let temp___774 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_773.temp_____aggregate_def_773 temp___775) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___775 True True True True)) then (
     (forall temp___776   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___774 temp___776)) = temp___775))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__from_string__m as Main__lines__from_string__m
 use        Main__lines__from_string__j as Main__lines__from_string__j
 use        Main__lines__from_string__L_1__i as Main__lines__from_string__L_1__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__from_string__L_1 as Main__lines__from_string__L_1
 use        Main__lines__from_string__L_1__T56b as Main__lines__from_string__L_1__T56b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_773 as Temp_____aggregate_def_773
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__from_string__s___axiom as Main__lines__from_string__s___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__from_string__m___axiom as Main__lines__from_string__m___axiom
 use        Main__lines__from_string__j___axiom as Main__lines__from_string__j___axiom
 use        Main__lines__from_string__L_1___axiom as Main__lines__from_string__L_1___axiom
 use        Main__lines__from_string__L_1__i___axiom as Main__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_773___axiom as Temp_____aggregate_def_773___axiom
 use        Main__lines__from_string__L_1__T56b___axiom as Main__lines__from_string__L_1__T56b___axiom

 val main__lines__from_string__result [@name:From_String] [@model_projected] [@model_trace:113013@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:84:4] [@model_vc_post] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:main.adb:84:4:VC_POSTCONDITION] [@GP_Id:52] ( [@GP_Pretty_Ada:113458] [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:84:4] ((epsilon temp___result_789 : int.
   ( (temp___result_789 = (Main__lines__length.length main__lines__from_string__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_789 main__lines__from_string__result.Main__lines__mystring.mystring__content) )) = (Standard__string.length Main__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at main.adb:84 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Main__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at main.adb:84 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@GP_Sloc:mystring.ads:13:15:instantiated:main.adb:84:4] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:51] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at main.adb:84 *)
  ;
   assume {  ( [@GP_Pretty_Ada:113444] ((Standard__string.length Main__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let main__lines__from_string__m__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = ( 0 : Main__lines__mystring__T13b.t13b ); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_773.temp_____aggregate_def_773((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__from_string__m__assume.Main__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Main__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:main.adb:84:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=144393] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@GP_Id:43] [@GP_Sloc:mystring.adb:16:11:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:main.adb:84:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Main__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=144393] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:84:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Reason:VC_RAISE] [@GP_Id:42] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:main.adb:84:4:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:84:4] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:main.adb:84:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:main.adb:84:4] ([#"mystring.adb" 19 0 0] (let temp___778 [@mlw:proxy_symbol] [@introduced] = (let temp___777 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___777.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___777 ) with Main__lines__mystring.__split_fields = { ( temp___777.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Id:44] [@GP_Sloc:mystring.adb:19:20:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] (Main__lines__mystring__T13b.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Main__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___778.Main__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:main.adb:84:4] ([#"mystring.adb" 20 0 0] (let temp___779 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Main__lines__from_string__s.s)) ) in (
   (let temp___780 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Main__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( temp___779 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at main.adb:84 *)
    ;
    (if ((Boolean.andb((temp___779 <= Main__lines__from_string__L_1__i.i.int__content)) ((Main__lines__from_string__L_1__i.i.int__content <= temp___780)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___786 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Main__lines__mystring.mystring
      ensures {[#"mystring.adb" 20 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__L_1__i.i.int__content in (
        ()))
        in () end ;
       (let temp___785 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
       ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__L_1__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__j.j.int__content in (
         ()))
         in () end ;
        (let temp___784 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:84 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at main.adb:84 *)
         ;
         (let temp___inv_788 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:84:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@GP_Id:47] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:84:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:49] [@GP_Shape:L_1_while__pragargs__cmp] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:main.adb:84:4:VC_LOOP_INVARIANT] ( [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:84:4] [@GP_Pretty_Ada:144421] (Main__lines__from_string__j.j.int__content = ((Main__lines__from_string__L_1__i.i.int__content - (Standard__string.first Main__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at main.adb:84 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Main__lines__from_string__s.s) <= (Standard__string.last Main__lines__from_string__s.s)) )) then (
           (Main__lines__from_string__L_1__T56b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) Main__lines__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___786.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) )) (( ((Standard__string.first Main__lines__from_string__s.s) <= Main__lines__from_string__L_1__i.i.int__content) /\ (Main__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Main__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at main.adb:84 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at main.adb:84 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:main.adb:84:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:84:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:main.adb:84:4] ([#"mystring.adb" 22 0 0] (let temp___783 [@mlw:proxy_symbol] [@introduced] = (let temp___782 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___782.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___782 ) with Main__lines__mystring.__split_fields = { ( temp___782.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___781 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@GP_Id:45] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:84:4] ( (Main__lines__TmystringstrD1.first <= Main__lines__from_string__j.j.int__content) /\ (Main__lines__from_string__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__lines__from_string__s.s))) (Main__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___783.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:main.adb:84:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:main.adb:84:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:main.adb:84:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Main__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__j_assign__add] [@GP_Id:46] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:23:17:instantiated:main.adb:84:4] (Standard__integer.range_check_((Main__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:84 *)
          ;
          (if ((Main__lines__from_string__L_1__i.i.int__content = temp___780)) then (
            raise Main__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( (Main__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_788 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:84:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@GP_Id:47] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:84:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:main.adb:84:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:main.adb:84:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (main__lines__from_string__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__from_string__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.ads:14:45:instantiated:main.adb:84:4] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:50] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  main__lines__from_string__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less__m1 as Main__lines__less__m1
 use        Main__lines__less__m2 as Main__lines__less__m2
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__less__i as Main__lines__less__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__less__L_2 as Main__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__less__m1___axiom as Main__lines__less__m1___axiom
 use        Main__lines__less__m2___axiom as Main__lines__less__m2___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__less__i___axiom as Main__lines__less__i___axiom
 use        Main__lines__less__L_2___axiom as Main__lines__less__L_2___axiom

 val main__lines__less__result [@model_projected] [@name:Less] [@model_trace:113032@result]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Main__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:main.adb:84:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=144550] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) < (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=144550] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:84:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:main.adb:84:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=144560] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) > (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
    ( [@branch_id=144560] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:main.adb:84:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:main.adb:84:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at main.adb:84 *)
     ;
     (if ((Main__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___794 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Main__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:84 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at main.adb:84 *)
        ;
        (let temp___inv_795 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Id:58] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:84:4] [@vc:annotation] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:main.adb:84:4:VC_LOOP_INVARIANT] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Pretty_Ada:144581] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:84:4] (Main__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at main.adb:84 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True True True True) )/\true )) ((Main__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at main.adb:84 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at main.adb:84 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:84:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:84:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:main.adb:84:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=144588] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___792 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___792) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Id:56] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:84:4] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___793 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___793) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Id:57] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:main.adb:84:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=144588] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:main.adb:84:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:main.adb:84:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=144602] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___790 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___790) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Sloc:mystring.adb:40:26:instantiated:main.adb:84:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Id:54] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___791 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___791) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:40:38:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Id:55] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=144602] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:main.adb:84:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:main.adb:84:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:main.adb:84:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:main.adb:84:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Main__lines__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@GP_Sloc:mystring.adb:43:23:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Id:53] (Standard__integer.range_check_((Main__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:84 *)
         ;
         (if (not ( (Main__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Main__lines__less__L_2.L_2));
         (let temp___inv_795 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Main__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:main.adb:84:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m as Main__lines__get__m
 use        Main__lines__get__index as Main__lines__get__index
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m___axiom as Main__lines__get__m___axiom
 use        Main__lines__get__index___axiom as Main__lines__get__index___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__get__result [@model_trace:113216@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Main__lines__get__index.index <= (Main__lines__length___axiom.length(Main__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:113594] (Main__lines__get__index.index <= (epsilon temp___result_797 : int.
   ( (temp___result_797 = (Main__lines__length.length Main__lines__get__m.m)) /\ (Main__lines__length.length__function_guard temp___result_797 Main__lines__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:main.adb:84:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (main__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___796 [@mlw:proxy_symbol] [@introduced] = Main__lines__get__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___796) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@GP_Id:59] [@vc:annotation] [@GP_Sloc:mystring.ads:46:13:instantiated:main.adb:84:4] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__get__index.index) /\ (Main__lines__get__index.index <= Main__lines__TmystringstrD1.last) ) )) };
    Main__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__equal__m1 as Main__lines__equal__m1
 use        Main__lines__equal__m2 as Main__lines__equal__m2
 use        Main__lines__get as Main__lines__get
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__equal__i as Main__lines__equal__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__equal__L_3 as Main__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__equal__m1___axiom as Main__lines__equal__m1___axiom
 use        Main__lines__equal__m2___axiom as Main__lines__equal__m2___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__equal__i___axiom as Main__lines__equal__i___axiom
 use        Main__lines__equal__L_3___axiom as Main__lines__equal__L_3___axiom

 val main__lines__equal__result [@name:Equal] [@model_projected] [@model_trace:113096@result]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:84:4] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:main.adb:84:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:69] [@GP_Shape:pragargs__if] (if ((main__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Sloc:mystring.ads:20:11:instantiated:main.adb:84:4] [@GP_Pretty_Ada:113065] ((epsilon temp___result_811 : int.
    ( (temp___result_811 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_811 Main__lines__equal__m1.m1) )) = (epsilon temp___result_812 : int.
    ( (temp___result_812 = (Main__lines__length.length Main__lines__equal__m2.m2)) /\ (Main__lines__length.length__function_guard temp___result_812 Main__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@model_trace:113083] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_813 : int.
     ( (temp___result_813 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_813 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:84:4] [@GP_Pretty_Ada:113073] ((epsilon temp___result_814 : int.
     ( (temp___result_814 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_814 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_815 : int.
     ( (temp___result_815 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_815 Main__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:84:4] [@GP_Pretty_Ada:113672] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at main.adb:84 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m1.m1 True False True True) };
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at main.adb:84 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at main.adb:84 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Main__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:main.adb:84:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=144739] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) <> (Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=144739] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:main.adb:84:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:main.adb:84:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at main.adb:84 *)
    ;
    (if ((Main__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Main__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___800 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Main__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:84 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at main.adb:84 *)
       ;
       (let temp___inv_801 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:63] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___802 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___802) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:64] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___803 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___803) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:65] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@name:J] [@model_trace:144780]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___804 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___804 j)))
        ) = (Standard__character__rep.to_rep (let temp___805 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___805 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:main.adb:84:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:if__L_3_while__pragargs__and] [@GP_Id:66] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:84:4] ( ( [@GP_Pretty_Ada:144761] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:84:4] (Main__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@name:J] [@model_trace:144780]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Sloc:mystring.adb:60:60:instantiated:main.adb:84:4] [@GP_Pretty_Ada:144768] ((Standard__character__rep.to_rep (let temp___806 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___806 j)))
          ) = (Standard__character__rep.to_rep (let temp___807 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___807 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at main.adb:84 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True True True True) )/\true )) ((Main__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at main.adb:84 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at main.adb:84 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:84:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:84:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:main.adb:84:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=144793] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___798 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___798) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:61] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:main.adb:84:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___799 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___799) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:62] [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=144793] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:main.adb:84:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:main.adb:84:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:main.adb:84:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:main.adb:84:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Main__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:64:23:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:60] [@GP_Shape:if__L_3_while__if__i_assign__add] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:84 *)
        ;
        (if (not ( (Main__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Main__lines__equal__L_3.L_3));
        (let temp___inv_801 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:63] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___802 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___802) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:64] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___803 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___803) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:65] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@name:J] [@model_trace:144780]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___804 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___804 j)))
         ) = (Standard__character__rep.to_rep (let temp___805 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___805 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Main__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:main.adb:84:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (main__lines__equal__result.bool__content) then (
   (Boolean.andb(((Main__lines__length___axiom.length(Main__lines__equal__m1.m1)) = (Main__lines__length___axiom.length(Main__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Main__lines__length___axiom.length(Main__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:main.adb:84:4:VC_PRECONDITION] [@GP_Id:67] (Main__lines__get___axiom.get(Main__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Sloc:mystring.ads:21:52:instantiated:main.adb:84:4] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:main.adb:84:4:VC_PRECONDITION] [@GP_Id:68] (Main__lines__get___axiom.get(Main__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:113083] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_808 : int.
     ( (temp___result_808 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_808 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:113073] ((epsilon temp___result_809 : int.
     ( (temp___result_809 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_809 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_810 : int.
     ( (temp___result_810 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_810 Main__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  main__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at main.adb:84, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_816___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_816 as Temp_____aggregate_def_816
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___818   : int.
   (let temp___817 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_816.temp_____aggregate_def_816 temp___818) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___818 True True True True)) then (
     (forall temp___819   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___817 temp___819)) = temp___818))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m as Main__lines__substring__m
 use        Main__lines__substring__from as Main__lines__substring__from
 use        Main__lines__substring__to as Main__lines__substring__to
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__substring__r as Main__lines__substring__r
 use        Main__lines__substring__j as Main__lines__substring__j
 use        Main__lines__substring__L_4__i as Main__lines__substring__L_4__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__substring__L_4 as Main__lines__substring__L_4
 use        Main__lines__substring__L_4__T72b as Main__lines__substring__L_4__T72b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_816 as Temp_____aggregate_def_816
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m___axiom as Main__lines__substring__m___axiom
 use        Main__lines__substring__from___axiom as Main__lines__substring__from___axiom
 use        Main__lines__substring__to___axiom as Main__lines__substring__to___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__substring__r___axiom as Main__lines__substring__r___axiom
 use        Main__lines__substring__j___axiom as Main__lines__substring__j___axiom
 use        Main__lines__substring__L_4___axiom as Main__lines__substring__L_4___axiom
 use        Main__lines__substring__L_4__i___axiom as Main__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_816___axiom as Temp_____aggregate_def_816___axiom
 use        Main__lines__substring__L_4__T72b___axiom as Main__lines__substring__L_4__T72b___axiom

 val main__lines__substring__result [@model_projected] [@name:Substring] [@model_trace:113172@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:84:4] [@GP_Shape:pragargs__cmp] [@GP_Id:79] [@model_vc_post] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:main.adb:84:4:VC_POSTCONDITION] ( [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:84:4] [@GP_Pretty_Ada:113567] ((epsilon temp___result_832 : int.
   ( (temp___result_832 = (Main__lines__length.length main__lines__substring__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_832 main__lines__substring__result.Main__lines__mystring.mystring__content) )) = ((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at main.adb:84 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at main.adb:84 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Main__lines__substring__from.from <= Main__lines__substring__to.to__)) ((Main__lines__substring__to.to__ <= (Main__lines__length___axiom.length(Main__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at main.adb:84 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:113151] (Main__lines__substring__from.from <= Main__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:113154] (Main__lines__substring__to.to__ <= (epsilon temp___result_831 : int.
   ( (temp___result_831 = (Main__lines__length.length Main__lines__substring__m.m)) /\ (Main__lines__length.length__function_guard temp___result_831 Main__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let main__lines__substring__r__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Main__lines__mystring__T13b.range_check_(([#"mystring.adb" 72 0 0] ( [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:84:4] [@GP_Id:70] [@vc:annotation] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) )))) )))); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_816.temp_____aggregate_def_816((32 : int))) } } in (
     (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__substring__r__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Main__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:main.adb:84:4] ([#"mystring.adb" 75 0 0] (let temp___820 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__from.from in (
   (let temp___821 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( temp___820 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at main.adb:84 *)
    ;
    (if ((Boolean.andb((temp___820 <= Main__lines__substring__L_4__i.i.int__content)) ((Main__lines__substring__L_4__i.i.int__content <= temp___821)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__L_4__i.i.int__content in (
       ()))
       in () end ;
      (let temp___829 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
      ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__L_4__i.i.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__j.j.int__content in (
        ()))
        in () end ;
       (let temp___828 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__j.j.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___826 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Main__lines__mystring.mystring
        ensures {[#"mystring.adb" 75 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content })} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:84 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at main.adb:84 *)
         ;
         (let temp___inv_830 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:84:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@GP_Id:77] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:main.adb:84:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:84:4] ( [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:84:4] [@GP_Pretty_Ada:144955] (Main__lines__substring__j.j.int__content = ((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at main.adb:84 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___826.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) ) /\ (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Main__lines__substring__from.from <= Main__lines__substring__to.to__) )) then (
           (Main__lines__substring__L_4__T72b.dynamic_property Main__lines__substring__from.from Main__lines__substring__to.to__ Main__lines__substring__L_4__i.i.int__content)) else true) )/\true )) (( (Main__lines__substring__from.from <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at main.adb:84 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at main.adb:84 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:main.adb:84:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:84:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:main.adb:84:4] ([#"mystring.adb" 77 0 0] (let temp___825 [@mlw:proxy_symbol] [@introduced] = (let temp___824 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___824.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___824 ) with Main__lines__mystring.__split_fields = { ( temp___824.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___823 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Id:73] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__j.j.int__content) /\ (Main__lines__substring__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___822 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___822) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Id:72] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:main.adb:84:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:77:28:instantiated:main.adb:84:4] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
             Main__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___825.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:main.adb:84:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:main.adb:84:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:main.adb:84:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Main__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:78:17:instantiated:main.adb:84:4] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Main__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:84 *)
          ;
          (if ((Main__lines__substring__L_4__i.i.int__content = temp___821)) then (
            raise Main__lines__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( (Main__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_830 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:84:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:84:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:main.adb:84:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:main.adb:84:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (main__lines__substring__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__substring__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@GP_Sloc:mystring.ads:28:51:instantiated:main.adb:84:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:main.adb:84:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:78] [@GP_Shape:pragargs__cmp__add] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  main__lines__substring__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at main.adb:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__get_line__m as Main__lines__get_line__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__get_line__m___axiom as Main__lines__get_line__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at main.adb:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at main.adb:84 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:84:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:84:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@GP_Id:80] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Sloc:mystring.adb:85:44:instantiated:main.adb:84:4] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Main__lines__mystring__T13b__rep.to_rep({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___835 [@mlw:proxy_symbol] [@introduced] = (let temp___834 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___834.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___834 ) with Main__lines__mystring.__split_fields = { ( temp___834.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___833 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___833))) ((Standard__string.first(temp___833))) (Main__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___835.Main__lines__mystring.__split_fields ))))
     ;
     (let temp___837 [@mlw:proxy_symbol] [@introduced] = (let temp___836 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___836.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___836 ) with Main__lines__mystring.__split_fields = { ( temp___836.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@GP_Id:81] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:main.adb:84:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:85:60:instantiated:main.adb:84:4] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] (Main__lines__mystring__T13b.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___837.Main__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "pm" defined at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__pm__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__pm__pinvaluesaved___axiom as Main__pm__pinvaluesaved___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom

 let def [#"main.adb" 87 0 0][@GP_Subp:main.adb:87] 
   (__void_param : unit)
  requires { [#"main.adb" 87 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"passwordmanager.ads" 8 0 0] ());
  ([#"main.adb" 87 0 0] ());
  ([#"passwordmanager.ads" 5 0 0] ());
  ([#"passwordmanager.ads" 11 0 0] ( [#"passwordmanager.ads" 11 0 0] assume { [#"passwordmanager.ads" 11 0 0] (Pin__pin___axiom.default_initial_assumption Main__pm__pinvaluesaved.pinvaluesaved.int__content False) };
  [#"passwordmanager.ads" 11 0 0] assume { [#"passwordmanager.ads" 11 0 0] (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content False False True True) } ));
  ([#"passwordmanager.ads" 12 0 0] ( [#"passwordmanager.ads" 12 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
   ()))
   in () end ;
  [#"passwordmanager.ads" 12 0 0] assume { [#"passwordmanager.ads" 12 0 0] (Passworddatabase__database___axiom.default_initial_assumption Main__pm__db.db.Passworddatabase__database.database__content False) };
  [#"passwordmanager.ads" 12 0 0] assume { [#"passwordmanager.ads" 12 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content False False True True) } ));
  ([#"passwordmanager.ads" 16 0 0] ());
  ([#"passwordmanager.ads" 17 0 0] ());
  ([#"passwordmanager.ads" 23 0 0] ());
  ([#"passwordmanager.ads" 24 0 0] ());
  ([#"passwordmanager.ads" 30 0 0] ());
  ([#"passwordmanager.ads" 31 0 0] ());
  ([#"passwordmanager.ads" 37 0 0] ());
  ([#"passwordmanager.ads" 38 0 0] ());
  ([#"passwordmanager.ads" 56 0 0] ());
  ([#"passwordmanager.ads" 57 0 0] ());
  ([#"passwordmanager.ads" 60 0 0] ());
  ([#"passwordmanager.ads" 61 0 0] ());
  ([#"passwordmanager.ads" 63 0 0] ());
  ([#"passwordmanager.ads" 65 0 0] ());
  ([#"passwordmanager.ads" 67 0 0] ());
  ([#"passwordmanager.ads" 68 0 0] ());
  ();
  ([#"passwordmanager.adb" 2 0 0] ());
  ([#"passwordmanager.adb" 5 0 0] ());
  ([#"passwordmanager.adb" 14 0 0] ());
  ([#"passwordmanager.adb" 27 0 0] ());
  ([#"passwordmanager.adb" 38 0 0] ());
  ([#"passwordmanager.adb" 47 0 0] ());
  ([#"passwordmanager.adb" 62 0 0] ());
  ([#"passwordmanager.adb" 77 0 0] ());
  ([#"passwordmanager.adb" 83 0 0] ());
  ([#"passwordmanager.adb" 89 0 0] ());
  ();
  ( [@GP_Sloc:passwordmanager.adb:101:1:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 101 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init_program" defined at passwordmanager.ads:16 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__init_program__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__init_program__initialpin as Main__pm__init_program__initialpin
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Passworddatabase__init___axiom as Passworddatabase__init___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__init___axiom as Passworddatabase__init___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__pm__pinvaluesaved___axiom as Main__pm__pinvaluesaved___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__init_program__initialpin___axiom as Main__pm__init_program__initialpin___axiom

 let def [#"passwordmanager.ads" 16 0 0][@GP_Subp:passwordmanager.ads:16] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:16 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 16 0 0] assume { [#"passwordmanager.ads" 16 0 0] (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content False False True True) };
  [#"passwordmanager.ads" 16 0 0] assume { [#"passwordmanager.ads" 16 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content False False True True) };
  [#"passwordmanager.ads" 16 0 0] assume { [#"passwordmanager.ads" 16 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__init_program__initialpin.initialpin True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:16 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:16 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 16 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((( [#"passwordmanager.ads" 16 0 0] begin ensures {true} let _ = (let _ = Main__pm__init_program__initialpin.initialpin in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__init_program__initialpin.initialpin)) ) = (4 : int))) (( (let i = [#"passwordmanager.ads" 16 0 0] (val _f : int
  in _f) in (
   (if ((Boolean.andb((( [#"passwordmanager.ads" 16 0 0] begin ensures {true} let _ = (let _ = Main__pm__init_program__initialpin.initialpin in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__init_program__initialpin.initialpin)) ) <= i)) ((i <= ( [#"passwordmanager.ads" 16 0 0] begin ensures {true} let _ = (let _ = Main__pm__init_program__initialpin.initialpin in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__init_program__initialpin.initialpin)) ))))) then (
    [#"passwordmanager.ads" 16 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__init_program__initialpin.initialpin))) (( [#"passwordmanager.ads" 16 0 0] assert { [#"passwordmanager.ads" 16 0 0] ([#"passwordmanager.ads" 18 0 0] ( [@GP_Id:83] [@vc:annotation] [@GP_Sloc:passwordmanager.ads:18:74:instantiated:main.adb:87:4] [@comment:             (for all I in InitialPin'Range => (Character'Pos(InitialPin(I)) >= Character'Pos('0')                                                                          ^ passwordmanager.ads:18:74:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] ( ((Standard__string.first Main__pm__init_program__initialpin.initialpin) <= i) /\ (i <= (Standard__string.last Main__pm__init_program__initialpin.initialpin)) ) )) };
    i ))))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__init_program__initialpin.initialpin))) ((  assert {  ([#"passwordmanager.ads" 19 0 0] ( [@GP_Sloc:passwordmanager.ads:19:66:instantiated:main.adb:87:4] [@GP_Id:84] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:              and Character'Pos('9') >= Character'Pos(InitialPin(I)))));                                                                  ^ passwordmanager.ads:19:66:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] ( ((Standard__string.first Main__pm__init_program__initialpin.initialpin) <= i) /\ (i <= (Standard__string.last Main__pm__init_program__initialpin.initialpin)) ) )) };
    i )))))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@model_trace:113879] [@name:I]  : int.
   ( ( ((Standard__string.first Main__pm__init_program__initialpin.initialpin) <= i) /\ (i <= (Standard__string.last Main__pm__init_program__initialpin.initialpin)) ) -> ( ( [@GP_Pretty_Ada:113860] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__init_program__initialpin.initialpin) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113869] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__init_program__initialpin.initialpin) i))) ) ) )) )} 
  in _f) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:16 instantiated at main.adb:87 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:113854] ((Standard__string.length Main__pm__init_program__initialpin.initialpin) = (4 : int)) ) /\ (forall i   [@model_trace:113879] [@name:I]  : int.
   ( ( ((Standard__string.first Main__pm__init_program__initialpin.initialpin) <= i) /\ (i <= (Standard__string.last Main__pm__init_program__initialpin.initialpin)) ) -> ( ( [@GP_Pretty_Ada:113860] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__init_program__initialpin.initialpin) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113869] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__init_program__initialpin.initialpin) i))) ) ) )) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 5 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:9:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 9 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:9:27:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 9 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:9:21:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 9 0 0] [#"passwordmanager.adb" 9 0 0] (Main__pm__pinvaluesaved.pinvaluesaved.int__content <- ( ([#"passwordmanager.adb" 9 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pinvaluesaved_assign__call_from_string] [@comment:      PINValueSaved := PIN.From_String (InitialPin);                           ^ passwordmanager.adb:9:27:instantiated:main.adb:87:4:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:passwordmanager.adb:9:27:instantiated:main.adb:87:4] (Pin__from_string___axiom.from_string(Main__pm__init_program__initialpin.initialpin)) )) ))) );
   ( [@GP_Sloc:passwordmanager.adb:10:29:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 10 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:10:23:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 10 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:10:23:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 10 0 0] ( (Passworddatabase__init___axiom.init(Main__pm__db.db)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_pin_correct" defined at passwordmanager.ads:23 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__is_pin_correct__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Main__pm__is_pin_correct__pinvaluegiven as Main__pm__is_pin_correct__pinvaluegiven
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Main__pm__is_pin_correct__B_1__pinvaluetocheck as Main__pm__is_pin_correct__B_1__pinvaluetocheck
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__pm__pinvaluesaved___axiom as Main__pm__pinvaluesaved___axiom
 use        Main__pm__is_pin_correct__pinvaluegiven___axiom as Main__pm__is_pin_correct__pinvaluegiven___axiom
 use        Main__pm__is_pin_correct__B_1__pinvaluetocheck___axiom as Main__pm__is_pin_correct__B_1__pinvaluetocheck___axiom

 val main__pm__is_pin_correct__result [@model_projected] [@model_trace:113944@result] [@name:Is_Pin_Correct]  : bool__ref 
 
 let def [#"passwordmanager.ads" 23 0 0][@GP_Subp:passwordmanager.ads:23] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 23 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:23 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 23 0 0] assume { [#"passwordmanager.ads" 23 0 0] (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content True False True True) };
  [#"passwordmanager.ads" 23 0 0] assume { [#"passwordmanager.ads" 23 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:23 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:23 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 23 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((( [#"passwordmanager.ads" 23 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) = (4 : int))) (( (let i = [#"passwordmanager.ads" 23 0 0] (val _f : int
  in _f) in (
   (if ((Boolean.andb((( [#"passwordmanager.ads" 23 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) <= i)) ((i <= ( [#"passwordmanager.ads" 23 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ))))) then (
    [#"passwordmanager.ads" 23 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven))) (( [#"passwordmanager.ads" 23 0 0] assert { [#"passwordmanager.ads" 23 0 0] ([#"passwordmanager.ads" 25 0 0] ( [@comment:             (for all I in PINValueGiven'Range => (Character'Pos(PINValueGiven(I)) >= Character'Pos('0')                                                                                ^ passwordmanager.ads:25:80:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Id:86] [@vc:annotation] [@GP_Sloc:passwordmanager.ads:25:80:instantiated:main.adb:87:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] ( ((Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) )) };
    i ))))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven))) ((  assert {  ([#"passwordmanager.ads" 26 0 0] ( [@GP_Id:87] [@vc:annotation] [@comment:              and Character'Pos('9') >= Character'Pos(PINValueGiven(I)))));                                                                     ^ passwordmanager.ads:26:69:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:passwordmanager.ads:26:69:instantiated:main.adb:87:4] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] ( ((Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) )) };
    i )))))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:113934]  : int.
   ( ( ((Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113915] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113924] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) i))) ) ) )) )} 
  in _f) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:23 instantiated at main.adb:87 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:113909] ((Standard__string.length Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:113934]  : int.
   ( ( ((Standard__string.first Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113915] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113924] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven) i))) ) ) )) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 14 0 0] ());
   ([#"passwordmanager.adb" 16 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:16:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 16 0 0] ( ();
   ([#"passwordmanager.adb" 17 0 0] ());
   ([#"passwordmanager.adb" 17 0 0] ( [#"passwordmanager.adb" 17 0 0] (Main__pm__is_pin_correct__B_1__pinvaluetocheck.pinvaluetocheck.int__content <- ( ([#"passwordmanager.adb" 17 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:85] [@GP_Shape:B_1_declblk__pinvaluetocheck_decl__call_from_string] [@vc:annotation] [@GP_Sloc:passwordmanager.adb:17:42:instantiated:main.adb:87:4] [@comment:         PINValueToCheck : PIN.PIN := PIN.From_String(PINValueGiven);                                          ^ passwordmanager.adb:17:42:instantiated:main.adb:87:4:VC_PRECONDITION] (Pin__from_string___axiom.from_string(Main__pm__is_pin_correct__pinvaluegiven.pinvaluegiven)) )) ));
    assume {  (Pin__pin___axiom.dynamic_invariant Main__pm__is_pin_correct__B_1__pinvaluetocheck.pinvaluetocheck.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:passwordmanager.adb:19:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 19 0 0] (if (( ([#"passwordmanager.adb" 19 0 0] [#"passwordmanager.adb" 19 0 0] (([@branch_id=145632] Main.spark__branch).bool__content <- ( (Main__pm__pinvaluesaved.pinvaluesaved.int__content = Main__pm__is_pin_correct__B_1__pinvaluetocheck.pinvaluetocheck.int__content) )));
   ( [@branch_id=145632] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:20:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 20 0 0] ( [#"passwordmanager.adb" 20 0 0] (main__pm__is_pin_correct__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"passwordmanager.adb" 20 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:22:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 22 0 0] ( [#"passwordmanager.adb" 22 0 0] (main__pm__is_pin_correct__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"passwordmanager.adb" 22 0 0] raise Return__exc )) ) )))) ) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__pm__is_pin_correct__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "update_pin" defined at passwordmanager.ads:30 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__update_pin__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__pm__pinvaluesaved as Main__pm__pinvaluesaved
 use        Main__pm__update_pin__pinvaluegiven as Main__pm__update_pin__pinvaluegiven
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Main__pm__update_pin__B_2__pinvaluetoupdate as Main__pm__update_pin__B_2__pinvaluetoupdate
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__pm__pinvaluesaved___axiom as Main__pm__pinvaluesaved___axiom
 use        Main__pm__update_pin__pinvaluegiven___axiom as Main__pm__update_pin__pinvaluegiven___axiom
 use        Main__pm__update_pin__B_2__pinvaluetoupdate___axiom as Main__pm__update_pin__B_2__pinvaluetoupdate___axiom

 let def [#"passwordmanager.ads" 30 0 0][@GP_Subp:passwordmanager.ads:30] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:30 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 30 0 0] assume { [#"passwordmanager.ads" 30 0 0] (Pin__pin___axiom.dynamic_invariant Main__pm__pinvaluesaved.pinvaluesaved.int__content False False True True) };
  [#"passwordmanager.ads" 30 0 0] assume { [#"passwordmanager.ads" 30 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__update_pin__pinvaluegiven.pinvaluegiven True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:30 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:30 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((( [#"passwordmanager.ads" 30 0 0] begin ensures {true} let _ = (let _ = Main__pm__update_pin__pinvaluegiven.pinvaluegiven in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) = (4 : int))) (( (let i = [#"passwordmanager.ads" 30 0 0] (val _f : int
  in _f) in (
   (if ((Boolean.andb((( [#"passwordmanager.ads" 30 0 0] begin ensures {true} let _ = (let _ = Main__pm__update_pin__pinvaluegiven.pinvaluegiven in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) <= i)) ((i <= ( [#"passwordmanager.ads" 30 0 0] begin ensures {true} let _ = (let _ = Main__pm__update_pin__pinvaluegiven.pinvaluegiven in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ))))) then (
    [#"passwordmanager.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__update_pin__pinvaluegiven.pinvaluegiven))) (( [#"passwordmanager.ads" 30 0 0] assert { [#"passwordmanager.ads" 30 0 0] ([#"passwordmanager.ads" 32 0 0] ( [@comment:             (for all I in PINValueGiven'Range => (Character'Pos(PINValueGiven(I)) >= Character'Pos('0')                                                                                ^ passwordmanager.ads:32:80:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Id:89] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] [@GP_Sloc:passwordmanager.ads:32:80:instantiated:main.adb:87:4] ( ((Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) )) };
    i ))))) >= (48 : int))) (((57 : int) >= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__pm__update_pin__pinvaluegiven.pinvaluegiven))) ((  assert {  ([#"passwordmanager.ads" 33 0 0] ( [@GP_Sloc:passwordmanager.ads:33:69:instantiated:main.adb:87:4] [@vc:annotation] [@comment:              and Character'Pos('9') >= Character'Pos(PINValueGiven(I)))));                                                                     ^ passwordmanager.ads:33:69:instantiated:main.adb:87:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:90] [@GP_Shape:pragargs__and__forall__and__cmp__typeconv__pos_ref__ixdcomp] ( ((Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) )) };
    i )))))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@model_trace:113990] [@name:I]  : int.
   ( ( ((Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113971] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__update_pin__pinvaluegiven.pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113980] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__update_pin__pinvaluegiven.pinvaluegiven) i))) ) ) )) )} 
  in _f) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:30 instantiated at main.adb:87 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:113965] ((Standard__string.length Main__pm__update_pin__pinvaluegiven.pinvaluegiven) = (4 : int)) ) /\ (forall i   [@model_trace:113990] [@name:I]  : int.
   ( ( ((Standard__string.first Main__pm__update_pin__pinvaluegiven.pinvaluegiven) <= i) /\ (i <= (Standard__string.last Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) ) -> ( ( [@GP_Pretty_Ada:113971] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__update_pin__pinvaluegiven.pinvaluegiven) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:113980] ((57 : int) >= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__pm__update_pin__pinvaluegiven.pinvaluegiven) i))) ) ) )) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 27 0 0] ());
   ([#"passwordmanager.adb" 29 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:29:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 29 0 0] ( ();
   ([#"passwordmanager.adb" 30 0 0] ());
   ([#"passwordmanager.adb" 30 0 0] ( [#"passwordmanager.adb" 30 0 0] (Main__pm__update_pin__B_2__pinvaluetoupdate.pinvaluetoupdate.int__content <- ( ([#"passwordmanager.adb" 30 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:88] [@GP_Sloc:passwordmanager.adb:30:44:instantiated:main.adb:87:4] [@vc:annotation] [@GP_Shape:B_2_declblk__pinvaluetoupdate_decl__call_from_string] [@comment:         PINValueToUpdate  : PIN.PIN := PIN.From_String(PINValueGiven);                                            ^ passwordmanager.adb:30:44:instantiated:main.adb:87:4:VC_PRECONDITION] (Pin__from_string___axiom.from_string(Main__pm__update_pin__pinvaluegiven.pinvaluegiven)) )) ));
    assume {  (Pin__pin___axiom.dynamic_invariant Main__pm__update_pin__B_2__pinvaluetoupdate.pinvaluetoupdate.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:passwordmanager.adb:33:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 33 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:33:27:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 33 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:33:24:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 33 0 0] [#"passwordmanager.adb" 33 0 0] (Main__pm__pinvaluesaved.pinvaluesaved.int__content <- ( Main__pm__update_pin__B_2__pinvaluetoupdate.pinvaluetoupdate.int__content ))) ) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put_password" defined at passwordmanager.ads:37 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__put_password__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Main__pm__put_password__u1 as Main__pm__put_password__u1
 use        Main__pm__put_password__p1 as Main__pm__put_password__p1
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__from_string___axiom as Passworddatabase__from_string___axiom
 use        Passworddatabase__put___axiom as Passworddatabase__put___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__put___axiom as Passworddatabase__put___axiom
 use        Passworddatabase__from_string___axiom as Passworddatabase__from_string___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__put_password__u1___axiom as Main__pm__put_password__u1___axiom
 use        Main__pm__put_password__p1___axiom as Main__pm__put_password__p1___axiom

 let def [#"passwordmanager.ads" 37 0 0][@GP_Subp:passwordmanager.ads:37] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 37 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:37 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 37 0 0] assume { [#"passwordmanager.ads" 37 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True False True True) };
  [#"passwordmanager.ads" 37 0 0] assume { [#"passwordmanager.ads" 37 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__put_password__u1.u1 True False True True) };
  [#"passwordmanager.ads" 37 0 0] assume { [#"passwordmanager.ads" 37 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__put_password__p1.p1 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:37 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:37 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((if ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__put_password__u1.u1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__put_password__u1.u1)) ) <= ( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__put_password__u1.u1)) ))) ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__put_password__u1.u1)) ) <= (1024 : int))))) else (
   (Boolean.of_int((1 : int)))))) ((if ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__p1.p1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__put_password__p1.p1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__p1.p1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__put_password__p1.p1)) ) <= ( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__p1.p1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__put_password__p1.p1)) ))) ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__p1.p1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__put_password__p1.p1)) ) <= (100 : int))))) else (
   (Boolean.of_int((1 : int)))))))) ((Boolean.orb(((Passworddatabase__length__3___axiom.length__3(Main__pm__db.db.Passworddatabase__database.database__content)) < (1000 : int))) ((if ((if ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__put_password__u1.u1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__put_password__u1.u1)) ) <= ( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__put_password__u1.u1)) ))) ((( [#"passwordmanager.ads" 37 0 0] begin ensures {true} let _ = (let _ = Main__pm__put_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__put_password__u1.u1)) ) <= (1024 : int))))) else (
   (Boolean.of_int((1 : int)))))) then (
   (Passworddatabase__has_password_for___axiom.has_password_for(Main__pm__db.db.Passworddatabase__database.database__content) (([#"passwordmanager.ads" 45 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:passwordmanager.ads:45:77:instantiated:main.adb:87:4] [@vc:annotation] [@GP_Shape:pragargs__and__or__if__call_has_password_for__call_from_string__2] [@comment:                       PasswordDatabase.Has_Password_For(DB,PasswordDatabase.From_String(U1)                                                                             ^ passwordmanager.ads:45:77:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:94] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__put_password__u1.u1)) ))))) else (
   (Boolean.of_int((1 : int))))))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:37 instantiated at main.adb:87 *)
  ;
   assume {  ( ( (if (((Standard__string.length Main__pm__put_password__u1.u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114027] ((Standard__string.first Main__pm__put_password__u1.u1) <= (Standard__string.last Main__pm__put_password__u1.u1)) ) /\ ( [@GP_Pretty_Ada:114032] ((Standard__string.length Main__pm__put_password__u1.u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114716] true ))) /\ (if (((Standard__string.length Main__pm__put_password__p1.p1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114042] ((Standard__string.first Main__pm__put_password__p1.p1) <= (Standard__string.last Main__pm__put_password__p1.p1)) ) /\ ( [@GP_Pretty_Ada:114047] ((Standard__string.length Main__pm__put_password__p1.p1) <= (100 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114722] true ))) ) /\ ( [@GP_Pretty_Ada:114051] ( ((epsilon temp___result_839 : int.
   ( (temp___result_839 = (Passworddatabase__length__3.length__3 Main__pm__db.db.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_839 Main__pm__db.db.Passworddatabase__database.database__content) )) < (1000 : int)) \/ (if ((if (((Standard__string.length Main__pm__put_password__u1.u1) > (0 : int))) then (
   ( ((Standard__string.first Main__pm__put_password__u1.u1) <= (Standard__string.last Main__pm__put_password__u1.u1)) /\ ((Standard__string.length Main__pm__put_password__u1.u1) <= (1024 : int)) )) else (
   true))) then (
   ((epsilon temp___result_841 : bool.
    ( (temp___result_841 = (Passworddatabase__has_password_for.has_password_for Main__pm__db.db.Passworddatabase__database.database__content (epsilon temp___result_840 : Passworddatabase__url.url.
     ( (temp___result_840 = (Passworddatabase__from_string__2.from_string__2 Main__pm__put_password__u1.u1)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_840 Main__pm__put_password__u1.u1) )))) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_841 Main__pm__db.db.Passworddatabase__database.database__content (epsilon temp___result_840 : Passworddatabase__url.url.
     ( (temp___result_840 = (Passworddatabase__from_string__2.from_string__2 Main__pm__put_password__u1.u1)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_840 Main__pm__put_password__u1.u1) ))) )) = True)) else (
   true)) ) ) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 38 0 0] ());
   ([#"passwordmanager.adb" 38 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:42:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 42 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:42:30:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 42 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:43:26:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 43 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:41:23:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 41 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:41:23:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 41 0 0] ( ([#"passwordmanager.adb" 41 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:call_put] [@comment:      PasswordDatabase.Put                       ^ passwordmanager.adb:41:23:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:93] [@GP_Sloc:passwordmanager.adb:41:23:instantiated:main.adb:87:4] (Passworddatabase__put___axiom.put(Main__pm__db.db) (([#"passwordmanager.adb" 42 0 0] ( [@GP_Sloc:passwordmanager.adb:42:30:instantiated:main.adb:87:4] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        (DB, PasswordDatabase.From_String (U1),                              ^ passwordmanager.adb:42:30:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Shape:call_put__call_from_string__2] [@GP_Id:91] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__put_password__u1.u1)) ))) (([#"passwordmanager.adb" 43 0 0] ( [@GP_Sloc:passwordmanager.adb:43:26:instantiated:main.adb:87:4] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:call_put__call_from_string] [@vc:annotation] [@GP_Id:92] [@comment:         PasswordDatabase.From_String (P1));                          ^ passwordmanager.adb:43:26:instantiated:main.adb:87:4:VC_PRECONDITION] (Passworddatabase__from_string___axiom.from_string(Main__pm__put_password__p1.p1)) )))) )) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_password" defined at passwordmanager.ads:56 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__get_password__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Main__pm__get_password__u1 as Main__pm__get_password__u1
 use        Passworddatabase__password as Passworddatabase__password
 use        Passworddatabase__get__3___axiom as Passworddatabase__get__3___axiom
 use        Passworddatabase__to_string___axiom as Passworddatabase__to_string___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Temp___String_Literal_842 as Temp___String_Literal_842
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__get__3___axiom as Passworddatabase__get__3___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__to_string___axiom as Passworddatabase__to_string___axiom
 use        Passworddatabase__password___axiom as Passworddatabase__password___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__get_password__u1___axiom as Main__pm__get_password__u1___axiom

 val main__pm__get_password__result [@model_projected] [@model_trace:114132@result] [@name:Get_Password]  : Standard__string.string__ref 
 
 let def [#"passwordmanager.ads" 56 0 0][@GP_Subp:passwordmanager.ads:56] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 56 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:56 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 56 0 0] assume { [#"passwordmanager.ads" 56 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True False True True) };
  [#"passwordmanager.ads" 56 0 0] assume { [#"passwordmanager.ads" 56 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__get_password__u1.u1 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:56 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:56 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 56 0 0] begin ensures {true} let _ = (let _ = (if ((( [#"passwordmanager.ads" 56 0 0] begin ensures {true} let _ = (let _ = Main__pm__get_password__u1.u1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__get_password__u1.u1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 56 0 0] begin ensures {true} let _ = (let _ = Main__pm__get_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__get_password__u1.u1)) ) <= ( [#"passwordmanager.ads" 56 0 0] begin ensures {true} let _ = (let _ = Main__pm__get_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__get_password__u1.u1)) ))) ((( [#"passwordmanager.ads" 56 0 0] begin ensures {true} let _ = (let _ = Main__pm__get_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__get_password__u1.u1)) ) <= (1024 : int))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:56 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 56 0 0] assume { [#"passwordmanager.ads" 56 0 0] (if (((Standard__string.length Main__pm__get_password__u1.u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114122] ((Standard__string.first Main__pm__get_password__u1.u1) <= (Standard__string.last Main__pm__get_password__u1.u1)) ) /\ ( [@GP_Pretty_Ada:114127] ((Standard__string.length Main__pm__get_password__u1.u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114734] true ))) };
  [#"passwordmanager.ads" 56 0 0] try
   ( ();
   ([#"passwordmanager.adb" 47 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:53:13:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 53 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:53:33:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 53 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:52:26:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 52 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:51:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 51 0 0] (if (( ([#"passwordmanager.adb" 51 0 0] [#"passwordmanager.adb" 51 0 0] (([@branch_id=145783] Main.spark__branch).bool__content <- ( (Passworddatabase__has_password_for___axiom.has_password_for(Main__pm__db.db.Passworddatabase__database.database__content) (([#"passwordmanager.adb" 53 0 0] ( [@GP_Sloc:passwordmanager.adb:53:33:instantiated:main.adb:87:4] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__call_has_password_for__call_from_string__2] [@comment:           (DB, PasswordDatabase.From_String (U1)))                                 ^ passwordmanager.adb:53:33:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:97] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__get_password__u1.u1)) )))) )));
   ( [@branch_id=145783] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:56:37:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 56 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:56:57:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 56 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:56:31:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 56 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:55:33:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 55 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:55:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 55 0 0] ( [#"passwordmanager.adb" 55 0 0] (main__pm__get_password__result.Standard__string.string__content <- ( (Passworddatabase__to_string___axiom.to_string(([#"passwordmanager.adb" 56 0 0] ( [@GP_Shape:if__return__call_to_string__call_get__3] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:             (PasswordDatabase.Get (DB, PasswordDatabase.From_String (U1)));                               ^ passwordmanager.adb:56:31:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:96] [@GP_Sloc:passwordmanager.adb:56:31:instantiated:main.adb:87:4] (Passworddatabase__get__3___axiom.get__3(Main__pm__db.db.Passworddatabase__database.database__content) (([#"passwordmanager.adb" 56 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:             (PasswordDatabase.Get (DB, PasswordDatabase.From_String (U1)));                                                         ^ passwordmanager.adb:56:57:instantiated:main.adb:87:4:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:passwordmanager.adb:56:57:instantiated:main.adb:87:4] [@GP_Id:95] [@GP_Shape:if__return__call_to_string__call_get__3__call_from_string__2] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__get_password__u1.u1)) )))) )))) ));
     raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:passwordmanager.adb:59:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 59 0 0] ( [#"passwordmanager.adb" 59 0 0] (main__pm__get_password__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_842.temp___String_Literal_842(()))) ((1 : int)) ((0 : int))) ));
   [#"passwordmanager.adb" 59 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__pm__get_password__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "remove_password" defined at passwordmanager.ads:60 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__remove_password__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Main__pm__remove_password__u1 as Main__pm__remove_password__u1
 use        Passworddatabase__remove___axiom as Passworddatabase__remove___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__remove___axiom as Passworddatabase__remove___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__remove_password__u1___axiom as Main__pm__remove_password__u1___axiom

 let def [#"passwordmanager.ads" 60 0 0][@GP_Subp:passwordmanager.ads:60] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 60 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:60 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 60 0 0] assume { [#"passwordmanager.ads" 60 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True False True True) };
  [#"passwordmanager.ads" 60 0 0] assume { [#"passwordmanager.ads" 60 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__remove_password__u1.u1 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:60 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:60 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 60 0 0] begin ensures {true} let _ = (let _ = (if ((( [#"passwordmanager.ads" 60 0 0] begin ensures {true} let _ = (let _ = Main__pm__remove_password__u1.u1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__remove_password__u1.u1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 60 0 0] begin ensures {true} let _ = (let _ = Main__pm__remove_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__remove_password__u1.u1)) ) <= ( [#"passwordmanager.ads" 60 0 0] begin ensures {true} let _ = (let _ = Main__pm__remove_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__remove_password__u1.u1)) ))) ((( [#"passwordmanager.ads" 60 0 0] begin ensures {true} let _ = (let _ = Main__pm__remove_password__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__remove_password__u1.u1)) ) <= (1024 : int))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:60 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 60 0 0] assume { [#"passwordmanager.ads" 60 0 0] (if (((Standard__string.length Main__pm__remove_password__u1.u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114158] ((Standard__string.first Main__pm__remove_password__u1.u1) <= (Standard__string.last Main__pm__remove_password__u1.u1)) ) /\ ( [@GP_Pretty_Ada:114163] ((Standard__string.length Main__pm__remove_password__u1.u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114744] true ))) };
  [#"passwordmanager.ads" 60 0 0] try
   ( ();
   ([#"passwordmanager.adb" 62 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:68:13:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 68 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:68:33:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 68 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:67:26:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 67 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:66:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 66 0 0] (if (( ([#"passwordmanager.adb" 66 0 0] [#"passwordmanager.adb" 66 0 0] (([@branch_id=145831] Main.spark__branch).bool__content <- ( (Passworddatabase__has_password_for___axiom.has_password_for(Main__pm__db.db.Passworddatabase__database.database__content) (([#"passwordmanager.adb" 68 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__call_has_password_for__call_from_string__2] [@GP_Sloc:passwordmanager.adb:68:33:instantiated:main.adb:87:4] [@GP_Id:100] [@comment:           (DB, PasswordDatabase.From_String (U1)))                                 ^ passwordmanager.adb:68:33:instantiated:main.adb:87:4:VC_PRECONDITION] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__remove_password__u1.u1)) )))) )));
   ( [@branch_id=145831] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:70:35:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 70 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:70:55:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 70 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:70:26:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 70 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:70:26:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 70 0 0] ( ([#"passwordmanager.adb" 70 0 0] ( [@GP_Shape:if__call_remove] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:passwordmanager.adb:70:26:instantiated:main.adb:87:4] [@comment:         PasswordDatabase.Remove (DB, PasswordDatabase.From_String (U1));                          ^ passwordmanager.adb:70:26:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:99] (Passworddatabase__remove___axiom.remove(Main__pm__db.db) (([#"passwordmanager.adb" 70 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:passwordmanager.adb:70:55:instantiated:main.adb:87:4] [@vc:annotation] [@GP_Shape:if__call_remove__call_from_string__2] [@comment:         PasswordDatabase.Remove (DB, PasswordDatabase.From_String (U1));                                                       ^ passwordmanager.adb:70:55:instantiated:main.adb:87:4:VC_PRECONDITION] [@GP_Id:98] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__remove_password__u1.u1)) )))) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_db_size" defined at passwordmanager.ads:63 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__get_db_size__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 val main__pm__get_db_size__result [@model_trace:114186@result] [@model_projected] [@name:Get_DB_Size]  : int__ref 
 
 let def [#"passwordmanager.ads" 63 0 0][@GP_Subp:passwordmanager.ads:63] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 63 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:63 instantiated at main.adb:87 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:63 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:63 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 63 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:63 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 63 0 0] try
   ( ();
   ( [@GP_Sloc:passwordmanager.adb:79:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 79 0 0] ( [#"passwordmanager.adb" 79 0 0] (main__pm__get_db_size__result.int__content <- ( (1000 : int) ));
   [#"passwordmanager.adb" 79 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__pm__get_db_size__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_db_length" defined at passwordmanager.ads:65 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__get_db_length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom

 val main__pm__get_db_length__result [@name:Get_DB_Length] [@model_projected] [@model_trace:114200@result]  : int__ref 
 
 let def [#"passwordmanager.ads" 65 0 0][@GP_Subp:passwordmanager.ads:65] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 65 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:65 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 65 0 0] assume { [#"passwordmanager.ads" 65 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:65 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:65 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 65 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:65 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 65 0 0] try
   ( ();
   ( [@GP_Sloc:passwordmanager.adb:85:38:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 85 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:85:30:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 85 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:85:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 85 0 0] ( [#"passwordmanager.adb" 85 0 0] (main__pm__get_db_length__result.int__content <- ( (Passworddatabase__length__3___axiom.length__3(Main__pm__db.db.Passworddatabase__database.database__content)) ));
   [#"passwordmanager.adb" 85 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__pm__get_db_length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_website_registered_already" defined at passwordmanager.ads:67 instantiated at main.adb:87, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__pm__is_website_registered_already__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__pm__db as Main__pm__db
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Main__pm__is_website_registered_already__u1 as Main__pm__is_website_registered_already__u1
 use        Main__pm__is_website_registered_already__B_3__isitemindb as Main__pm__is_website_registered_already__B_3__isitemindb
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__pm__db___axiom as Main__pm__db___axiom
 use        Main__pm__is_website_registered_already__u1___axiom as Main__pm__is_website_registered_already__u1___axiom
 use        Main__pm__is_website_registered_already__B_3__isitemindb___axiom as Main__pm__is_website_registered_already__B_3__isitemindb___axiom

 val main__pm__is_website_registered_already__result [@model_projected] [@name:Is_Website_Registered_Already] [@model_trace:114231@result]  : bool__ref 
 
 let def [#"passwordmanager.ads" 67 0 0][@GP_Subp:passwordmanager.ads:67] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 67 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:67 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 67 0 0] assume { [#"passwordmanager.ads" 67 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__pm__db.db.Passworddatabase__database.database__content True False True True) };
  [#"passwordmanager.ads" 67 0 0] assume { [#"passwordmanager.ads" 67 0 0] (Standard__string___axiom.dynamic_invariant Main__pm__is_website_registered_already__u1.u1 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:67 instantiated at main.adb:87 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:67 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 67 0 0] begin ensures {true} let _ = (let _ = (if ((( [#"passwordmanager.ads" 67 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_website_registered_already__u1.u1 in (
   ()))
   in () end ;
  (Standard__string.length(Main__pm__is_website_registered_already__u1.u1)) ) > (0 : int))) then (
   (Boolean.andb((( [#"passwordmanager.ads" 67 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_website_registered_already__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.first(Main__pm__is_website_registered_already__u1.u1)) ) <= ( [#"passwordmanager.ads" 67 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_website_registered_already__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.last(Main__pm__is_website_registered_already__u1.u1)) ))) ((( [#"passwordmanager.ads" 67 0 0] begin ensures {true} let _ = (let _ = Main__pm__is_website_registered_already__u1.u1 in (
    ()))
    in () end ;
   (Standard__string.length(Main__pm__is_website_registered_already__u1.u1)) ) <= (1024 : int))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:67 instantiated at main.adb:87 *)
  ;
  [#"passwordmanager.ads" 67 0 0] assume { [#"passwordmanager.ads" 67 0 0] (if (((Standard__string.length Main__pm__is_website_registered_already__u1.u1) > (0 : int))) then (
   ( ( [@GP_Pretty_Ada:114221] ((Standard__string.first Main__pm__is_website_registered_already__u1.u1) <= (Standard__string.last Main__pm__is_website_registered_already__u1.u1)) ) /\ ( [@GP_Pretty_Ada:114226] ((Standard__string.length Main__pm__is_website_registered_already__u1.u1) <= (1024 : int)) ) )) else (
   ( [@GP_Pretty_Ada:114754] true ))) };
  [#"passwordmanager.ads" 67 0 0] try
   ( ();
   ([#"passwordmanager.adb" 89 0 0] ());
   ([#"passwordmanager.adb" 91 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:91:7:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 91 0 0] ( ();
   ([#"passwordmanager.adb" 92 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:94:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 94 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:95:13:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 95 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:95:33:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 95 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:94:40:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 94 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:94:21:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 94 0 0] [#"passwordmanager.adb" 94 0 0] (Main__pm__is_website_registered_already__B_3__isitemindb.isitemindb.bool__content <- ( (Passworddatabase__has_password_for___axiom.has_password_for(Main__pm__db.db.Passworddatabase__database.database__content) (([#"passwordmanager.adb" 95 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:101] [@GP_Sloc:passwordmanager.adb:95:33:instantiated:main.adb:87:4] [@GP_Shape:B_3_declblk__isitemindb_assign__call_has_password_for__call_from_string__2] [@comment:           (DB, PasswordDatabase.From_String (U1));                                 ^ passwordmanager.adb:95:33:instantiated:main.adb:87:4:VC_PRECONDITION] (Passworddatabase__from_string__2___axiom.from_string__2(Main__pm__is_website_registered_already__u1.u1)) )))) ))) );
   ( [@GP_Sloc:passwordmanager.adb:97:17:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 97 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:97:10:instantiated:main.adb:87:4] ([#"passwordmanager.adb" 97 0 0] ( [#"passwordmanager.adb" 97 0 0] (main__pm__is_website_registered_already__result.bool__content <- ( Main__pm__is_website_registered_already__B_3__isitemindb.isitemindb.bool__content ));
   [#"passwordmanager.adb" 97 0 0] raise Return__exc )) ) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__pm__is_website_registered_already__result.bool__content )
end
